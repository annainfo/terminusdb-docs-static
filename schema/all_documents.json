[
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Getting Started"
    },
    "slug": "index",
    "body": {
      "@type": "Body",
      "value": "## Getting started with TerminusCMS takes a minute\n\nTerminusCMS is a headless content management system. It is designed to give devs a solution for complex content and knowledge infrastructures. Bringing together change request workflows, analytics, and complex integrations, TerminusCMS aims to be a content platform that sits at the convergence of content and knowledge.\n\nTerminusCMS is free to get started. When you sign up, you are assigned the community package. This comes with generous limits to allow you to build for free, and then upgrade when needed.\n\n### Steps to get started\n\n1.  Sign up at [https://dashboard.terminusdb.com](https://dashboard.terminusdb.com)\n2.  Take a look through the [product tour](/docs/projects-terminuscms-tour/) to familiarise yourself with TerminusCMS\n3.  Install the [JavaScript](/docs/install-terminusdb-js-client/) or [Python](/docs/install-the-python-client/) Client\n4.  [Get your API key to use a client with TerminusCMS.](/docs/how-to-connect-terminuscms/)\n5.  [Familiarize yourself with the client API](/docs/connect-with-the-javascript-client/) to start building with TerminusCMS.\n\n### Demo Projects\n\nThere are several demo projects available to clone and experiment with. Sign up and visit your team home page to clone these projects.\n\n![Clone a demo data product from the TerminusCMS dashboard](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)\n\nYour team home page features a number of demo projects to clone and experiment with."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB/CMS Technical Documentation",
      "description": "Technical documentation for TerminusDB and TerminusCMS. ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone a demo data product from the TerminusCMS dashboard",
        "caption": "Your team home page features a number of demo projects to clone and experiment with.",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone a demo data product from the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Getting Started"
    },
    "slug": "get-started",
    "body": {
      "@type": "Body",
      "value": "TerminusCMS is a headless content management system. It is designed to give devs a solution for complex content and knowledge infrastructures. Bringing together change request workflows, analytics, and complex integrations, TerminusCMS aims to be a content platform that sits at the convergence of content and knowledge.\n\nTerminusCMS is free to get started. When you sign up, you are assigned the community package. This comes with generous limits to allow you to build for free, and then upgrade when needed.\n\n### Steps to get started\n\n1.  Sign up at [https://dashboard.terminusdb.com](https://dashboard.terminusdb.com)\n2.  Take a look through the [product tour](/docs/projects-terminuscms-tour/) to familiarise yourself with TerminusCMS\n3.  Install the [JavaScript](/docs/install-terminusdb-js-client/) or [Python](/docs/install-the-python-client/) Client\n4.  [Get your API key to use a client with TerminusCMS.](/docs/how-to-connect-terminuscms/)\n5.  [Familiarize yourself with the client API](/docs/connect-with-the-javascript-client/) to start building with TerminusCMS.\n\n### Demo Projects\n\nThere are several demo projects available to clone and experiment with. Sign up and visit your team home page to clone these projects.\n\n![Clone a demo data product from the TerminusCMS dashboard](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)\n\nYour team home page features a number of demo projects to clone and experiment with."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB/CMS Technical Documentation",
      "description": "Technical documentation for TerminusDB and TerminusCMS. ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone a demo data product from the TerminusCMS dashboard",
        "caption": "Your team home page features a number of demo projects to clone and experiment with.",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone a demo data product from the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusCMS Product Tour"
    },
    "slug": "product-tour",
    "body": {
      "@type": "Body",
      "value": "TerminusCMS includes many features to build content infrastructures for complex environments. This product tour aims to provide you with an understanding of how to navigate the product and get started on your projects.\n\n*   [Creating projects, managing them, and designing your schema](/docs/projects-terminuscms-tour/)\n*   [Content and data curation](/docs/content-curation-terminuscms-tour/)\n*   [Change request workflows for collaborative content management](/docs/change-request-workflows-terminuscms-tour/)\n*   [Managing teams and users](/docs/manage-teams-users-terminuscms-tour/)\n*   [GraphQL and WOQL playgrounds to build and test queries](/docs/graphql-and-woql-query-terminuscms-tour/)\n\n### Sign Up and Try Out a Demo Project\n\nSign up for TerminusCMS for free at: [https://dashboard.terminusdb.com](https://dashboard.terminusdb.com).\n\nVerify your email address by clicking on the link emailed to you and logging in.\n\nClick 'get started' on the Community Package and then select the automatically generated team.\n\nFrom here, clone one of the demo projects to play around with -\n\n![Try out TerminusCMS by clone a demo data product](https://assets.terminusdb.com/docs/profile-option.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Product Tour",
      "description": "This page provides an overview of the TerminusCMS dashboard to help you navigate its features.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Try out TerminusCMS by clone a demo data product",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Try out TerminusCMS by clone a demo data product"
        },
        "value": "https://assets.terminusdb.com/docs/profile-option.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Projects Overview - TerminusCMS Tour"
    },
    "slug": "projects-terminuscms-tour",
    "body": {
      "@type": "Body",
      "value": "## Create a new data product\n\nCreating a data product by -\n\n1.  Select ‘New Data Product’\n2.  Give it an ID (only alphanumeric characters and underscores are allowed)\n3.  Name it something meaningful\n4.  Give it a description so that team members can see its purpose.\n\n![Create a new data product](https://assets.terminusdb.com/docs/new-data-product2.png)\n\nAll projects/data products within a team are listed on the left.\n\nSelect the data product by clicking it.\n\n## Adding a Schema\n\nBuild a project's schemas using the user interface or develop it in code.\n\nFor a detailed overview of the schema language, which is based on JSON syntax refer to the [schema reference guide](/docs/schema-reference-guide/).\n\n### Visual Interface\n\n![UI schema builder](https://assets.terminusdb.com/docs/schema-graph-view.png)\n\n1.  Choose Data Product Model from the lefthand menu - the second icon\n2.  In the window, you will see an oval called your data product name schema. Click on the oval and select the + symbol\n3.  Add a document or enum\n\n*   JSON documents form the nodes of the graph\n*   Enumerated types are a set of possible choices\n\n5.  Select add document\n6.  On the right, you will see a set of options to define the document\n\n*   Give it a unique ID (no spaces)\n*   Define the document key, choose from [this blog will help you decide what key to use](https://terminusdb.com/blog/uri-generation/)\n\n*   Lexical (need to set up document properties first)\n*   Hash (need to set up document properties first)\n*   Random\n*   ValueHash\n\n8.  Add the document properties, choose from:\n\n*   Enum - Need to create the enums before this option becomes available\n*   Numeric\n*   String\n*   Geo\n*   Temporal\n*   Boolean\n*   JSON\n*   Link - building the relationships in the graph\n\n10.  On the next tab, you can see the relationships in the graph, this will show links between objects. You can also set the document as a parent/child of another document.\n11.  The final tab when creating the document shows it in its JSON format.\n12.  Save your document by clicking on the disk icon.\n\nCreating subdocuments and enums can be achieved in much the same way.\n\n#### Schema as Code\n\n![Develop a schema with code](https://assets.terminusdb.com/docs/schema-as-code.png)\n\nUsing a visual editor to build a schema isn’t for everybody. Users can also design schema as code.\n\n1.  Choose Data Product Model from the lefthand menu - the second icon.\n2.  In the window, there are two tabs, ‘Graph View’ and ‘JSON View’.\n3.  Select JSON View.\n4.  Click on the edit icon.\n5.  Add or copy and paste the JSON schema into the window and save.\n\nThe schema should now display in the graph view.\n\n## Version Control Features\n\nTerminusCMS has collaboration and version control features. Some of these are available via the dashboard. From the left select the first icon to navigate to your project home page -\n\n![Manage your project](https://assets.terminusdb.com/docs/project-admin.png)\n\nOn this page, you can -\n\n*   See a snapshot of the latest activities.\n*   See the project details.\n*   Clone the project - name it and decide which team you want to clone it to.\n*   Delete the project.\n*   Branch the project - along with reset and squash.\n*   Time travel to any previous commit to inspect the project in the past.\n\n![Time travel to a previous commit](https://assets.terminusdb.com/docs/time-travel2.png)\n\n### Branch Projects\n\nAt the bottom of the project home page is the branch button.\n\n![Branch the project](https://assets.terminusdb.com/docs/branch-project.png)\n\nEach project can have one or more branches, the default is called main. Each branch contains a snapshot of the data as it was at the time of branching. This is useful for experimenting or providing data to other teams when you want to keep them away from main.\n\nUsers can reset a branch to a specific commit or can delete the commit history by squashing it. They do this by selecting the ellipsis symbol next to the branch and then following the prompts.\n\n![Branch Options](https://assets.terminusdb.com/docs/branch-options.png)\n\n### Reset Project\n\nTerminusCMS enables users to reset the project database to a particular commit. To do this, scroll to the bottom of the project home page and click branches.\n\nSelect the ellipsis symbol next to main. Here users can reset to a specific commit, or delete the commit history by squashing it.\n\n![Reset the project](https://assets.terminusdb.com/docs/reset-to-commit.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Projects Overview - TerminusCMS Tour",
      "description": "How to add and manage projects/data products within TerminusCMS",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Create a new data product",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create a new data product"
        },
        "value": "https://assets.terminusdb.com/docs/new-data-product2.png"
      },
      {
        "@type": "Media",
        "alt": "UI schema builder",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "UI schema builder"
        },
        "value": "https://assets.terminusdb.com/docs/schema-graph-view.png"
      },
      {
        "@type": "Media",
        "alt": "Develop a schema with code",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Develop a schema with code"
        },
        "value": "https://assets.terminusdb.com/docs/schema-as-code.png"
      },
      {
        "@type": "Media",
        "alt": "Manage your project",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Manage your project"
        },
        "value": "https://assets.terminusdb.com/docs/project-admin.png"
      },
      {
        "@type": "Media",
        "alt": "Time travel to a previous commit",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Time travel to a previous commit"
        },
        "value": "https://assets.terminusdb.com/docs/time-travel2.png"
      },
      {
        "@type": "Media",
        "alt": "Branch the project",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch the project"
        },
        "value": "https://assets.terminusdb.com/docs/branch-project.png"
      },
      {
        "@type": "Media",
        "alt": "Branch Options",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch Options"
        },
        "value": "https://assets.terminusdb.com/docs/branch-options.png"
      },
      {
        "@type": "Media",
        "alt": "Reset the project",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Reset the project"
        },
        "value": "https://assets.terminusdb.com/docs/reset-to-commit.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Manage Teams & Users in TerminusCMS"
    },
    "slug": "manage-teams-users-terminuscms-tour",
    "body": {
      "@type": "Body",
      "value": "## Manage Your Teams\n\nTerminusCMS generates a team based on your registration credentials.\n\nThe pricing page is the first screen displayed when logging in for the first time, click on '**Get Started**' under the community package. The next screen is the teams home page that lists all of the teams a user belongs to.\n\n![The first page you'll see when first logging into TerminusCMS](https://assets.terminusdb.com/docs/pricing-page.png)\n\n![Teams home page](https://assets.terminusdb.com/docs/teams-home-page.png)\n\nCreate a new team or select the autogenerated team. All of the teams a user is a member of will appear on the team's home page. Switch between teams using the dropdown from the top menu.\n\nTo create a new team from the top menu:\n\n1.  Click the arrow next to the profile icon in the top right corner.\n2.  Select profile.\n3.  From the resulting window, select ‘Create a new team’\n4.  Name the team - note that no two team names can be the same.\n\n![Create a new team](https://assets.terminusdb.com/docs/create-new-team.png)\n\n![Select profile to create a new team](https://assets.terminusdb.com/docs/profile-option.png)\n\n### **Adding Users**\n\n![Manage your team's users](https://assets.terminusdb.com/docs/users-home-page.png)\n\nTo invite team members and manage the team, do the following:\n\n1.  Click the arrow next to your profile icon in the top right corner\n2.  Select 'Team Members'.\n3.  In the following screen, select 'Invite a Member'.\n4.  In the pop-up window, enter the user’s email address and select one of the following access permissions - \\_this will be applied to team-level permissions so will apply to all data products within your team. If you want to only give read-write access to a specific data product, it makes sense to give the user low-level permissions and assign higher permissions for that data product only - we will explain this next\\_.\n\n*   Admin - can add and remove users and permissions and has total access to data products\n*   Collaborator - Able to access data products.\n*   Data Updater - Read and write access to data products.\n*   Data Reader - Read-only access to data products.\n*   Info Reader - Schema-level access but not data-level access.\n\n6.  The user will be sent an email with a link they need to click (if they don’t receive it, tell them to check their spam folder).\n7.  When the user has accepted the invitation, their details will display within the Team Members section.\n\n### **Editing & Removing Users**\n\nTo edit the role given to a user:\n\n1.  Navigate to the Team Members section from the profile dropdown.\n2.  Find the user to change from the list and click on the second icon.\n3.  From the pop-up window, select the new role to give them.\n\nTo delete a user from a team, do the same as above, but select the third icon in red.\n\n> Hover over the icons for information about what they do.\n\n### **Granular Permissions**\n\nGrant different permissions for different data products/projects. To do this do the following:\n\n1.  Navigate to the Team Members section from the profile dropdown.\n2.  Find the user to add specific data product permissions for and click on the first icon.\n3.  The resulting table below will list all of the data products in the team.\n4.  Choose the data product to change the user’s role for by clicking on the edit permissions icon.\n5.  Choose from the list of permissions\n\n![](https://assets.terminusdb.com/docs/granular-permissions.png)\n\n> Users can only have permissions higher than the team permissions, so if someone needs read/write permissions for only one data product, ensure that the team permissions are set at a lower level."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Manage Teams & Users - TerminusCMS Tour",
      "description": "A quick overview for how to manage your teams and users in the TerminusCMS dashboard",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "The first page you'll see when first logging into TerminusCMS",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "The first page you'll see when first logging into TerminusCMS"
        },
        "value": "https://assets.terminusdb.com/docs/pricing-page.png"
      },
      {
        "@type": "Media",
        "alt": "Teams home page",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Teams home page"
        },
        "value": "https://assets.terminusdb.com/docs/teams-home-page.png"
      },
      {
        "@type": "Media",
        "alt": "Create a new team",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create a new team"
        },
        "value": "https://assets.terminusdb.com/docs/create-new-team.png"
      },
      {
        "@type": "Media",
        "alt": "Select profile to create a new team",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Select profile to create a new team"
        },
        "value": "https://assets.terminusdb.com/docs/profile-option.png"
      },
      {
        "@type": "Media",
        "alt": "Manage your team's users",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Manage your team's users"
        },
        "value": "https://assets.terminusdb.com/docs/users-home-page.png"
      },
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 6"
        },
        "value": "https://assets.terminusdb.com/docs/granular-permissions.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Content & Data Curation in TerminusCMS"
    },
    "slug": "content-curation-terminuscms-tour",
    "body": {
      "@type": "Body",
      "value": "TerminusCMS automatically generates document editing frames from the schema. Users can then add, edit, and delete content and data as needed.\n\nFirst, navigate to the document explorer from the left menu -\n\n![TerminusCMS document explorer](https://assets.terminusdb.com/docs/document-explorer.png)\n\nThe document explorer lists all of the document types within the schema and displays how many of each there are.\n\nThe left-hand menu also details the document names with the ability to search for something specific.\n\n## Filtering and Searching Documents\n\nClicking on a document type displays a list of matching documents -\n\n![Document display](https://assets.terminusdb.com/docs/document-display.png)\n\nThe document table allows users to -\n\n*   Choose the properties to display in the table\n*   Search properties\n*   Perform advanced filters\n\n## GraphQL Query\n\nThe GraphQL tab provides front-end developers with an overview of the GraphQL query structure of the document and includes JSON-LD details for applied filters -\n\n![GraphQL query generated from filter results](https://assets.terminusdb.com/docs/document-view-graphql-query.png)\n\n## Adding, Editing, & Deleting Docs\n\nIn order to make changes to content and data, users need to create a change request. This is automated when selecting to edit, delete, or add content. Please refer to the [change request workflows section](/docs/change-request-workflows-terminuscms-tour/) for full details.\n\nA change request dialogue box opens and prompts the user to add a change request title and description. They can then go and make changes.\n\n### Adding Content & Data\n\nTo add content and data, either click on the + symbol next to the document type name from the left menu or select the 'add new' button from the document explorer page -\n\n![](https://assets.terminusdb.com/docs/add-new-document.png)\n\nThe document editing frame is generated from the schema and this includes things like -\n\n*   Validation\n*   Localization\n*   Markdown\n*   Property types such as data, currency, and lists.\n\nThe editing interface can also include links to other documents and subdocuments and this is all specified in the schema. The example below is a test project working on the TerminusDB documentation and features links to other document types.\n\nA page for example can link to sections and a body so the same piece of content can be used in multiple locations. The schema can also specify that the linked document types unfolded so they display ready for editing within a piece of content -\n\n![Linking to other documents](https://assets.terminusdb.com/docs/linking-to-other-documents.png)\n\n![Unfolded documents ](https://assets.terminusdb.com/docs/unfolded-documents.png)\n\nFor details on how to specify markdown, unfolded, and other properties within the schema, please read the [schema reference guide](/docs/schema-reference-guide/).\n\n### Editing and Deleting Content & Data\n\nTo edit a document, select the document to edit by clicking on it from the document explorer. This will open up the document for editing.\n\nMake the changes and ensure to press select submit to ensure changes are saved.\n\n![How to edit documents in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/edit-documents.png)\n\nTo delete a document, select the red bin icon. A warning message will display to confirm the deletion."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Content & Data Curation - TerminusCMS Tour",
      "description": "Technical and non-technical users can curate content and data using the TerminusCMS dashboard",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "TerminusCMS document explorer",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "TerminusCMS document explorer"
        },
        "value": "https://assets.terminusdb.com/docs/document-explorer.png"
      },
      {
        "@type": "Media",
        "alt": "Document display",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Document display"
        },
        "value": "https://assets.terminusdb.com/docs/document-display.png"
      },
      {
        "@type": "Media",
        "alt": "GraphQL query generated from filter results",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphQL query generated from filter results"
        },
        "value": "https://assets.terminusdb.com/docs/document-view-graphql-query.png"
      },
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 4"
        },
        "value": "https://assets.terminusdb.com/docs/add-new-document.png"
      },
      {
        "@type": "Media",
        "alt": "Linking to other documents",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Linking to other documents"
        },
        "value": "https://assets.terminusdb.com/docs/linking-to-other-documents.png"
      },
      {
        "@type": "Media",
        "alt": "Unfolded documents ",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Unfolded documents "
        },
        "value": "https://assets.terminusdb.com/docs/unfolded-documents.png"
      },
      {
        "@type": "Media",
        "alt": "How to edit documents in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "How to edit documents in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/edit-documents.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Change Request Workflows in TerminusCMS"
    },
    "slug": "change-request-workflows-terminuscms-tour",
    "body": {
      "@type": "Body",
      "value": "TerminusCMS features change request workflows to ensure that changes to data and content are made safely with reviews in place to check changes.\n\n## Creating a Change Request\n\nWhen someone goes to make a change to content and data, TerminusCMS automatically opens a change request. This is a branch of the database that does not impact main. Users can make one or many changes within the change request -\n\n![Opening a change request](https://assets.terminusdb.com/docs/open-change-request.png)\n\n## In a Change Request\n\nUsers will see when they are in a change request. A banner with various options is included at the top of the page and there is also a notice on the left informing the user what they are connected to -\n\n![In a change request](https://assets.terminusdb.com/docs/in-change-request.png)\n\n> It is important to submit edits or additions in a change request. Without hitting the submit button, changes will not be saved to the change request.\n\nWhen in a change request a user has three options -\n\n1.  Continue to make edits, deletions, and additions to the change request.\n2.  Exit the change request - This leaves the change request open and available to come back to at a later stage.\n3.  Submit the change request for review.\n\n## Change Request Admin\n\nChange requests are managed from the change request screen.\n\n![TerminusCMS change request screen](https://assets.terminusdb.com/docs/change-request-screen.png)\n\nThe screen has four tabs -\n\n1.  Open - Open change requests that can be continued with or submitted for review.\n2.  Review - Change requests that have been submitted for review.\n3.  Merged - Previous approved commits to the database.\n4.  Rejected - Rejected change requests.\n\n## Review Change Requests\n\nOn the change request screen, select 'review'. Change requests that users have submitted for review are listed in chronological order.\n\n![Change Request diff viewer](https://assets.terminusdb.com/docs/cr-diff.png)\n\n_Change requests feature a diff viewer to see what's changed_\n\n![See messages in a change request for context](https://assets.terminusdb.com/docs/cr-review-messages.png)\n\n_Write messages to add more context_\n\n![List of change requests for review](https://assets.terminusdb.com/docs/cr-review-home.png)\n\n![Change request screen](https://assets.terminusdb.com/docs/cr-review-page.png)\n\nTo review a change request, do the following -\n\n*   Click the 'review' button for the corresponding change request.\n*   The next screen has all of the details of the change request with two tabs -\n\n*   The first is the diff view with drop-down options to display the changes that have been made\n*   The second is the messages tab, this displays the messages entered when creating and submitting the change request and can provide context.\n\n*   Users can either accept or reject a change request and leave a message explaining their reasoning behind each\n*   Accepted change requests will move the change request into the merged tab - users are able to view the diff to see the changes of past commits\n*   Rejected change requests move into the rejected tab on the change request home screen\n\n## Conflicts & Collaboration\n\nIn order to avoid changes being squashed by other users when multiple people make changes to data and content, TerminusCMS checks the database to see if there have been changes made before a user reviews and merges a change request.\n\nIn order to proceed. The user must rebase their change request to incorporate the latest changes into their own change request. A prompt tells the user what to do."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Change Request Workflows - TerminusCMS Tour",
      "description": "This page details how change request workflows function in TerminusCMS to enable safe collaboration",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Opening a change request",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Opening a change request"
        },
        "value": "https://assets.terminusdb.com/docs/open-change-request.png"
      },
      {
        "@type": "Media",
        "alt": "In a change request",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "In a change request"
        },
        "value": "https://assets.terminusdb.com/docs/in-change-request.png"
      },
      {
        "@type": "Media",
        "alt": "TerminusCMS change request screen",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "TerminusCMS change request screen"
        },
        "value": "https://assets.terminusdb.com/docs/change-request-screen.png"
      },
      {
        "@type": "Media",
        "alt": "Change Request diff viewer",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Change Request diff viewer"
        },
        "value": "https://assets.terminusdb.com/docs/cr-diff.png"
      },
      {
        "@type": "Media",
        "alt": "See messages in a change request for context",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "See messages in a change request for context"
        },
        "value": "https://assets.terminusdb.com/docs/cr-review-messages.png"
      },
      {
        "@type": "Media",
        "alt": "List of change requests for review",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "List of change requests for review"
        },
        "value": "https://assets.terminusdb.com/docs/cr-review-home.png"
      },
      {
        "@type": "Media",
        "alt": "Change request screen",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Change request screen"
        },
        "value": "https://assets.terminusdb.com/docs/cr-review-page.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "GraphQL & WOQL Query Tools"
    },
    "slug": "graphql-and-woql-query-terminuscms-tour",
    "body": {
      "@type": "Body",
      "value": "TerminusCMS features query panes for [GraphQL](/docs/graphql-basics/) and [WOQL](/docs/woql-basics/).\n\n## GraphQL Query Pane\n\n![GraphQL playground](https://assets.terminusdb.com/docs/graphql-playground.png)\n\nTerminusCMS includes GraphiQL to experiment and test queries. It automatically generates the GraphQL schema based on the project's schema.\n\nIt includes -\n\n*   List of root types within the project\n*   Autofill to aid query construction\n*   Pretty print\n*   Results panel\n*   Error reporting\n\nFor more details about the types of queries available with GraphQL, such as path queries, filters, and arguments, please refer to the [GraphQL reference guide](/docs/graphql-query-reference/).\n\n### WOQL Query Pane\n\n![Test out your WOQL queries in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/woql-playground.jpg)\n\nWeb Object Query Language ([WOQL](/docs/woql-explanation/)) is a powerful and sophisticated query language which allows you to concisely express complex patterns over arbitrary data structures.\n\nThe playground enables users to build WOQL queries to experiment and test. Users can also -\n\n*   Add, edit, and delete documents\n*   View query as JSON-LD format\n*   Copy the query\n*   See results\n*   Select query parameters based on the schema (left side of the screen)\n\nPlease see these other resources for understanding and using WOQL -\n\n*   [WOQL Basics](/docs/woql-basics/)\n*   [WOQL reference guide](/docs/woql-class-reference-guide/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "GraphQL & WOQL Query Tools - TerminusCMS Tour",
      "description": "An overview of the GraphQL and WOQL tools in the TerminusCMS dashboard",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "GraphQL playground",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphQL playground"
        },
        "value": "https://assets.terminusdb.com/docs/graphql-playground.png"
      },
      {
        "@type": "Media",
        "alt": "Test out your WOQL queries in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Test out your WOQL queries in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/woql-playground.jpg"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to connect to TerminusCMS"
    },
    "slug": "how-to-connect-terminuscms",
    "body": {
      "@type": "Body",
      "value": "Go to [https://dashboard.terminusdb.com](https://dashboard.terminusdb.com) to sign in to TerminusCMS. Register an account if you haven't already.\n\nIf you haven't selected a subscription yet, choose one. The subscription selection screen will only appear when you haven't done so already.\n\nClick on the **team** that you wish to use or create a new one. A default one will be already created for you. After selecting your team, click on your profile icon in the upper-right corner and click on `Profile`.\n\nIn this screen, you can create an API Token and view instructions for different clients. Give the token a description and click \"Generate New Token\". The token will appear on the screen. Be sure to save it somewhere safe, as the token gives access to your databases. For security reasons, we only display it once on this screen.\n\nChoose one of the code snippets. Which is either Python, JavaScript, or a cURL example.\n\n![Client examples](https://cdn.terminusdb.com/img/terminus-cms/client_api_connection.jpeg)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to connect with TerminusCMS",
      "description": "How to connect with TerminusCMS using an API key",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Client examples",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Client examples"
        },
        "value": "https://cdn.terminusdb.com/img/terminus-cms/client_api_connection.jpeg"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Get Started with TerminusDB"
    },
    "slug": "get-started-with-terminusdb",
    "body": {
      "@type": "Body",
      "value": "TerminusDB is an open-source document graph database with a collaboration model providing Git-like features. It stores documents as [JSON documents](/docs/documents-explanation/) and the schema language connects these into a [graph](/docs/graphs-explanation/). It comes with [GraphQL](/docs/graphql-query-reference/), User Interface, [CLI](/docs/terminusdb-cli-commands/), [JavaScript](/docs/use-the-javascript-client/), and [Python Clients](/docs/use-the-python-client/).\n\n### Starting overview\n\nGet started in minutes on Windows, macOS, or Linux with the steps below.\n\n#### Install\n\nInstall a TerminusDB server.\n\n#### Run\n\nStart a TerminusDB server.\n\n#### Go\n\nCreate, query, and maintain your databases using several [programmatic interfaces](#interfacesoverview).\n\n### Installation Overview\n\nInteraction with TerminusDB databases is through the TerminusBD Server. The server provides a **RESTful** API using the **JSON-LD** exchange format. This enables you to develop applications with your toolchain to utilize the powerful features of graph search and storage.\n\nTo install a TerminusDB server and use TerminusDB databases programmatically in your applications, the installation options below are available. Click on an option for detailed install instructions.\n\n#### Source code\n\nInstall from the [source code](/docs/install-terminusdb-from-source-code/) in [GitHub](https://github.com/terminusdb/terminusdb).\n\n#### Docker container\n\nInstall as a [Docker container](/docs/install-terminusdb-as-a-docker-container/) also referred to as the **TerminusDB bootstrap**.\n\n### GraphQL\n\nTerminusDB comes with GraphQL for more information visit the [GraphQL reference guide](/docs/graphql-query-reference/).\n\n### Javascript client\n\nInstall as a [Node.js](https://nodejs.org/en/download/)\\-based [JavaScript Client](/docs/install-terminusdb-js-client/).\n\n### Python client\n\nInstall as a [Python Client](/docs/install-the-python-client/). Also requires a [Docker container](/docs/install-terminusdb-as-a-docker-container/) installation.\n\n### Interfaces Overview\n\nTerminusDB provides several interfaces for creating, querying, and maintaining your databases. Depending on the component/s you choose to install, you can interact with TerminusDB using one or more of the available interfaces listed below.\n\nUse one or a combination of several TerminusDB interfaces.\n\n#### GraphQL\n\nTerminusDB automatically generates GraphQL schema to query data. Read the [GraphQL reference](/docs/graphql-query-reference/) guide for more information.\n\n#### Command Line Interface\n\nThe TerminusDB [Command Line Interface](/docs/terminusdb-cli-commands/) (CLI.)\n\n#### Dashboard\n\nThe TerminusDB [dashboard](https://dashboard.terminusdb.com) provides a visual interface.\n\n#### APIs\n\nThe TerminusDB [Javascript](/docs/use-the-javascript-client/) and [Python Client](/docs/use-the-python-client/) APIs.\n\n#### Query\n\nThe TerminusDB [Web Object Query Language](/docs/woql-explanation/) (WOQL.)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Get Started with TerminusDB",
      "description": " An overview of the ways to get started with TerminusDB.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusDB Installation Options"
    },
    "slug": "terminusdb-install-options",
    "body": {
      "@type": "Body",
      "value": "[Install on Kubernetes](/docs/install-on-kubernetes/)[Install as a Docker Container](/docs/install-terminusdb-as-a-docker-container/)[Install from Source Code](/docs/install-terminusdb-from-source-code/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB Installation Options",
      "description": "Choose how you'd like to install TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Install on Kubernetes"
    },
    "slug": "install-on-kubernetes",
    "body": {
      "@type": "Body",
      "value": "TerminusDB can also be deployed on Kubernetes. There are several strategies to do this. One is a high-availability solution using shared storage like NFS and one is a more simple strategy that is more performant on reads/writes by using one deployment at the cost of scalability. In this document, we will guide you on how to deploy using the latter strategy with a very minimal example.\n\n## Prerequisites\n\nWe assume that you have `minikube` set up locally or have a Kubernetes cluster set up somewhere else that you can reach through `kubectl`. Therefore, when you run `kubectl apply -f some_yaml_file.yaml` we assume that it will deploy on a cluster, locally or remotely on a cloud provider.\n\n## Creating a TerminusDB deployment\n\n```\napiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\nkind: Deployment\nmetadata:\n  name: terminusdb-server\nspec:\n  selector:\n    matchLabels:\n      app: terminusdb-server\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: terminusdb-server\n    spec:\n      terminationGracePeriodSeconds: 30\n      nodeSelector:\n        organization: terminusdb\n      containers:\n        - name: terminusdb-server\n          image: terminusdb/terminusdb-server:latest\n          tty: true\n          stdin: true\n          livenessProbe:\n            httpGet:\n              path: /api/ok\n              port: 6363\n            initialDelaySeconds: 30\n            periodSeconds: 180\n          ports:\n            - containerPort: 6363\n          envFrom:\n            - secretRef:\n                name: db-user-pass\n          env:\n            - name: TERMINUSDB_SERVER_PORT\n              value: \"6363\"\n            - name: TERMINUSDB_ENABLE_DASHBOARD\n              value: \"false\"\n            - name: TERMINUSDB_SERVER_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: TERMINUSDB_LOG_LEVEL\n              value: DEBUG\n            - name: TERMINUSDB_LOG_FORMAT\n              value: json\n            - name: TERMINUSDB_LRU_CACHE_SIZE\n              value: \"1200\"\n          volumeMounts:\n            - name: pvc-storage\n              mountPath: \"/app/terminusdb/storage\"\n      volumes:\n        - name: pvc-storage\n          persistentVolumeClaim:\n            claimName: pv-claim\n```\n\nSome interesting things to note in this example are that we set `TERMINUSDB_ENABLE_DASHBOARD` to false. If you are using TerminusDB in a Kubernetes deployment, you probably don’t want to expose the dashboard to other applications, unless you want your users to use the dashboard themselves. The `LOG_FORMAT` is set to `json` because this makes the logs easier to parse and search for in different cloud logging environments. We also inherit the ENV variables from a secret called `db-user-pass`. We assume that the environment variable `TERMINUSDB_ADMIN_PASS` is set to the appropriate password. If you are just playing around with this deployment, you could leave it out and it will default as `root`. But don’t do this for any application.\n\nThe livenessProbe will take every 180 seconds whether TerminusDB is still up by calling the `ok` endpoint. This is a lightweight endpoint that just returns 200 if the request succeeds.\n\nWe assume that a volume claim has been created for a specific cloud environment or for Minikube using the hostPath option.\n\n## Creating a service for the deployment\n\nIn order to make the deployment easily available for other Kubernetes applications, we have to create a service.\n\nThe service can look like this:\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: terminusdb-server\nspec:\n  selector:\n    app: terminusdb-server\n  ports:\n    - protocol: TCP\n      port: 6363\n      targetPort: 6363\n```\n\nIt will expose the TerminusDB server deployment on port 6363 with the DNS name http://terminusdb-server:6363. Any Kubernetes application in the same namespace will be able to access TerminusDB server this way.\n\n## Testing the deployment\n\nTo test whether the deployment is available, we will be using the port-forwarding features of `kubectl`. To expose the TerminusDB service to your local computer, run:\n\n`kubectl port-forward service/terminusdb-server 6363:6363`\n\nThis will expose TerminusDB locally on your computer on `localhost:6363`. You can see whether the deployment is successful by running `curl http://localhost:6363/api/info`. If the deployment is successful, it will return information about the version of TerminusDB running on the cluster. For instance:\n\n```\n{\"@type\":\"api:InfoResponse\", \"api:info\":\n{\"authority\":\"terminusdb://system/data/User/anonymous\", \"storage\": \n{\"version\":\"2\"}, \"terminusdb\": \n{\"git_hash\":\"19029acffcd25c9277451aa30ee0ff4c3029ae67\", \n\"version\":\"11.1.0\"}, \"terminusdb_store\": {\"version\":\"0.19.8\"}}, \n\"api:status\":\"api:success\"}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB on Kubernetes",
      "description": "Install TerminusDB on a Kubernetes cluster"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Install TerminusDB as a Docker Container"
    },
    "slug": "install-terminusdb-as-a-docker-container",
    "body": {
      "@type": "Body",
      "value": "> **Docker memory allocation on Windows**\\\\ On Windows, the default memory allocated for the Docker is **2GB**. TerminusDB is an in-memory database so it is advised to increase the allocation in Docker desktop settings. **Install TerminusDB on Windows with Docker Guide**\n> \n> For a comprehensive guide to installing on Windows, our friends at DFRNT put this blog together - [Run TerminusDB on Windows with Docker](https://dfrnt.com/blog/2023-02-25-run-terminusdb-on-windows-with-docker/)\n> \n> **Linux package manager**\\\\ On Linux, use your distro's package manager for containerized deployments or [find more information here](https://www.docker.com/products/container-runtime).\n\n## Install steps\n\nInstall and run the TerminusDB container with the following steps.\n\n*   [Clone the TerminusDB repo](#cloneterminusdb)\n*   [Run the container](#runthecontainer)\n*   [Use the console](#usetheconsole)\n\n### Clone TerminusDB\n\n`clone` the `terminusdb` repository and `cd` to it.\n\n```\ngit clone https://github.com/terminusdb/terminusdb\n```\n\n```\ncd terminusdb\n```\n\n### Run the container\n\nRun the container using `docker compose`.\n\n#### Running for the first time\n\nFirst, set up a `.env` in the cloned directory with the following contents:\n\n```\nOPENAI_KEY=YOUR_OPENAI_KEY_HERE\n# And optionally specify number of pages for the vector database\n# for instance\nBUFFER_AMOUNT=120000\n```\n\nThe OPENAI\\_KEY is not mandatory to use, but without it, the AI indexing will not work. Of course, all the document graph database functionality will still work as intended.\n\nRun the container with the command `docker compose up`. See [Environment configuration](#environmentconfiguration) for further configuration options.\n\n```\ndocker compose up\n```\n\nThis generates the message: `terminusdb-server container started http://127.0.0.1:6363/`. This is the TerminusDB Server and [Console](#usetheconsole) URL.\n\n#### Subsequent runs\n\n*   Remove previous volumes. Enter `y` to confirm removal when prompted.\n*   Rerun the container.\n\n> **Warning:** Removing previous volumes will erase local data.\n\n```\ndocker compose rm\ndocker compose run\n```\n\n### Use the console\n\nOpen the TerminusDB console in a web browser using the URL.\n\n```\nhttp://127.0.0.1:6363/dashboard\n```\n\n### Use the Dashboard\n\nThe TerminusDB local dashboard is included within TerminusDB. The dashboard is a UI to create and manage data products, model data, and test queries. To use the dashboard visit:\n\n```\nlocalhost:6363/dashboard/\n```\n\n### Use GraphQL\n\nTerminusDB hosts a GraphQL endpoint at:\n\n```\nSERVERNAME/api/graphql/ORG/DATAPRODUCT\n```\n\nFor instance, with a data product named `admin/people`, and a locally installed TerminusDB, you can query it at:\n\n```\nhttp://127.0.0.1:6363/api/graphql/admin/people\n```\n\nTerminusDB ships with a GraphiQL graphical GraphQL query interface and schema browser. This is a quick way to get acquainted with GraphQL in TerminusDB.\n\nYou can reach this browser at:\n\n```\nhttp://127.0.0.1:6363/api/graphiql/admin/people\n```\n\n## Environment configuration\n\nThe container uses a set of environment variables with default values. You can configure the environment by setting these variables. You can set additional ENV variables or override already set ones by creating a `.env` file.\n\n## Migrating from terminusdb-bootstrap\n\nIn order to migrate from the default terminusdb-bootstrap installation while stil keeping the data of your previous installation, run the docker compose commands the following way:\n\n```\ndocker compose -f docker-compose.yml -f distribution/docker-compose/bootstrap_storage.yaml\n```\n\nFor instance, for the `up` command to start the server, run:\n\n```\ndocker compose -f docker-compose.yml -f distribution/docker-compose/bootstrap_storage.yaml up\n```\n\n## Using the CLI\n\nTo access the TerminusDB CLI from the Docker Compose, run:\n\n```\ndocker compose run terminusdb-server ./terminusdb\n```\n\nOr use `exec` when you have the service already running\n\n## Server deployment\n\n> The TerminusDB server is deployed to your computer by default.\n\n### Local computer deployment\n\nBy default, the Docker container binds to IP `127.0.0.1`. This prevents insecure deployments and ensures the TerminusDB server is accessible on a local computer only.\n\n### Remote server deployment\n\nTo deploy the TerminusDB server to a remote machine:\n\n*   Enable HTTPS with a remote proxy like Nginx\n*   Don't use the `X-Forward-Header` ENV variables unless you really know what you are doing"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Install TerminusDB as a Docker Container",
      "description": "Everything you need to install and run TerminusDB server as a docker container on your computer or on a remote server",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Install TerminusDB from Source Code"
    },
    "slug": "install-terminusdb-from-source-code",
    "body": {
      "@type": "Body",
      "value": "## Install steps\n\nInstall, build and run TerminusDB from source code with the following steps.\n\n*   [Install SWI-Prolog](#installswiprolog)\n*   [Clone the TerminusDB repository](#clonetheterminusdbrepository)\n*   [Make the TerminusDB Command Line Interface](#maketheterminusdbcommandlineinterface)\n*   [Run the TerminusDB system database](#runtheterminusdbsystemdatabase)\n\n> **Install from source code on Windows:**  \n>   \n> Install [WSL](https://ubuntu.com/wsl) and [Ubuntu](https://ubuntu.com/#download)  \n>   \n> In Ubuntu terminal: `sudo apt install make libgmp-dev`  \n>   \n> In Ubuntu terminal: `curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh`  \n>   \n> Follow the install steps below for **Debian or Ubuntu**\n\n## Install SWI-Prolog, Rust and clang\n\n### Linux\n\nInstall [Rust](https://www.rust-lang.org/tools/install) by following the Rust installation guide.\n\n* * *\n\n**Arch Linux**\n\nInstall all dependencies of all the required libraries using [sudo](https://www.sudo.ws/download.html) and [git](https://git-scm.com/downloads).\n\n```\nsudo pacman -S git swi-prolog make automake autoconf libtool zlib pkgconf gcc clang gmp\n```\n\n* * *\n\n**Debian or Ubuntu**\n\nInstall using the apt package manager.\n\n```\ncat /etc/*release | grep ubuntu > /dev/null && (sudo apt-get install software-properties-common; sudo apt-add-repository ppa:swi-prolog/stable)\nsudo apt-get update\nsudo apt install swi-prolog clang libgmp-dev\n```\n\n* * *\n\n**Fedora or Red Hat**\n\nInstall using [sudo](https://www.sudo.ws/download.html).\n\n```\nsudo dnf install pl pl-devel clang gmp-devel\n```\n\n### macOS\n\nInstall `swi-prolog` and `rust` using [homebrew](https://brew.sh).\n\n```\nbrew install gmp\nbrew install swi-prolog\nbrew install rust\n```\n\n## Clone the TerminusDB repository\n\nIdentical for all operating systems: Clone the `terminusdb` repository from GitHub.\n\n```\ngit clone https://github.com/terminusdb/terminusdb\n```\n\n## Make the TerminusDB Command Line Interface\n\n`make` the `terminusdb` [Command Line Interface (CLI)](/docs/terminusdb-cli-commands/) binary.\n\n### Linux\n\n```\ncd terminusdb\nmake install-tus\nmake\nmake install-dashboard\n```\n\n### macOS\n\n```\ncd  terminusdb\nmake install-tus\nmake\nmake install-dashboard\n```\n\n## Run the TerminusDB system database\n\n### Linux\n\nInitialize the system database and choose a password for the admin user.\n\n*   Server starts on `http://127.0.0.1:6363`\n\n```\n./terminusdb store init --key \"my_password_here\"\n./terminusdb serve\n```\n\n### macOS\n\n*   Initialize the system database.\n*   Server starts on `http://127.0.0.1:6363`\n\n```\n./terminusdb store init --key root\n./terminusdb serve\n```\n\n## Further Reading\n\n[**The TerminusDB Command Line Interface**](/docs/terminusdb-cli-commands/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Install TerminusDB from Source Code",
      "description": "Everything you need to install TerminusDB from source code.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusDB CLI Commands"
    },
    "slug": "terminusdb-cli-commands",
    "body": {
      "@type": "Body",
      "value": "## SYNOPSIS\n\n`terminusdb [command subcommand positional_arguments] flags`\n\n## DESCRIPTION\n\nThe terminusdb(1) command line tool allows users to interact with a database, allowing common operations such as querying (and updating), database creation, data ingestion and maintainence.\n\n## COMMANDS\n\nterminusdb accepts a command, sometimes followed by a subcommand. The accepted commands are given here, along with their arguments.\n\n### help\n\n`terminusdb help`\n\nDisplay help regarding terminusdb.\n\n*   `-m`, `--markdown`\\=\\[value\\]: generate help as markdown\n\n### test\n\n`terminusdb test OPTIONS`\n\nRun internal TerminusDB tests.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for `test` command\n    \n*   `-t`, `--test`\\=\\[value\\]: Run a specific test\n    \n\n### serve\n\n`terminusdb serve OPTIONS`\n\nRun the TerminusDB server.\n\n*   `-h`, `--help`\\=\\[value\\]: Print help for `serve` command\n    \n*   `-i`, `--interactive`\\=\\[value\\]: Run server in interactive mode\n    \n*   `-m`, `--memory`\\=\\[value\\]: Run server in-memory, without a persistent store. Takes a password as an optional argument. The in-memory store will be initialized with an admin account with the given password. If absent, the admin account will have 'root' as a password.\n    \n\n### list\n\n`terminusdb list OPTIONS`\n\nList available databases. \\[DEPRECATED\\]\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `list` command\n    \n*   `-b`, `--branches`\\=\\[value\\]: also describe the available branches\n    \n*   `-j`, `--json`\\=\\[value\\]: Return a JSON as the result of the `list` command\n    \n\n### optimize\n\n`terminusdb optimize DB_SPEC OPTIONS`\n\nOptimize a database (including \\_system and \\_meta).\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `optimize` command\n    \n\n### query\n\n`terminusdb query DB_SPEC QUERY OPTIONS`\n\nQuery a database.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `query` command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-j`, `--json`\\=\\[value\\]: return results as a json object\n    \n\n### push\n\n`terminusdb push DB_SPEC`\n\nPush a branch.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `push` command\n    \n*   `-b`, `--branch`\\=\\[value\\]: set the origin branch for push\n    \n*   `-e`, `--remote-branch`\\=\\[value\\]: set the branch on the remote for push\n    \n*   `-r`, `--remote`\\=\\[value\\]: the name of the remote to use\n    \n*   `-x`, `--prefixes`\\=\\[value\\]: send prefixes for database\n    \n*   `-t`, `--token`\\=\\[value\\]: machine access token\n    \n*   `-u`, `--user`\\=\\[value\\]: the user on the remote\n    \n*   `-p`, `--password`\\=\\[value\\]: the password on the remote\n    \n\n### clone\n\n`terminusdb clone URI <DB_SPEC>`\n\nClone a database (into DB\\_SPEC).\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `clone` command\n    \n*   `-t`, `--token`\\=\\[value\\]: machine access token\n    \n*   `-u`, `--user`\\=\\[value\\]: the user on the remote\n    \n*   `-p`, `--password`\\=\\[value\\]: the password on the remote\n    \n*   `-o`, `--organization`\\=\\[value\\]: organizational owner of the cloned database\n    \n*   `-l`, `--label`\\=\\[value\\]: label to use for this database\n    \n*   `-r`, `--remote`\\=\\[value\\]: remote to use for this database\n    \n*   `-c`, `--comment`\\=\\[value\\]: long description of the cloned database\n    \n*   `-b`, `--public`\\=\\[value\\]: whether the cloned database is to be public\n    \n\n### pull\n\n`terminusdb pull BRANCH_SPEC`\n\nPull a branch from a database.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `pull` command\n    \n*   `-e`, `--remote-branch`\\=\\[value\\]: set the branch on the remote for pull\n    \n*   `-r`, `--remote`\\=\\[value\\]: the name of the remote to use\n    \n*   `-t`, `--token`\\=\\[value\\]: machine access token\n    \n*   `-u`, `--user`\\=\\[value\\]: the user on the remote\n    \n*   `-p`, `--password`\\=\\[value\\]: the password on the remote\n    \n\n### fetch\n\n`terminusdb fetch DB_SPEC`\n\nfetch data from a remote.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `fetch` command\n    \n*   `-r`, `--remote`\\=\\[value\\]: the name of the remote to use\n    \n*   `-t`, `--token`\\=\\[value\\]: machine access token\n    \n*   `-u`, `--user`\\=\\[value\\]: the user on the remote\n    \n*   `-p`, `--password`\\=\\[value\\]: the password on the remote\n    \n\n### rebase\n\n`terminusdb rebase TO_DATABASE_SPEC FROM_DATABASE_SPEC OPTIONS`\n\nRebase a database with commits from FROM_DATABASE_SPEC into TO_DATABASE_SPEC.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `rebase` command\n    \n*   `-a`, `--author`\\=\\[value\\]: The author of the rebase\n    \n\n### squash\n\n`terminusdb squash DATABASE_SPEC OPTIONS`\n\nSquash a commit.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `squash` command\n    \n*   `-j`, `--json`\\=\\[value\\]: output result status as JSON\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n\n### rollup\n\n`terminusdb rollup DATABASE_SPEC OPTIONS`\n\nCreates an optimisation layer for queries on the given commit.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `rollup` command\n    \n\n### bundle\n\n`terminusdb bundle DATABASE_SPEC OPTIONS`\n\nCreate a pack for a given DATABASE\\_SPEC that can then be reconsistuted with `terminusdb unbundle`.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `bundle` command\n    \n*   `-o`, `--output`\\=\\[value\\]: file name to use for pack output file (defaults to descriptor based name).\n    \n\n### unbundle\n\n`terminusdb unbundle DATABASE_SPEC FILE OPTIONS`\n\nUnbundle a bundle file.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `unbundle` command\n    \n\n### diff\n\n`terminusdb diff [Path] OPTIONS`\n\nCreate a diff between two JSONs, a JSON and a commit (path required), or two commits (path required).\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `diff` command\n    \n*   `-b`, `--before`\\=\\[value\\]: JSON document which is the _before_\n    \n*   `-a`, `--after`\\=\\[value\\]: JSON document which is the _after_\n    \n*   `-k`, `--keep`\\=\\[value\\]: Skeleton of the document to retain as context\n    \n*   `-c`, `--copy-value`, `--copy_value`\\=\\[value\\]: Maintain explit copies of diffs in lists\n    \n*   `-d`, `--docid`\\=\\[value\\]: document id to use for comparisons\n    \n*   `-p`, `--before_commit`, `--before-commit`\\=\\[value\\]: Commit or branch of the _before_ document(s)\n    \n*   `-s`, `--after_commit`, `--after-commit`\\=\\[value\\]: Commit or branch of the _after_ document(s)\n    \n*   `-n`, `--start`\\=\\[value\\]: How many diff results to skip before returning (ignored if not comparing resources)\n    \n*   `-l`, `--count`\\=\\[value\\]: Number of results to return (ignored if not comparing resources)\n    \n\n### apply\n\n`terminusdb apply [Path] OPTIONS`\n\nApply a diff to path which is obtained from the differences between two commits\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `apply` command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-k`, `--keep`\\=\\[value\\]: Skeleton of the document to retain as context\n    \n*   `-t`, `--type`\\=\\[value\\]: Variety of commit to create on apply (currently only squash)\n    \n*   `-f`, `--match-final-state`, `--match_final_state`\\=\\[value\\]: Allow conflicting patch to apply if patch would yield the same final state\n    \n*   `-p`, `--before_commit`, `--before-commit`\\=\\[value\\]: Commit of the _before_ document(s)\n    \n*   `-s`, `--after_commit`, `--after-commit`\\=\\[value\\]: Commit of the _after_ document(s)\n    \n\n### log\n\n`terminusdb log DB_SPEC`\n\nGet the log for a branch given by DB\\_SPEC.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `log` command\n    \n*   `-j`, `--json`\\=\\[value\\]: return log as JSON\n    \n*   `-s`, `--start`\\=\\[value\\]: How far back in commit log to start giving results\n    \n*   `-c`, `--count`\\=\\[value\\]: Number of results to return\n    \n*   `-v`, `--verbose`\\=\\[value\\]: Give back additional information on commits\n    \n\n### history\n\n`terminusdb history DB_SPEC`\n\nGet the history for a given document by id in DB\\_SPEC.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `history` command\n    \n*   `-i`, `--id`\\=\\[value\\]: The id of the document to provide history for\n    \n*   `-j`, `--json`\\=\\[value\\]: return history as JSON\n    \n*   `-s`, `--start`\\=\\[value\\]: How far back in commit history to start giving results\n    \n*   `-k`, `--created`\\=\\[value\\]: return time of creation (does not report all history)\n    \n*   `-u`, `--updated`\\=\\[value\\]: return time of last update (does not report all history)\n    \n*   `-c`, `--count`\\=\\[value\\]: Number of results to return\n    \n*   `-v`, `--verbose`\\=\\[value\\]: give back schema update information\n    \n\n### reset\n\n`terminusdb reset BRANCH_SPEC COMMIT_OR_COMMIT_SPEC`\n\nReset the branch at BRANCH_SPEC to the COMMIT_OR_COMMIT_SPEC\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `reset` command\n    \n\n### migration\n\n`terminusdb migration BRANCH_SPEC`\n\nReset the branch at BRANCH_SPEC to the COMMIT_OR_COMMIT_SPEC\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `migration` command\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-o`, `--operations`\\=\\[value\\]: operations to perform on the schema\n    \n*   `-t`, `--target`\\=\\[value\\]: resource with a schema as migration target\n    \n*   `-v`, `--verbose`\\=\\[value\\]: give back schema update information\n    \n*   `-d`, `--dry_run`\\=\\[value\\]: provide information about what would occur if the operations were performed\n    \n\n### concat\n\n`terminusdb concat DB_SPEC`\n\nConcatenate any number of space-separated COMMIT_SPEC or BRANCH_SPEC (provided they are base layers only) passed on standard-input into a commit on DB\\_SPEC\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `concat` command\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-j`, `--json`\\=\\[value\\]: Return a JSON readable commit identifier\n    \n\n### branch create\n\n`terminusdb branch create BRANCH_SPEC OPTIONS`\n\nCreate a branch.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `branch create` sub command\n    \n*   `-o`, `--origin`\\=\\[value\\]: the origin branch to use (false for none)\n    \n\n### branch delete\n\n`terminusdb branch delete BRANCH_SPEC OPTIONS`\n\nDelete a branch.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `branch delete` sub command\n    \n\n### db list\n\n`terminusdb list DB_SPEC [.. DB_SPECN] OPTIONS`\n\nList available databases.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `list` command\n    \n*   `-b`, `--branches`\\=\\[value\\]: also describe the available branches\n    \n*   `-v`, `--verbose`\\=\\[value\\]: return lots of metadata\n    \n*   `-j`, `--json`\\=\\[value\\]: Return a JSON as the result of the `list` command\n    \n\n### db create\n\n`terminusdb db create DATABASE_SPEC OPTIONS`\n\nCreate a database.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `db create` sub command\n    \n*   `-o`, `--organization`\\=\\[value\\]: organizational owner of the database\n    \n*   `-l`, `--label`\\=\\[value\\]: label to use for this database\n    \n*   `-c`, `--comment`\\=\\[value\\]: long description of this database\n    \n*   `-p`, `--public`\\=\\[value\\]: whether this database is to be public\n    \n*   `-k`, `--schema`\\=\\[value\\]: whether to use a schema\n    \n*   `-d`, `--data_prefix`, `--data-prefix`\\=\\[value\\]: uri prefix to use for data\n    \n*   `-s`, `--schema_prefix`, `--schema-prefix`\\=\\[value\\]: uri prefix to use for schema\n    \n*   `-x`, `--prefixes`\\=\\[value\\]: additional defined prefixes in JSON\n    \n\n### db delete\n\n`terminusdb db delete DATABASE_SPEC OPTIONS`\n\nDelete a database.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `db delete` sub command\n    \n*   `-o`, `--organization`\\=\\[value\\]: organizational owner of the database\n    \n*   `-f`, `--force`\\=\\[value\\]: force the deletion of the database (unsafe)\n    \n\n### db update\n\n`terminusdb db update DATABASE_SPEC OPTIONS`\n\nUpdate a database setting the OPTIONS in an existing database.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `db update` sub command\n    \n*   `-l`, `--label`\\=\\[value\\]: label to use for this database\n    \n*   `-c`, `--comment`\\=\\[value\\]: long description of this database\n    \n*   `-p`, `--public`\\=\\[value\\]: whether this database is to be public\n    \n*   `-k`, `--schema`\\=\\[value\\]: whether to use a schema\n    \n*   `-x`, `--prefixes`\\=\\[value\\]: Explicitly defined prefix set (in JSON)\n    \n\n### doc insert\n\n`terminusdb doc insert DATABASE_SPEC OPTIONS`\n\nInsert documents.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `doc insert` sub command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-g`, `--graph_type`, `--graph-type`\\=\\[value\\]: graph type (instance or schema)\n    \n*   `-r`, `--require-migration`\\=\\[value\\]: require an inferred migration (assuming this is a schema change)\n    \n*   `-x`, `--allow-destructive-migration`\\=\\[value\\]: allow inferred migration to be destructive (assuming this is a schema change)\n    \n*   `-d`, `--data`\\=\\[value\\]: document data\n    \n*   `-j`, `--raw_json`, `--raw-json`\\=\\[value\\]: inserts as raw json\n    \n*   `-f`, `--full_replace`, `--full-replace`\\=\\[value\\]: delete all previous documents and substitute these\n    \n\n### doc delete\n\n`terminusdb doc delete DATABASE_SPEC OPTIONS`\n\nDelete documents.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `doc delete` sub command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-g`, `--graph_type`, `--graph-type`\\=\\[value\\]: graph type (instance or schema)\n    \n*   `-r`, `--require-migration`\\=\\[value\\]: require an inferred migration (assuming this is a schema change)\n    \n*   `-x`, `--allow-destructive-migration`\\=\\[value\\]: allow inferred migration to be destructive (assuming this is a schema change)\n    \n*   `-i`, `--id`\\=\\[value\\]: document id to delete\n    \n*   `-d`, `--data`\\=\\[value\\]: document data\n    \n*   `-n`, `--nuke`\\=\\[value\\]: nuke all documents\n    \n\n### doc replace\n\n`terminusdb doc replace DATABASE_SPEC OPTIONS`\n\nReplace documents.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `doc replace` sub command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-g`, `--graph_type`, `--graph-type`\\=\\[value\\]: graph type (instance or schema)\n    \n*   `-r`, `--require-migration`\\=\\[value\\]: require an inferred migration (assuming this is a schema change)\n    \n*   `-x`, `--allow-destructive-migration`\\=\\[value\\]: allow inferred migration to be destructive (assuming this is a schema change)\n    \n*   `-d`, `--data`\\=\\[value\\]: document data\n    \n*   `-j`, `--raw_json`, `--raw-json`\\=\\[value\\]: replace as raw json\n    \n*   `-c`, `--create`\\=\\[value\\]: create document if it does not exist\n    \n\n### doc get\n\n`terminusdb doc get DATABASE_SPEC OPTIONS`\n\nQuery documents.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `doc get` sub command\n    \n*   `-g`, `--graph_type`, `--graph-type`\\=\\[value\\]: graph type (instance or schema)\n    \n*   `-s`, `--skip`\\=\\[value\\]: number of documents to skip\n    \n*   `-c`, `--count`\\=\\[value\\]: number of documents to return\n    \n*   `-m`, `--minimized`\\=\\[value\\]: return minimized prefixes\n    \n*   `-l`, `--as_list`, `--as-list`\\=\\[value\\]: return results as a JSON list (as opposed to JSON-lines)\n    \n*   `-u`, `--unfold`\\=\\[value\\]: include subdocuments, or only subdocument ids\n    \n*   `-i`, `--id`\\=\\[value\\]: id of document to retrieve\n    \n*   `-t`, `--type`\\=\\[value\\]: type of document to retrieve\n    \n*   `-z`, `--compress_ids`, `--compress-ids`\\=\\[value\\]: return compressed / minimized ids using default prefixes\n    \n*   `-q`, `--query`\\=\\[value\\]: document query search template\n    \n\n### role create\n\n`terminusdb role create ROLE_NAME ACTION_1 .. ACTION_N OPTIONS`\n\nCreate a new role with the listed actions. Actions may be any of: \"create_database\", \"delete_database\", \"class_frame\", \"clone\", \"fetch\", \"push\", \"branch\", \"rebase\", \"instance_read_access\", \"instance_write_access\", \"schema_read_access\", \"schema_write_access\", \"meta_read_access\", \"meta_write_access\", \"commit_read_access\", \"commit_write_access\", \"manage_capabilities\"\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `role create` sub command\n    \n\n### role delete\n\n`terminusdb role create ROLE_ID_OR_ROLE_NAME`\n\nDelete a role from the system database\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `role delete` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as a role Id rather than a name.\n    \n\n### role update\n\n`terminusdb role update ROLE_ID_OR_ROLE_NAME ACTIONS OPTIONS`\n\nUpdate a role from the system database\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `role update` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as a role Id rather than a name.\n    \n\n### role get\n\n`terminusdb role get <ROLE_ID_OR_ROLE_NAME>`\n\nGet a role description from name or id, or all roles if unspecified.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `role get` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as a role id rather than a name.\n    \n*   `-j`, `--json`\\=\\[value\\]: Return answer as a JSON document\n    \n\n### organization create\n\n`terminusdb organization create ORGANIZATION_NAME`\n\nCreate an organization with a given name.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `organization create` sub command\n    \n\n### organization delete\n\n`terminusdb organization delete ORGANIZATION_NAME_OR_ID`\n\nCreate an organization with a given name or id.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `organization delete` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as an organization id rather than a name.\n    \n\n### organization get\n\n`terminusdb organization get <ORGANIZATION_NAME_OR_ID>`\n\nGet an organization from its name or id, or list all if unspecified.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `organization get` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as an organization id rather than a name.\n    \n*   `-j`, `--json`\\=\\[value\\]: Return answer as a JSON document\n    \n\n### user create\n\n`terminusdb user create USER`\n\nCreate a user with a given name USER\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `user create` sub command\n    \n*   `-p`, `--password`\\=\\[value\\]: Specify the password to use for the user\n    \n\n### user delete\n\n`terminusdb organization delete USER`\n\nDelete a user with a given name or ID.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `user delete` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as an organization id rather than a name.\n    \n\n### user get\n\n`terminusdb user get <USER_NAME_OR_ID>`\n\nGet a user from its name or id, or list all if unspecified.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `organization get` sub command\n    \n*   `-i`, `--id`\\=\\[value\\]: Interpret argument as an organization id rather than a name.\n    \n*   `-c`, `--capability`\\=\\[value\\]: Report on all capabilities of this user.\n    \n*   `-j`, `--json`\\=\\[value\\]: Return answer as a JSON document\n    \n\n### user password\n\n`terminusdb user password USER`\n\nChange password for user USER\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `user create` sub command\n    \n*   `-p`, `--password`\\=\\[value\\]: Specify the password to use for the user\n    \n\n### capability grant\n\n`terminusdb capability grant USER SCOPE ROLE1 <...ROLEN>`\n\nGrant ROLE1 … ROLEN over SCOPE to USER\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `store init` sub command\n    \n*   `-s`, `--scope_type`, `--scope-type`\\=\\[value\\]: Should the scope be interpreted as a `database` (default) or an `organization`. If `ids` is specified then the parameters are assumed to be ids rather than names.\n    \n\n### capability revoke\n\n`terminusdb capability revoke USER SCOPE ROLE1 <...ROLEN>`\n\nRevoke ROLE1 … ROLEN over SCOPE from USER\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `store init` sub command\n    \n*   `-s`, `--scope_type`, `--scope-type`\\=\\[value\\]: Should the scope be interpreted as a `database` (default) or an `organization`. If `ids` is specified then the parameters are assumed to be ids rather than names.\n    \n\n### store init\n\n`terminusdb store init OPTIONS`\n\nInitialize a store for TerminusDB.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `store init` sub command\n    \n*   `-k`, `--key`\\=\\[value\\]: key to use for admin login\n    \n*   `-f`, `--force`\\=\\[value\\]: force the creation of a new store even when one already exists\n    \n\n### triples dump\n\n`terminusdb triples dump GRAPH_SPEC`\n\nDump an RDF string.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `triples dump` sub command\n    \n*   `-f`, `--format`\\=\\[value\\]: format of RDF (can be one of: \\[turtle\\])\n    \n\n### triples update\n\n`terminusdb triples update GRAPH_SPEC FILE`\n\nUpdate from an RDF file (replaces current content).\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `triples update` sub command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-f`, `--format`\\=\\[value\\]: format of RDF (can be one of: \\[turtle\\])\n    \n\n### triples load\n\n`terminusdb triples load GRAPH_SPEC FILE`\n\nLoad triples from RDF file (Appending new).\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `triples load` sub command\n    \n*   `-m`, `--message`\\=\\[value\\]: message to associate with the commit\n    \n*   `-a`, `--author`\\=\\[value\\]: author to place on the commit\n    \n*   `-f`, `--format`\\=\\[value\\]: format of RDF (can be one of: \\[turtle\\])\n    \n\n### remote add\n\n`terminusdb remote add DATABASE_SPEC REMOTE_NAME REMOTE_LOCATION OPTIONS`\n\nAdd a remote.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `remote add` sub command\n    \n\n### remote remove\n\n`terminusdb remote remove DATABASE_SPEC REMOTE_NAME OPTIONS`\n\nRemove a remote.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `remote remove` sub command\n    \n\n### remote set-url\n\n`terminusdb remote set-url DATABASE_SPEC REMOTE_NAME REMOTE_LOCATION OPTIONS`\n\nSet the URL of a remote.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `remote set-url` sub command\n    \n\n### remote get-url\n\n`terminusdb remote get-url DATABASE_SPEC REMOTE_NAME OPTIONS`\n\nGet the URL of a remote.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `remote get-url` sub command\n    \n*   `-r`, `--remote`\\=\\[value\\]: the name of the remote to use\n    \n\n### remote list\n\n`terminusdb remote list DATABASE_SPEC OPTIONS`\n\nList remotes.\n\n*   `--impersonate`\\=\\[value\\]: impersonate a particular user\n    \n*   `-h`, `--help`\\=\\[value\\]: print help for the `remote list` sub command\n    \n\n## SYNTAX\n\nThe designation of databases, repositories, the associated commit graph of a database, and various graphs as used in the above command requires the use of an appropriate descriptor path which is referred to as the DB\\_SPEC.\n\n*   `_system`: This is the system meta-data, which contains the user information, organization information and database records.\n    \n*   `<organization>/<database>`: This is the most basic descriptor path and actually refers to the more specific default path `<organization>/<database>/local/branch/main`.\n    \n*   `<organization>/<database>/_meta`: This is the repository graph associated with `database`. It contains information about the local repository and all known remotes.\n    \n*   `<organization>/<database>/<repository>`: This is a longer form database designator which specifies which respository we would like to address. It refers implicitly to `<organization>/<database>/<repository>/branch/main`.\n    \n*   `<organization>/<database>/<repository>/_commits`: The commit graph associated with a given database. This graph contains metadata about branch histories with their commit objects including the authorship and time.\n    \n*   `<organization>/<database>/<repository>/branch/<branch>`: The most specific branch descriptor, allows you to address a branch other than main.\n    \n*   `<organization>/<database>/<repository>/commit/<commit>`: The descriptor which allows an individual commit to be addressed directly.\n    \n\nFor commands that refer to a GRAPH_SPEC, it should be a DB_SPEC (specifying the precise branch if a database) followed by one of:\n\n*   `DB_SPEC/instance`\n    \n*   `DB_SPEC/schema`\n    \n\nFor example:\n\n`terminusdb triples dump admin/people/local/branch/main/schema`\n\n## ENVIRONMENT\n\n*   `TERMINUSDB_SERVER_NAME`: Set the servername to use for`terminusdb serve`. Default is `127.0.0.1`.\n    \n*   `TERMINUSDB_SERVER_PORT`: Set the port to use for`terminusdb serve`. Default is `6363`.\n    \n*   `TERMINUSDB_SERVER_WORKERS`: Set the number of worker threads to use for `terminusdb serve`. Default is `8`.\n    \n*   `TERMINUSDB_SERVER_MAX_TRANSACTION_RETRIES`: Set the transaction retry count. Default is `3`.\n    \n*   `TERMINUSDB_SERVER_DB_PATH`: Set the location of the storage volume to be used by `terminusdb` operations. Can be addressed relative to current path using `./`. Default is `./storage/db`.\n    \n*   `TERMINUSDB_SERVER_JWT_PUBLIC_KEY_PATH`: Set the public key path for JWT. Default is `''`.\n    \n*   `TERMINUSDB_SERVER_JWT_PUBLIC_KEY_ID`: Set the public key identifier for JWT. Default is `''`.\n    \n*   `TERMINUSDB_CONSOLE_BASE_URL`: Set the console javascript load URL. Default is `https://cdn.terminusdb.com/js_libs/terminusdb_console/dev`.\n    \n*   `TERMINUSDB_AUTOLOGIN_ENABLED`: If `true` then attempt to login automatically with default password. Default is `true`.\n    \n*   `TERMINUSDB_SERVER_PACK_DIR`: Location of the prolog pack directory if loading third party modules.\n    \n*   `TERMINUSDB_SERVER_TMP_PATH`: Path to use for temporary files.\n    \n*   `TERMINUSDB_IGNORE_REF_AND_REPO_SCHEMA`: Assume that ref and repo operations are inherently correct.\n    \n\n## EXIT STATUS\n\n*   0: Successfully program execution. Associated with `api:success`.\n    \n*   1: A generic failure of the API to carry out the operation. Associated with `api:failure`.\n    \n*   2: The resource which was being requested was not found. Associated with `api:not_found`.\n    \n*   13: The user attempted to carry out an operation without appropriately authorizing or without permission. Associated with `api:unauthorized` or `api:forbidden`.\n    \n*   13: Unauthorized access attempted. Associated with `api:unauthorized`.\n    \n*   126: An api command was attempted which is not possible. Associated with `api:method_not_allowed`.\n    \n*   131: Internal server error. Associated with `api:server_error`.\n    \n\n## EXAMPLES\n\n*   `terminusdb db create admin/foo`: Create a database in the organization `admin` with the identifier `foo`.\n    \n*   `terminusdb db create admin/foo --label=\"Foo\"`: Create a database in the organization `admin` with the identifier `foo` and name `Foo`.\n    \n\n## COPYRIGHT\n\nCopyright 2021 TerminusDB\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n## AUTHORS\n\nGavin Mendel-Gleason [gavin@terminusdb.com](mailto:gavin@terminusdb.com)\n\nMatthijs van Otterdijk [matthijs@terminusdb.com](mailto:matthijs@terminusdb.com)\n\nRobin de Rooij [robin@terminusdb.com](mailto:robin@terminusdb.com)\n\nAnne Ogborn [anne@swi-prolog.org](mailto:anne@swi-prolog.org)\n\nDmytri Kleiner [dk@terminusdb.com](mailto:dk@terminusdb.com)\n\n[Paulo Moura](https://github.com/pmoura)\n\nSean Leather [sean@terminusdb.com](mailto:sean@terminusdb.com)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB CLI Commands",
      "description": "A list of the TerminusDB command line interface commands.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Clone a Demo Project"
    },
    "slug": "clone-a-demo-terminuscms-project",
    "body": {
      "@type": "Body",
      "value": "You can clone a demo database by logging in to TerminusCMS and selecting a Team. Once selected you will see a \"Create New Data Product\" or a number of possible data sets to clone. To clone the data set, just click on the card, and it will clone it into your currently selected team.\n\nThis clone is now yours to use. It shares data with the original, so cloning is fast even if the data set is very large. When you make edits, they will be private to you, but it will be indistinguishable to you from editing the main database.\n\nTo get started with a demo dataset you can choose any of:\n\n*   Star Wars\n*   Lego\n*   Nuclear\n*   CAMS (Critical Asset Management System)\n\n![clone a demo project to get started with TerminusCMS](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to clone a TerminusCMS demo project",
      "description": "A guide to show how to clone TerminusCMS demo projects to explore and play with. ",
      "og_image": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "clone a demo project to get started with TerminusCMS",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "clone a demo project to get started with TerminusCMS"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use the Clients"
    },
    "slug": "use-the-clients",
    "body": {
      "@type": "Body",
      "value": "[Use the JS Client](/docs/use-the-javascript-client/)[Use the Python Client](/docs/use-the-python-client/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Use the Clients with TerminusCMS and TerminusDB",
      "description": "How to guides to use the JavaScrip and Python Clients with TerminusCMS and TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use the JavaScript Client"
    },
    "slug": "use-the-javascript-client",
    "body": {
      "@type": "Body",
      "value": "[Install JS Client](/docs/install-terminusdb-js-client/)[Connect to JS Client](/docs/connect-with-the-javascript-client/)[Create DB with JS](/docs/create-a-database/)[Connect to DB with JS](/docs/connect-to-a-database/)[Add a Schema with JS](/docs/add-a-schema/)[Add Doc with JS](/docs/add-a-document/)[Edit Docs with JS](/docs/edit-a-document/)[Delete Docs with JS](/docs/delete-a-document/)[Get Docs with JS](/docs/get-documents/)[Query Docs with JS](/docs/query-documents/)[Run WOQL Query](/docs/run-woql-query/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Use the JavaScript Client",
      "description": "Bite sized how to guides to get you up and running with the JavaScript Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Install the TerminusDB JavaScript Client"
    },
    "slug": "install-terminusdb-js-client",
    "body": {
      "@type": "Body",
      "value": "## Requirements\n\nNode.js version 10+ if using the TerminusDB client library as a Node.js package\n\n## Installation\n\nThe TerminusDB JavaScript client library can be used either as a Node.js package or as a script that runs in the browser.\n\n### NPM Package\n\n> If you don't already have Node.js installed, install it first. [node-install](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)\n\nTo install the `terminusdb-client` package as a dependency in an existing package, run:\n\n```\n$ npm install --save @terminusdb/terminusdb-client\n```\n\nThis command updates your `package.json`.\n\n### Script\n\nTo use the `terminusdb-client` script on a webpage sourced from a CDN, add this to your HTML:\n\n```\n<script src=\"https://unpkg.com/@terminusdb/terminusdb-client/dist/terminusdb-client.min.js\"></script>\n```\n\nAlternatively, you can download the latest [`terminusdb-client.min.js`](https://unpkg.com/@terminusdb/terminusdb-client/dist/terminusdb-client.min.js), add it to your sources, and use that in the `<script>` instead."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Install the TerminusDB JavaScript Client",
      "description": "Installation instruction for the TerminusDB JavaScript Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Connect with the JavaScript Client"
    },
    "slug": "connect-with-the-javascript-client",
    "body": {
      "@type": "Body",
      "value": "Ensure you have installed the JavaScript Client. See here for [installation instructions](/docs/install-terminusdb-js-client/)\n\n## Connecting with the JavaScript Client\n\nDepending on whether you are connecting to an instance you have set up yourself, or whether you are using TerminusCMS in the cloud, there are two different methods of connection.\n\nIn both cases, you should load the TerminusDB client in your script with the following:\n\n```javascript\nconst TerminusClient = require(\"@terminusdb/terminusdb-client\");\n```\n\n## TerminusCMS\n\nThe TerminusCMS endpoint has the form https://cloud.terminusdb.com/TEAM/ where TEAM is the name of the team you are using in TerminusCMS for the data products you want to access.\n\nIn order to connect to this team, you will need to [get your API key](/docs/how-to-connect-terminuscms/) after selecting the team you want to use.\n\nTo create a client use the following code within your script, ensuring to use your credentials.\n\n```javascript\nconst client = new TerminusClient.WOQLClient('https://cloud.terminusdb.com/Team',\n                     {user:\"myemail@something.com\", organization:'Team'})\n​\nclient.setApiKey(MY_ACCESS_TOKEN)\n```\n\n## Connecting to a TerminusDB installation\n\nWhether you are connecting to a local docker, a local server, or a server that you've set up somewhere, you can use the following to log in to TerminusDB.\n\n```javascript\nconst client = new TerminusClient.WOQLClient(SERVER_URL,{user:\"admin\",key:\"myKey\"})\n\nasync function getSchema() {\n     client.db(\"DB_NAME\")\n     const schema = await client.getSchema()\n}\n```\n\n> Try out the [Getting Started with the TerminusDB JavaScript Client](https://github.com/terminusdb/terminusdb-tutorials/blob/main/getting_started/javascript-client/lesson_1.md) five-part tutorial to get to grips with it."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Connect with the JavaScript Client",
      "description": "A guide to show how to connect to TerminusDB and TerminusCMS using the JavaScript Client",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-connect-with-js-client.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Create a Database"
    },
    "slug": "create-a-database",
    "body": {
      "@type": "Body",
      "value": "To create a database with an already [connected client](/docs/connect-with-the-javascript-client/), you can write:\n\n```javascript\nconst createNewDB = async () => {\n  try {\n​\n      await client.createDatabase('ExampleDatabase', {\n          label: \"ExampleDatabase\",\n          comment: \"Created new ExampleDatabase\",\n          schema: true\n      });\n​\n      console.log(\"Database created Successfully!\")\n​\n  } catch (err) {\n      console.error(err)\n  }\n};\n​\n```\n\nAfter the database is created the client will be connected to it.\n\n> Try out the [Getting Started with the TerminusDB JavaScript Client](https://github.com/terminusdb/terminusdb-tutorials/blob/main/getting_started/javascript-client/lesson_1.md) five-part tutorial to get to grips with it."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Create a Database using the JavaScript Client",
      "description": "A guide to show how to create a database using the TerminusDB JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-create-a-db.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Connect to a Database"
    },
    "slug": "connect-to-a-database",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the JavaScript Client](/docs/connect-with-the-javascript-client/), connecting to a database is the same for TerminusDB and TerminusCMS -\n\nThe example code below registers your database in woqlClient parameters and then all your calls will be made to this db -\n\n```\nclient.db('ExampleDatabase')\nclient.getSchema().then(result=>{\n    console.log(result)\n})\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Connect to a Database using the JavaScript Client",
      "description": "A guide to show how to connect to an existing database using the TerminusDB JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-connect.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Add a Schema"
    },
    "slug": "add-a-schema",
    "body": {
      "@type": "Body",
      "value": "After you have imported the terminusdb\\_client, [created a client](/docs/connect-with-the-javascript-client/), and [connected to a database](/docs/connect-to-a-database/) you can create a schema.\n\n## Create a schema\n\nYou can create a JSON schema, in this example, we'll create a schema with one object called Player with two properties name and position with the name forming the lexical key:\n\n```javascript\nconst schema = { \"@type\" : \"Class\",\n                 \"@id\"   : \"Player\",\n                 \"@key\"  : { \"@type\": \"Lexical\", \"@fields\": [\"name\"] },\n                 name    : \"xsd:string\",\n                 position: \"xsd:string\" };\n```\n\n## Add the schema\n\nAdd the schema object with:\n\n```javascript\nconst addSchema = async () => {\n  const result = await client.addDocument(schema,  { graph_type: \"schema\" });\n  console.log(\"the schema has been created\", result)\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Add a Schema using the JavaScript Client",
      "description": "A guide to show how to add a schema to TerminusDB and TerminusCMS using the TerminusDB JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-add-a-schema.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Add Documents"
    },
    "slug": "add-a-document",
    "body": {
      "@type": "Body",
      "value": "After you have imported the terminusdb\\_client, [created a client](/docs/connect-with-the-javascript-client/), [connected to a database](/docs/connect-to-a-database/), and [added a schema](/docs/add-a-schema/), you can then use this client to insert a document that conforms to the schema.\n\n## Insert documents\n\nAdd documents to the schema using addDocument:\n\n```javascript\nconst objects = [\n    {\n        \"@type\" : \"Player\",\n        name    : \"George\",\n        position: \"Center Back\",\n    },\n    {\n        \"@type\" : \"Player\",\n        name    : \"Doug\",\n        position: \"Full Back\",\n    },\n    { \n        \"@type\" : \"Player\", \n        name    : \"Karen\", \n        position: \"Center Forward\" \n    }\n];\n\nconst addDocs = async () => {\n  const result = await client.addDocument(objects);\n  console.log(\"the documents have been added\", result)\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Add Documents using the JavaScript Client",
      "description": "A guide to show how to add documents to TerminusDB and TerminusCMS using the JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-add-documents.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Edit a Document with the JavaScript Client"
    },
    "slug": "edit-a-document",
    "body": {
      "@type": "Body",
      "value": "To update documents in your database, you first need to [get the document](/docs/get-documents/) you want to change. You then need to make your changes and update it. This example shows how -\n\n```javascript\nconst docs = {\n    '@id'   : 'Player/George',\n    '@type' : 'Player',\n    name    : 'George',\n    position: 'Center Back' \n  }\n\ndocs.position = \"Full Back\"\n\nconst updateDocs = async () => {\n  const result = await client.updateDocument(docs);\n  console.log(\"updated document\", result)\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Edit a Document using the JavaScript Client",
      "description": "A guide to show how to update a document in TerminusDB and TerminusCMS using the JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-edit-a-document.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Delete a Document"
    },
    "slug": "delete-a-document",
    "body": {
      "@type": "Body",
      "value": "In order to delete a document you need to know the document id.\n\n```javascript\nconst deleteDoc = async () => {\n  const docId = \"Player/George\"\n  await client.deleteDoc({id:docId});\n  console.log(`the ${docId} has been deleted`)\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Delete a Document using the JavaScript Client",
      "description": "A guide to show how to delete a document in TerminusDB and TerminusCMS using the JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-delete-a-document.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Get Documents"
    },
    "slug": "get-documents",
    "body": {
      "@type": "Body",
      "value": "## Get a single document\n\nTo get a single document to make changes or simply to view it, use the following code -\n\n```javascript\nconst getDoc = async () => {\n  const doc = await client.getDocument({id:\"Player/Doug\"});\n  console.log(\"Player/Doug\", doc)\n}\n```\n\n```\n {\n    '@id'   : 'Player/Doug',\n    '@type' : 'Player',\n    name    : 'Doug',\n    position: 'Full Back'\n  }\n```\n\n## Get a list of all documents\n\nGet a list of all documents in the database using getDocument as\\_list. The results are shown further below.\n\n```javascript\nconst getDocs = async () => {\n  const documents = await client.getDocument({ as_list: \"true\" });\n  console.log(\"All Documents\", documents)\n}\n```\n\n```\n[\n  {\n    '@id'   : 'Player/Doug',\n    '@type' : 'Player',\n    name    : 'Doug',\n    position: 'Full Back'\n  },\n  {\n    '@id'   : 'Player/George',\n    '@type' : 'Player',\n    name    : 'George',\n    position: 'Center Back'\n  },\n  {\n    '@id'   : 'Player/Karen',\n    '@type' : 'Player',\n    name    : 'Karen',\n    position: 'Center Forward'\n  }\n]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Get Documents using the JavaScript Client",
      "description": "A guide to show how to get documents to TerminusDB and TerminusCMS using the JavaScript Client",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-get-documents.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Query Documents"
    },
    "slug": "query-documents",
    "body": {
      "@type": "Body",
      "value": "Get a list of documents matching a query. For more advanced queries, take a look at the GraphQL and WOQL how-to guides.\n\n```javascript\nconst queryDocuments = async () => {\n\n  const queryTemplate = { \"position\": \"Full Back\" }\n\n  const result = await client.getDocument({\"@type\":\"Player\",\"as_list\":true,\"query\":queryTemplate});\n  console.log(\"Query Documents\",result)\n}\n```\n\n```\n[{\"@type\" : \"Player\",\n  \"name\" : \"Doug\",\n  \"position\" : \"Full Back\"}]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Query Documents using the JavaScript Client",
      "description": "A guide to show how to perform basic document queries using the JavaScript Client.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Run a WOQL Query"
    },
    "slug": "run-woql-query",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the JavaScript Client](/docs/connect-with-the-javascript-client/), have a database, added a schema and some data, you now would like to query the database.\n\nThe example code below shows a simple query that returns all of the database's triples\n\n```javascript\n    const runQuery = async () => {\n        const WOQL = Terminusdb.WOQL\n        const v = WOQL.Vars(\"subject\",\"predicate\",\"object\")\n        const query = Terminusdb.WOQL.triple(v.subject,v.predicate,v.object)\n        const result = await client.query(query)\n\n        console.log(\"my query result\", JSON.stringyfy(result,null,4))\n    }    \n```\n\nFor more information and examples about querying with WOQL please see the \\[/woql-basics)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Run a WOQL Query using the JavaScript Client",
      "description": "A quick example to show you how to run a query using WOQL.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-use-woql-query.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use the Python Client"
    },
    "slug": "use-the-python-client",
    "body": {
      "@type": "Body",
      "value": "[Install Python Client](/docs/install-the-python-client/)[Connect with Python Client](/docs/connect-with-python-client/)[Create DB with Python](/docs/create-database-with-python-client/)[Connect to DB with Python](/docs/connect-to-a-database-with-python-client/)[Add Docs with Python](/docs/add-documents-with-python-client/)[Add Schema with Python](/docs/add-a-schema-with-the-python-client/)[Edit Docs with Python](/docs/edit-documents-with-python-client/)[Get Docs with Python](/docs/get-documents-with-python-client/)[Delete Docs with Python](/docs/delete-documents-with-python-client/)[Import Data with Python](/docs/import-data-with-python-client/)[WOQL Query with Python](/docs/woql-query-with-python-client/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Use the Python Client",
      "description": "Bite sized how to guides to help you get started with the Python Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Install the TerminusCMS & DB Python Client"
    },
    "slug": "install-the-python-client",
    "body": {
      "@type": "Body",
      "value": "It is recommended that you install the TerminusDB Python client (which works with [Python >= 3.7](https://www.python.org/downloads)) in a [separate Python environment](https://docs.python.org/3/tutorial/venv.html). For example, if we use `venv` which comes with standard installation of Python 3.\n\nFirst we create a new environment:\n\n```\n$ python3 -m venv ~/.virtualenvs/terminusdb\n$ source ~/.virtualenvs/terminusdb/bin/activate\n```\n\nThen we can install using pip:\n\n```\n$ python3 -m pip install terminusdb-client\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Install the TerminusCMS & DB Python Client",
      "description": "A guide showing how to install the TerminusCMS/DB Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-install-python-client.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Connect with the Python Client"
    },
    "slug": "connect-with-python-client",
    "body": {
      "@type": "Body",
      "value": "First, you should install the Python client. For installation instructions, see [the Python install instructions](/docs/install-the-python-client/).\n\n## Connecting with the Python Client\n\nDepending on whether you are connecting to an instance you have set up yourself, or whether you are using TerminusCMS in the cloud, there are two different methods of connection.\n\nIn both cases, you should load TerminusDB in your script with the following:\n\n```python\nfrom terminusdb_client import Client\n```\n\n### TerminusCMS\n\nThe TerminusCMS endpoint has the form `https://cloud.terminusdb.com/TEAM/` where `TEAM` is the name of the team you are using in TerminusCMS for the data products you want to access.\n\nIn order to connect to this team, you will need to [get your API key](/docs/how-to-connect-terminuscms/) after selecting the team you want to use.\n\nYou should put your access token in your environment, using the environment variable `TERMINUSDB_ACCESS_TOKEN`. This ensures that scripts do not leak the access token when checked into source control.\n\n```\nexport TERMINUSDB_ACCESS_TOKEN=\"...\"\n```\n\nAt this point, you can connect with the API key using the code:\n\n```\nteam=\"MyTeam\"\nclient.connect(team=team, use_token=True)\n```\n\n### Connecting to a TerminusDB installation\n\nWhether you are connecting to a local docker, a local server, or on a server that you've set up somewhere, you can use the following to log in to TerminusDB.\n\n```\nteam=\"MyTeam\",\nclient = Client(\"http://localhost:6363/\")\nclient.connect(team=team, password=\"MyPassword\")\n```\n\nIf you are using TerminusDB locally, and you have not set up a specific team, or changed the password differently from the default, you can simply connect with:\n\n```\nteam=\"admin\",\nclient = Client(\"http://localhost:6363/\")\nclient.connect(team=team)\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Connect with the Python Client",
      "description": "A guide to show how to connect with the Python Client for TerminusDB and TerminusCMS.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-connect.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Create a Database with the Python Client"
    },
    "slug": "create-database-with-python-client",
    "body": {
      "@type": "Body",
      "value": "To create a database with an already [connected client](/docs/connect-with-python-client/), you can write:\n\n```\ndbid=\"MyDatabase\"\nlabel=\"My Database\",\ndescription=\"This is a database which is mine\"\nprefixes = {'@base' : 'iri:///mydatabase/',\n            '@schema' : 'iri:///mydatabase#'}\nteam=\"MyTeam\"\nclient.create_database(\n    dbid,\n    team,\n    label=label,\n    description=description,\n    prefixes=prefixes)\n```\n\nThis creates a new database called `\"MyDatabase\"` using the descriptive label `\"My Database\"`. It starts the database with special `@base` and `@schema` prefixes, all in the team named `\"MyTeam\"`"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Create a Database with the Python Client",
      "description": "A guide showing how to create a TerminusDB or TerminusCMS database using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-create-a-db.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Connect to a Database using the Python Client"
    },
    "slug": "connect-to-a-database-with-python-client",
    "body": {
      "@type": "Body",
      "value": "## TerminusCMS\n\nIf you have created a Team in TerminusCMS, and put an [API key](/docs/how-to-connect-terminuscms/) in your environment you can connect to an existing database in the following way:\n\n```\nteam = \"MyTeam\",\nclient.connect(db=\"nuclear\", team=team, use_token=True)\n```\n\n## TerminusDB\n\nYou can connect to a database with basic authorization just by using the `connect` member function.\n\n```\nteam = \"MyTeam\",\nclient.connect(db=\"nuclear\")\n```\n\nIf you want to connect as a specific user and with a specific password, you can pass them here:\n\n```\nteam = \"MyTeam\",\nclient.connect(db=\"nuclear\", team=team, key=\"your_password\")\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Connect to a Database using the Python Client",
      "description": "A guide to show how to connect to a TerminusCMS project using the Python client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-connect-database.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Add Documents with the Python Client"
    },
    "slug": "add-documents-with-python-client",
    "body": {
      "@type": "Body",
      "value": "After you have imported the `terminusdb_client`, and [created a client](/docs/connect-with-python-client/), [connected to a database](/docs/connect-with-python-client/), and [added a schema](/docs/add-a-schema-with-the-python-client/), you can then use this client to insert a document that conforms to the schema.\n\n## Insert a document\n\nTo insert a document, you should use `insert_document`:\n\n```\ndocument = { '@type' : 'Person', 'name' : \"Jim\" }\nresults = client.insert_document(document)\n```\n\n## Insert multiple documents\n\nTo insert multiple documents you can also invoke `insert_document`:\n\n```\ndocuments = [{ '@type' : 'Person', 'name' : \"Jim\" },\n            { '@type' : 'Person', 'name' : \"Jill\" }]\nresults = client.insert_document(document)\n```\n\n## Insert schema document(s)\n\nAdditionally, you can update the schema itself by adding schema documents:\n\n```\nschema = { '@type' : 'Class', '@id' : 'Person', 'name' : 'xsd:string'}\nresults = client.insert_document(schema,graph_type=\"schema\")\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How To Add Documents with the Python Client",
      "description": "A guide to show how to add documents to your TerminusCMS projects using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-add-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Add a schema to TerminusCMS with the Python Client"
    },
    "slug": "add-a-schema-with-the-python-client",
    "body": {
      "@type": "Body",
      "value": "After you have imported the `terminusdb_client`, and [created a client](/docs/create-database-with-python-client/), and [connected to a database](/docs/connect-to-a-database-with-python-client/) you can create a schema.\n\n## Insert schema document(s)\n\nYou can update the schema by adding well-formed JSON schema documents:\n\n```\nschema = [{ '@type' : 'Class', '@id' : 'Country'},\n          { '@type' : 'Class', '@id' : 'Person',\n            'name' : 'xsd:string',\n            'nationality' : 'Country'\n          }]\nresults = client.insert_document(schema,graph_type=\"schema\")\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Add a schema to TerminusCMS with the Python Client",
      "description": "A guide to show how to add a schema to TerminusCMS projects with the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-add-a-schema.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Edit a Document with the Python Client"
    },
    "slug": "edit-documents-with-python-client",
    "body": {
      "@type": "Body",
      "value": "To update a document in your database, you first need to [get the document](/docs/get-documents-with-python-client/) you want to change. You then need to make your changes and update them. This example shows how -\n\n```\ndoc = {\n    '@id'     : 'Player/George',\n    '@type'   : 'Player',\n    'name'    : 'George',\n    'position': 'Center Back'\n  }\ndoc[\"position\"] = \"Full Back\"\nclient.update_document(doc)\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Edit a Document with the Python Client",
      "description": "A guide to show how to update a document in TerminusDB and TerminusCMS using the Python Client",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-edit-a-document.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Get Documents with the Python Client"
    },
    "slug": "get-documents-with-python-client",
    "body": {
      "@type": "Body",
      "value": "This guide assumes that you are already connected to the database using the Python client.\n\n## Get a single document\n\nTo get a single document to make changes or simply to view it, use the following code:\n\n```\ndocument = client.get_document(\"Player/Doug\")\n```\n\n```\n {\n    '@id'   : 'Player/Doug',\n    '@type' : 'Player',\n    name    : 'Doug',\n    position: 'Full Back'\n  }\n```\n\n## Get a list of all documents\n\nTo get a list of all documents in the database, you can use the `get_all_documents` function.\n\n```\ndocuments = client.get_all_documents()\n```\n\n```\n[\n  {\n    '@id'   : 'Player/Doug',\n    '@type' : 'Player',\n    name    : 'Doug',\n    position: 'Full Back'\n  },\n  {\n    '@id'   : 'Player/George',\n    '@type' : 'Player',\n    name    : 'George',\n    position: 'Center Back'\n  },\n  {\n    '@id'   : 'Player/Karen',\n    '@type' : 'Player',\n    name    : 'Karen',\n    position: 'Center Forward'\n  }\n]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Get Documents with the Python Client",
      "description": "A guide to show how-to get documents from TerminusDB and TerminusCMS using the Python Client",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-get-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Delete a Document with the Python Client"
    },
    "slug": "delete-documents-with-python-client",
    "body": {
      "@type": "Body",
      "value": "In order to delete a document you need to know the document id.\n\n```\ndoc_id = \"Player/George\"\nclient.delete_document(doc_id)\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to delete a document using the Python client",
      "description": "A guide to show how to delete a document from TerminusCMS using the Python Client",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-delete-a-document.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Import Data with the Python Client"
    },
    "slug": "import-data-with-python-client",
    "body": {
      "@type": "Body",
      "value": "This how-to assumes that you are already connected to a database and have a schema that matches the CSV you want to import.\n\n## Importing a CSV file\n\nYou can import CSV files easily by importing them into dictionaries using Python's built-in libraries. Those dictionary objects can be inserted into the database using the `insert_document` function.\n\n```python\nimport csv\nobjects = []\nwith open('test.csv', 'r') as f:\n    csv_reader = csv.DictReader(f)\n    objects = list(csv_reader)\nclient.insert_document(objects)\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Import Data with the Python Client",
      "description": "A guide to show how to import CSV data into TerminusCMS & DB using the Python Client",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-import-data.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Run a WOQL Query with the Python Client"
    },
    "slug": "woql-query-with-python-client",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [installed the client](/docs/install-the-python-client/), [connected to a database](/docs/connect-to-a-database-with-python-client/), and [connected with a client](/docs/connect-with-python-client/), you can then query with WOQL.\n\n## WOQLQuery\n\nWriting WOQL queries in Python is fairly simple. We have a WOQLQuery class that can be used to construct WOQL Queries.\n\nA simple example, in which we get all the names of the people in the database:\n\n```python\nfrom terminusdb_client import WOQLQuery, WOQLClient\nquery = WOQLQuery().woql_and(\n    WOQLQuery().triple('v:PersonId', 'rdf:type', '@schema:Person'),\n    WOQLQuery().trople('v:PersonId', '@schema:name', 'v:Name')\n)\nresult = client.query(query)\n```\n\nFor more information about WOQL query, read our [WOQL query how-to guides](/docs/woql-basics/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Run a WOQL Query with the Python Client",
      "description": "This how-to guide provides an example of the WOQL query language using the Python client",
      "og_image": "https://assets.terminusdb.com/docs/python-client-use-woql-query.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use the Collaboration Features"
    },
    "slug": "use-the-collaboration-features",
    "body": {
      "@type": "Body",
      "value": "[Collaboration with JS](/docs/collaboration-with-javascript-client/)[Collaboration with Python](/docs/collaboration-with-python-client/)[Collaboration Dashboard](/docs/collaboration-with-terminuscms-dashboard/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Use the Collaboration Features",
      "description": "How to guides for using TerminusCMS & TerminusDB's collaboration features using the clients and dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Collaboration Features with the JavaScript Client"
    },
    "slug": "collaboration-with-javascript-client",
    "body": {
      "@type": "Body",
      "value": "[Clone with JS](/docs/clone-a-project/)[Branch with JS](/docs/branch-a-project/)[Reset with JS](/docs/reset-a-project/)[Squash with JS](/docs/squash-projects/)[Time Travel with JS](/docs/time-travel-to-previous-commits/)[Diff & Patch with JS](/docs/diff-and-patch-operations/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Collaboration Features with the JavaScript Client",
      "description": "How to guides to help you use TerminusCMS and TerminusDB's collaboration features using the JavaScript Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Cloning a Database"
    },
    "slug": "clone-a-project",
    "body": {
      "@type": "Body",
      "value": "## Clone a database from terminusdb.com to your local machine\n\nAssuming you have [connected with the JavaScript Client](/docs/connect-with-the-javascript-client/) you can clone your database.\n\nCloning a database pulls down a full copy of all data at that point in time, including all document and schema versions.\n\nIf the database that you are cloning is not public, you need to provide an APIKey to the client setting the remoteAuth For more info visit the ['How to get your API key'](/docs/how-to-connect-terminuscms/) page.\n\n```python\nconst cloneLocally = async () => {\n   client.remoteAuth( {\"type\":\"apikey\" , \"key\":myApiKey})\n   const cloneDetails = {remote_url: \"http://cloud.terminusdb.com/MyTeam/MyTeam/mydb\", \n                        label \"Cloned DB\",\n                        comment: \"Cloned from mydb\"}\n   await  client.clonedb(cloneDetails, \"new_mydb\")\n\n   console.log(\"the database has been cloned\")\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Cloning a Database",
      "description": "A guide to show how to clone a database with the JS WOQLClient.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-collaboration-clone.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Branch a Project using the TerminusDB JS Client"
    },
    "slug": "branch-a-project",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the JavaScript Client](/docs/connect-with-the-javascript-client/) and [created a database](/docs/create-a-database/) you can then create a branch of your project.\n\nCreating a branch is the same for TerminusDB and TerminusCMS. By default, in TerminusDB or TerminusCMS you are working in the main branch.\n\n## Create a new branch from main branch\n\nUse this code to create a new branch starting from the main branch head.\n\n```javascript\nconst createBranch = async () => {\n  await client.branch(\"mybranch\");\n  client.checkout(\"mybranch\")\n}   \n```\n\n## Create a new branch from mybranch branch\n\nNow you are in the branch called `mybranch`.\n\nYou can create a new branch starting from the `mybranch` head\n\n```javascript\nconst createBranchFromMyBranch = async () => {\n  await client.branch(\"branch_from_mybranch\",\"mybranch\");\n  client.checkout(\"branch_from_mybranch\")\n}   \n```\n\n## Get a branch list\n\nGet all of the database's branches in a list using a \\[WOQL\\]() library method\n\n```javascript\nconst getBranchList = async () => {\n  const branchList = await TerminusClient.WOQL.lib().branches()\n  console.log(\"ExampleDatabase branch list\", JSON.stringify(branchList.bindings,null,4))\n\n}   \n```\n\nResponse example\n\n```\n[\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/main\",\n         \"Head\":\"terminusdb://ref/data/InitialCommit/ohj33rrh5kmnmr9cq6vzfajfxog0629\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"main\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385706.694406\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"ohj33rrh5kmnmr9cq6vzfajfxog0629\"\n         }\n      },\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/mybranch\",\n         \"Head\":\"terminusdb://ref/data/ValidCommit/prh0yvftqmsrgctn8gqvdxv7gc4i8p8\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"mybranch\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385762.7790234\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"prh0yvftqmsrgctn8gqvdxv7gc4i8p8\"\n         }\n      },\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/branch_from_mybranch\",\n         \"Head\":\"terminusdb://ref/data/ValidCommit/prh0yvftqmsrgctn8gqvdxv7gc4i8p8\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"branch_from_mybranch\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385762.7790234\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"prh0yvftqmsrgctn8gqvdxv7gc4i8p8\"\n         }\n      }\n   ]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Branch a Project using the JavaScript Client",
      "description": "A guide to show how to create a new branch in TerminusDB and TerminusCMS using the JavaScript Client.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/JS-client-collaboration-branch.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Reset the Branch Head to a Specific Commit"
    },
    "slug": "reset-a-project",
    "body": {
      "@type": "Body",
      "value": "Assuming you have created a database, and made a few commits, you [can time travel](/docs/time-travel-to-previous-commits/) to inspect them.\n\nYou may want to reset the branch to a specific commit. You will need your branch name and commit ID which can be obtained by time travelling.\n\nThe below code will rest your branch to a specific commit ID -\n\n```javascript\nconst resetBranch = async () => {\n   await  client.resetBracnh(mybranchName, mycommitid)\n   console.log(\"Succesfully reset branch HEAD to mycommitid\")\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Reset the Branch Head to a Specific Commit",
      "description": "A guide to using the JS WOQLClient to reset a branch.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-collaboration-reset.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Squashing Commits with the TerminusDB JS Client"
    },
    "slug": "squash-projects",
    "body": {
      "@type": "Body",
      "value": "Squashing allows you to combine multiple commits in your branch's history into a single commit.\n\n```javascript\nconst squashBranch = async () => {\n    const branchName = \"mybranch\"   \n    const commitMessage = \"merge all the commits\"\n    await client.squashBranch(branchName,commitMessage);\n    // get mybranch commits list \n    const commits = await TerminusClient.WOQL.lib().commits(\"mybranch\");\n    console.log(\"Show my commit after squash\", JSON.stringify(commits.bindings,null,4))\n}\n```\n\na response example\n\n```\n[\n      {\n         \"Author\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"myuser@terminusdb.com\"\n         },\n         \"Commit ID\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"vn7l94v4broiaz28346mdhwtgxvvy6p\"\n         },\n         \"Message\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"merge all the commits\"\n         },\n         \"Parent ID\":null,\n         \"Time\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678402502.1979887\n         }\n      }\n   ]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Squash Commits",
      "description": "A guide to show how to use the JS Client to squash commits in your branch's history.",
      "og_image": "https://assets.terminusdb.com/docs/js-client-collaboration-squash.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Time Travel through your Database History"
    },
    "slug": "time-travel-to-previous-commits",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the JavaScript Client](/docs/connect-with-the-javascript-client/), created a database, and made a few commits, you can time travel to inspect them to see what they looked like.\n\n## Get the branch commits list\n\nYou can use the JS WOQL Client Library method to get a list of branch commits. This example uses pagination to get the last 10 commits starting from the branch head -\n\n```javascript\nconst getCommits= async () => {\n    const commits = await TerminusClient.WOQL.lib().commits(\"mybranch\", 10 ,0);\n    console.log(\"Show the last 10 commits\", JSON.stringify(commits.bindings,null,4))\n}\n```\n\n## Get the branch commits list starting with a specific timestamp\n\nYou can also get a list of commits from a specific timestamp. The timestamp can be obtained from the log -\n\n```javascript\nconst getCommitsByTime= async () => {\n    const commits = await TerminusClient.WOQL.lib().commits(\"mybranch\", 10 ,0, 1678385999.7790234);\n    console.log(\"Show the last 10 commits before the timestamp\", JSON.stringify(commits.bindings,null,4))\n}\n```\n\na response example\n\n```python\n[\n      {\n         \"Author\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"myuser@terminusdb.com\"\n         },\n         \"Commit ID\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"prh0yvftqmsrgctn8gqvdxv7gc4i8p8\"\n         },\n         \"Message\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"Update from model builder\"\n         },\n         \"Parent ID\":\"terminusdb://ref/data/ValidCommit/onckvm1q9u98j5momtsfxia3optjkdi\",\n         \"Time\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385762.7790234\n         }\n      },\n      {\n         \"Author\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"myuser@terminusdb.com\"\n         },\n         \"Commit ID\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"onckvm1q9u98j5momtsfxia3optjkdi\"\n         },\n         \"Message\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"Update from model builder\"\n         },\n         \"Parent ID\":null,\n         \"Time\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385749.9860663\n         }\n      }\n   ]\n```\n\n## Time travel and point the client to a specific commit\n\nTo travel back in time to a particular commit, you need to specify the commit ID in the JS woqlClient parameters. To obtain the commit ID, refer to the code snippet above. All your calls after will be made for this commit.\n\n```javascript\nconst getDocumentsAtCommit= async () => {\n    client.ref(\"onckvm1q9u98j5momtsfxia3optjkdi\")\n    const docs = await client.getDocument({graph_type:\"schema\"})\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Time Travel to a Specific Commit in your Database",
      "description": "A guide showing how to time travel to a specific commit in TerminusCMS and TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/js-client-collaboration-time-travel.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Diff and Path with JavaScript"
    },
    "slug": "diff-and-patch-operations",
    "body": {
      "@type": "Body",
      "value": "## Diff an object\n\nReturn the diff from two objects\n\n```javascript\nconst diffObjects = async () => {\n   const before = { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"}\n   const after = { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"}\n   const options = {keep:{ \"@id\" : true, \"name\" : true }}\n\n   //in the options you can list the properties that you would like to see in the diff result.\n   const diffResult = await client.getJSONDiff = function (before, after, options) {\n\n   console.log(\"the diff result \", JSON.stringify(diffResult,null,4))\n}\n```\n\nHere is an example of a diff result between two objects\n\n```\n{\n   \"name\":{\n      \"@op\":\"ValueSwap\",\n      \"@before\":\"Jane\",\n      \"@after\":\"Janine\"\n   },\n   \"@id\":\"Person/Jane\"\n}\n```\n\n## Get the patch of differences between branches or commits.\n\n```javascript\nconst diffDocsVersion = async () => {\n   const beforeVersion = \"a73ssscfx0kke7z76083cgswszdxy6l\"\n   const afterVersion =  \"73rqpooz65kbsheuno5dsayh71x7wf4\"\n   const options = {keep:{ \"@id\" : true, \"name\" : true }}\n\n   const diffResult = await client.getVersionDiff = function (beforeVersion, afterVersion, null, options) {\n\n   console.log(\"the diff result \", JSON.stringify(diffResult,null,4))\n}\n```\n\nHere is the example result\n\n```\n[\n   {\n      \"@id\":\"Person/Jane\",\n      \"@type\":\"Person\",\n      \"name\" : \"Jane\"\n      \"age\":{\n         \"@after\":23,\n         \"@before\":22,\n         \"@op\":\"SwapValue\"\n      }\n   },\n   {\n      \"@id\":\"Person/Tom\",\n      \"@type\":\"Person\",\n      \"name\" : \"Tom\"\n      \"age\":{\n         \"@after\":10,\n         \"@before\":null,\n         \"@op\":\"SwapValue\"\n      }\n   }\n]\n```\n\n## Get the patch of difference between a document and an object.\n\n```javascript\nconst diffDocToObject = async () => {\n   const jsonObject = { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jannet\"}\n   const options = {keep:{ \"@id\" : true, \"name\" : true }}\n\n   //in the options you can list the properties that you would like to see in the diff result.\n   const diffResult = await client.getVersionObjectDiff = function (\"main\", jsonObject, \"Person/Jane\", options) {\n\n   console.log(\"the diff result \", JSON.stringify(diffResult,null,4))\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Diff an Object or a Database Branch with the JS Client",
      "description": "A guide to show how to use the JS Client to diff an object or a database branch.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/js-client-collaboration-diff-patch.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Collaboration Features with the Python Client"
    },
    "slug": "collaboration-with-python-client",
    "body": {
      "@type": "Body",
      "value": "[Branch with Python](/docs/branch-a-project-with-the-python-client/)[Clone with Python](/docs/clone-a-database-with-python/)[Reset with Python](/docs/reset-to-a-commit-with-python/)[Squash with Python](/docs/squash-a-project-with-python/)[Time Travel with Python](/docs/time-travel-with-python/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Collaboration Features with the Python Client",
      "description": "How to guides to help you get to grips with TerminusCMS and TerminusDB's collaboration features using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Branch a Project Using the Python Client"
    },
    "slug": "branch-a-project-with-the-python-client",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the Python Client](/docs/connect-with-python-client/) and [created a database](/docs/create-database-with-python-client/) you can then create a branch of your project.\n\nCreating a branch is the same for TerminusDB and TerminusCMS. By default, in TerminusDB or TerminusCMS you are working in the main branch.\n\n## Create a new branch from main branch\n\nUse this code to create a new branch starting from the main branch head.\n\n```\nclient.create_branch(\"mybranch\")\nclient.branch(\"mybranch\")\n```\n\nIf you add documents to the `mybranch`, they won't end up in the `main` branch unless you merge them.\n\n## Create a new branch from mybranch branch\n\nNow you are in the branch called `mybranch`.\n\nYou can create a new branch starting from the `mybranch` head. Since we are checked out on the \"mybranch\" already, we can just create a new branch from there. It will have `mybranch` as its parent.\n\n```\nclient.create_branch(\"branch_from_mybranch\")\nclient.branch(\"branch_from_mybranch\")\n```\n\n## Get a branch list\n\nGet all of the data product's branches in a list using a method\n\n```\nbranches = client.get_all_branches()\nprint(branches)\n```\n\nResponse example\n\n```\n[\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/main\",\n         \"Head\":\"terminusdb://ref/data/InitialCommit/ohj33rrh5kmnmr9cq6vzfajfxog0629\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"main\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385706.694406\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"ohj33rrh5kmnmr9cq6vzfajfxog0629\"\n         }\n      },\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/mybranch\",\n         \"Head\":\"terminusdb://ref/data/ValidCommit/prh0yvftqmsrgctn8gqvdxv7gc4i8p8\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"mybranch\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385762.7790234\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"prh0yvftqmsrgctn8gqvdxv7gc4i8p8\"\n         }\n      },\n      {\n         \"Branch\":\"terminusdb://ref/data/Branch/branch_from_mybranch\",\n         \"Head\":\"terminusdb://ref/data/ValidCommit/prh0yvftqmsrgctn8gqvdxv7gc4i8p8\",\n         \"Name\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"branch_from_mybranch\"\n         },\n         \"Timestamp\":{\n            \"@type\":\"xsd:decimal\",\n            \"@value\":1678385762.7790234\n         },\n         \"commit_identifier\":{\n            \"@type\":\"xsd:string\",\n            \"@value\":\"prh0yvftqmsrgctn8gqvdxv7gc4i8p8\"\n         }\n      }\n   ]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Branch a Project Using the Python Client",
      "description": "A guide to show how to branch a TerminusCMS project using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-collaboration-branch.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Cloning a Database with the Python Client"
    },
    "slug": "clone-a-database-with-python",
    "body": {
      "@type": "Body",
      "value": "> Before starting, you should create an account on TerminusCMS and get an API Token. You can read about this [here](/docs/how-to-connect-terminuscms/).\n\nThis how-to will show how to clone a public database from TerminusCMS into your own TerminusCMS team.\n\n## Running the Python client with the API Token\n\nBe sure to construct the Python client object first, and set the appropriate authentication token.\n\n```python\nfrom terminusdb_client import Client\nclient = Client('https://cloud.terminusdb.com/MyTeam')\nclient.connect(team='MyTeam', api_token='YOUR_API_TOKEN_HERE')\n```\n\n## Cloning the database\n\nCheck the TerminusCMS dashboard for a database that you want to clone. In this how-to, we will be using the Lego database as an example.\n\n```\nclone_url = 'https://cloud.terminusdb.com/MyTeam/Terminusdb_demo/lego'\nclient.clonedb(clone_url, 'my_lego', remote_auth={'type': 'token': 'key': 'YOUR_API_TOKEN_HERE'})\n```\n\nYou now have the my\\_lego database cloned in your TerminusCMS team.\n\nTo verify whether the database has been successfully cloned, you can run:\n\n```\nclient.get_database('my_lego')\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Cloning a Database with the Python Client",
      "description": "A guide to show how to clone a database using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-collaboration-clone.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Reset to a Particular Commit with the Python Client"
    },
    "slug": "reset-to-a-commit-with-python",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the Python Client](/docs/connect-with-python-client/), created a database, and made a few commits, you can reset the HEAD of a database to a particular commit. Just like you would do in `git` with `git reset`.\n\n## Get the commits list\n\nYou can use the Python Client Library method to get a list of branch commits. This example uses pagination to get the last commits starting from the branch head -\n\n```python\n//For TerminusCMS\nfrom terminusdb_client import Client\nclient = Client('https://cloud.terminusdb.com/MyTeam')\nclient.connect(team='MyTeam' db='your_db', api_token='YOUR_API_TOKEN_HERE')\ncommits = client.logs(count=10)\nprint(commits)\n// For TerminusDB\nfrom terminusdb_client import Client\nclient = Client('http://localhost:6363')\nclient.connect(key='root', user='root', team='root' db='your_db')\ncommits = client.logs(count=10)\nprint(commits)\n```\n\nA response example will be a list of objects like this:\n\n```\n{\n\"@id\":\"InitialCommit/hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n\"@type\":\"InitialCommit\",\n\"author\":\"system\",\n\"identifier\":\"hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n\"message\":\"create initial schema\",\n\"schema\":\"layer_data:Layer_4234adfe377fa9563a17ad764ac37f5dcb14de13668ea725ef0748248229a91b\",\n\"timestamp\":1660919664.9129035\n}\n```\n\n## Reset to a specific commit\n\nTo reset the HEAD of your database to a particular commit, you need to get the identifier of a particular commit. To obtain the identifier, refer to the code snippet above.\n\n```\nclient.reset(\"hpl18q42dbnab4vzq8me4bg1xn8p2a0\")\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Reset to a Particular Commit with the Python Client",
      "description": "A guide to show how to reset your TerminusDB project, or project branch, to a specific commit using Python.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-collaboration-reset.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Squashing Commits with the TerminusDB Python Client"
    },
    "slug": "squash-a-project-with-python",
    "body": {
      "@type": "Body",
      "value": "Squashing allows you to combine multiple commits in your branch's history into a single commit. This how-to assumes that you [connected to a database already](/docs/connect-to-a-database-with-python-client/).\n\n```\n    client.branch = \"mybranch\"\n    commitMessage = \"merge all the commits\"\n    result = client.squash(commitMessage);\n}\n```\n\nThe result will contain the new commit id. You can use it to reset the HEAD to the new squashed commit.\n\n```\nclient.reset(result)\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Squashing Commits with the Python Client",
      "description": "A guide to show how to squash commits into one big commit using the TerminusDB & TerminusCMS Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-collaboration-squash.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Time Travel Through your Database History"
    },
    "slug": "time-travel-with-python",
    "body": {
      "@type": "Body",
      "value": "Assuming you have [connected with the Python Client](/docs/connect-with-python-client/), created a database, and made a few commits, you can time travel to inspect them to see what they looked like.\n\n## Get the commits list\n\nYou can use the Python WOQL Client Library method to get a list of branch commits. This example uses pagination to get the last 10 commits starting from the branch head -\n\n```python\n// For TerminusCMS\nfrom terminusdb_client import Client\nclient = Client('https://cloud.terminusdb.com/MyTeam')\nclient.connect(team='MyTeam' db='your_db', api_token='YOUR_API_TOKEN_HERE')\ncommits = client.logs(count=10)\nprint(commits)\n// For TerminusDB\nfrom terminusdb_client import Client\nclient = Client('http://localhost:6363')\nclient.connect(key='root', user='root', team='root' db='your_db')\ncommits = client.logs(count=10)\nprint(commits)\n```\n\nA response example will be a list of objects like this:\n\n```\n               {\n                \"@id\":\"InitialCommit/hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n                \"@type\":\"InitialCommit\",\n                \"author\":\"system\",\n                \"identifier\":\"hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n                \"message\":\"create initial schema\",\n                \"schema\":\"layer_data:Layer_4234adfe377fa9563a17ad764ac37f5dcb14de13668ea725ef0748248229a91b\",\n                \"timestamp\":1660919664.9129035\n               }\n```\n\n## Time travel and point the client to a specific commit\n\nTo travel back in time to a particular commit, you need to specify the commit ID in the ref property. To obtain the commit ID, refer to the code snippet above. All your calls after will be made for this commit.\n\n```\nclient.ref = \"hpl18q42dbnab4vzq8me4bg1xn8p2a0\")\ndocs = client.get_all_documents()\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Time Travel Through your Database History",
      "description": "A guide to show to time travel through your TerminusDB and TerminusCMS projects using the Python Client.",
      "og_image": "https://assets.terminusdb.com/docs/python-client-collaboration-time-travel.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Collaboration Features with the TerminusCMS Dashboard"
    },
    "slug": "collaboration-with-terminuscms-dashboard",
    "body": {
      "@type": "Body",
      "value": "[Branch with Dashboard](/docs/branch/)[Clone with Dashboard](/docs/clone/)[Reset with Dashboard](/docs/reset/)[Squash with Dashboard](/docs/squash/)[Time Travel with Dashboard](/docs/time-travel/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Collaboration Features with the TerminusCMS Dashboard",
      "description": "How to guides for leveraging collaboration features using TerminusCMS dashboard. ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Branch a Project with the TerminusCMS Dashboard"
    },
    "slug": "branch",
    "body": {
      "@type": "Body",
      "value": "The TerminusCMS dashboard enables you to branch projects. To do this, choose the team and project you want to branch. You will be directed to the project home page. This is where you can branch it.\n\nScroll down to see the manage `branch` section.\n\n![Branch the project](https://assets.terminusdb.com/docs/branch-project.png)\n\nEach project can have one or more branches, the default is called main. Each branch contains a snapshot of the data as it was at the time of branching. This is useful for experimenting or providing data to other teams when you want to keep them away from main.\n\n## Create a new branch\n\nClick the `new branch` button.\n\n![Create a new project branch in TerminusCMS](https://assets.terminusdb.com/docs/branch-new.png)\n\nGive the branch and ID.\n\nYou then have two choices:\n\n1.  Branch from the current head to include all of the data\n2.  Create an empty branch\n\nClick `new branch` to create it.\n\nYou will then be switched to that branch.\n\n## Swap between branches\n\nFrom the manage branch section use the ellipsis symbol next to the branches to switch between branches and main.\n\n![Branch Options](https://assets.terminusdb.com/docs/branch-options.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Branch a Project using the TerminusCMS Dashboard",
      "description": "A guide to show how to branch projects using the TerminusCMS dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/branch-project.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Branch the project",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch the project"
        },
        "value": "https://assets.terminusdb.com/docs/branch-project.png"
      },
      {
        "@type": "Media",
        "alt": "Create a new project branch in TerminusCMS",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create a new project branch in TerminusCMS"
        },
        "value": "https://assets.terminusdb.com/docs/branch-new.png"
      },
      {
        "@type": "Media",
        "alt": "Branch Options",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch Options"
        },
        "value": "https://assets.terminusdb.com/docs/branch-options.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Clone a Project"
    },
    "slug": "clone",
    "body": {
      "@type": "Body",
      "value": "From the project home page, on the right you will see the `Clone Project` section.\n\n![Clone a project from the project home page](https://assets.terminusdb.com/docs/project-admin.png)\n\nYou can clone the project with -\n\n*   The same name to another team - choose this from the dropdown menu\n*   A different name to another team\n*   A different name to the same team\n\nPress the `Clone` button.\n\nYou will be directed to the cloned project. If you clone to a different team, you will also move teams."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Clone a Project using the TerminusCMS Dashboard",
      "description": "A guide to show how to clone a project using the TerminusCMS dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/project-admin.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone a project from the project home page",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone a project from the project home page"
        },
        "value": "https://assets.terminusdb.com/docs/project-admin.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Reset a Project with the TerminusCMS Dashboard"
    },
    "slug": "reset",
    "body": {
      "@type": "Body",
      "value": "To reset a branch of a database, or indeed main, navigate to the project home page, the first icon on the left that looks like a database.\n\nScroll down to the `Manage Branches` section and selected `Branches`.\n\nNext to the branch you want to reset, select the ellipses symbol to see the branch options.\n\n![Branch options with the ability to squash the branch of the database](https://assets.terminusdb.com/docs/branch-options.png)\n\nChoose the `Reset` button.\n\nChoose the commit you would like to reset to and copy the commit ID by selecting the clipboard icon. _You can inspect commits using the [time travel feature](/docs/time-travel/)._\n\nPaste the commit ID and press the `Reset Branch` button.\n\n![A squashed branch combines all commits into one big one](https://assets.terminusdb.com/docs/reset-a-branch.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Reset a Project with the TerminusCMS Dashboard",
      "description": "A guide to show how to reset to a particular commit of a branch or main using the TerminusCMS dashboard.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/reset-a-branch.png?raw=true"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Branch options with the ability to squash the branch of the database",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch options with the ability to squash the branch of the database"
        },
        "value": "https://assets.terminusdb.com/docs/branch-options.png"
      },
      {
        "@type": "Media",
        "alt": "A squashed branch combines all commits into one big one",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "A squashed branch combines all commits into one big one"
        },
        "value": "https://assets.terminusdb.com/docs/reset-a-branch.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Squash Commits with the TerminusCMS Dashboard"
    },
    "slug": "squash",
    "body": {
      "@type": "Body",
      "value": "To squash a branch of a database, or indeed main, navigate to the project home page, the first icon on the left that looks like a database.\n\nScroll down to the `Manage Branches` section and selected `Branches`.\n\nNext to the branch you want to squash, select the ellipses symbol to see the branch options.\n\n![Branch options with the ability to squash the branch of the database](https://assets.terminusdb.com/docs/branch-options.png)\n\nChoose the `Squash` button.\n\nGive the operation a description and press the `Squash Branch` button.\n\n![A squashed branch combines all commits into one big one](https://assets.terminusdb.com/docs/squashed-branch.png)\n\n> Be wary as squashing a project will result in the commit history being lost"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Squash Commits with the TerminusCMS Dashboard",
      "description": "A guide to show how to squash the commits of a branch or main into one large commit using the TerminusCMS dashboard.",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/squashed-branch.png?raw=true"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Branch options with the ability to squash the branch of the database",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Branch options with the ability to squash the branch of the database"
        },
        "value": "https://assets.terminusdb.com/docs/branch-options.png"
      },
      {
        "@type": "Media",
        "alt": "A squashed branch combines all commits into one big one",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "A squashed branch combines all commits into one big one"
        },
        "value": "https://assets.terminusdb.com/docs/squashed-branch.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Time Travel using the TerminusCMS Dashboard"
    },
    "slug": "time-travel",
    "body": {
      "@type": "Body",
      "value": "It is possible in the TerminusCMS dashboard to time travel to any previous commit to examine the data and schema. This is particularly useful if you want to see what something looked like at a particular date, or if something has broken and you want to see when the last stable state was so you can revert back to it.\n\nTime travel is each to do. From any screen when viewing a project (apart from the project home page), you will see a `stopwatch symbol` in the top bar.\n\nSelect this and a panel will appear from the right.\n\n![Time travel to any previous commit using the TerminusCMS dashboard](https://assets.terminusdb.com/docs/time-travel.png)\n\nEach commit in the list features the comments from the merged change request.\n\nTravel back in time by selecting the button next to the commit you want to go back to.\n\n![See what data used to look like in a previou commit](https://assets.terminusdb.com/docs/travel-back-in-time.png)\n\nThe dashboard informs you that you are not on the latest version.\n\nYou can then go an inspect the data in your project and the schema to see what's changed."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Time Travel using the TerminusCMS Dashboard",
      "description": "A guide to show how to time travel to any previous commit using the TerminusCMS dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/time-travel.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Time travel to any previous commit using the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Time travel to any previous commit using the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/time-travel.png"
      },
      {
        "@type": "Media",
        "alt": "See what data used to look like in a previou commit",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "See what data used to look like in a previou commit"
        },
        "value": "https://assets.terminusdb.com/docs/travel-back-in-time.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use VectorLink"
    },
    "slug": "use-vectorlink",
    "body": {
      "@type": "Body",
      "value": "[Add OpenAI Key](/docs/set-up-vectorlink/)[Configure Vector Embeddings](/docs/openai-handlebars-config/)[Index Your Data](/docs/index-your-data/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to use VectorLink",
      "description": "A series of how-to guides to get you started with VectorLink, the semantic indexer",
      "og_image": "https://assets.terminusdb.com/docs/vectorlink-semantic-cms.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Set up VectorLink"
    },
    "slug": "set-up-vectorlink",
    "body": {
      "@type": "Body",
      "value": "VectorLink is a semantic indexer for TerminusCMS. It is a vector database that uses OpenAI, vector embeddings and GraphQL to provide AI-assisted semantic search, similar search, clustering and entity resolution.\n\nTo use VectorLink you need an OpenAI API key. The OpenAI key applies to the team and all data products within that team.\n\n## Set OpenAI API Key\n\nTo set your OpenAI Key -\n\n1.  Log in to the user interface dashboard - dashboard.terminusdb.com\n2.  Select a Team\n3.  Select your Profile by clicking on ▼ at the top-right corner of the screen.\n4.  Paste your OpenAI API key and press save.\n5.  Check that the checkbox is ticked to ensure the automatic document indexing will run after every change request approval process\n\n![Add your OpenAI key in the relevant section within your profile](https://assets.terminusdb.com/docs/vectorlink-openai-key.png)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Set up VectorLink",
      "description": "Steps to set up VectorLink to work with OpenAI",
      "og_image": "https://assets.terminusdb.com/docs/vectorlink-semantic-cms.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Add your OpenAI key in the relevant section within your profile",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Add your OpenAI key in the relevant section within your profile"
        },
        "value": "https://assets.terminusdb.com/docs/vectorlink-openai-key.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "OpenAI and Handlebars Configuration"
    },
    "slug": "openai-handlebars-config",
    "body": {
      "@type": "Body",
      "value": "To use VectorLink’s semantic search you first need to configure the Handlebars semantic templates to generate the vector embeddings in a word-based query format for OpenAI.\n\n![High quality text embeddings for OpenAI using GraphQL query with Handlebars templates](https://assets.terminusdb.com/docs/vectorlink-text-embeddings.png)\n\n## Quick Guide\n\nYou need to create a Handlebars embedding for each document class that you want to index.\n\nAssuming you have logged into TerminusCMS, selected a team and data product, do the following -\n\n1.  Choose the OpenAI icon from the menu on the left\n2.  Using the dropdown menu, select the document class you want to generate an embedding for.\n3.  Check the GraphQL query - ensure that all properties that you want to include in your embedding are there.\n4.  Write your Handlebars template and press preview.\n5.  Check the preview pane to ensure the embedding is as it should be.\n6.  When done, press save.\n7.  Repeat the process for all the document classes you want indexing.\n\n## Choose your Document Class\n\nFrom the dropdown menu, choose the document class you want to index.\n\nThis generates the GraphQL query to include in the template. Check that all of the document properties you want to index are there. In some cases, it is more useful to choose a property label rather than an ID.\n\n## Write Handlebars Semantic Templates\n\n> If you clone the Star Wars data product from TerminusCMS, this comes with a working Handlebars template for you to copy.\n\nThis is currently a manual process. The templates are written in an easy-to-understand way.\n\nUsing the Star Wars data product example - that you can clone from the dashboard, this example shows the structure of a semantic template for the People class in Star Wars -\n\n```\n{\n    \"embedding\": {\n        \"query\": \"query($id: ID){ People(id : $id) { birth_year, created, desc, edited, eye_color, gender, hair_colors, height, homeworld { label }, label, mass, skin_colors, species { label }, url } }\",\n        \"template\": \"The person's name is {{label}}.{{#if desc}} They are described with the following synopsis: {{#each desc}} *{{this}} {{/each}}.{{/if}}{{#if gender}} Their gender is {{gender}}.{{/if}}{{#if hair_colors}} They have the following hair colours: {{hair_colors}}.{{/if}}{{#if mass}} They have a mass of {{mass}}.{{/if}}{{#if skin_colors}} Their skin colours are {{skin_colors}}.{{/if}}{{#if species}} Their species is {{species.label}}.{{/if}}{{#if homeworld}} Their homeworld is {{homeworld.label}}.{{/if}}\"\n    }\n}\n```\n\nThe query parameters use the document properties. This information is used in the template. Additional information is then added to give each property some context.\n\nNotice that a link document property can reference the linked document and its properties, for example -\n\n```\n{{homeworld.label}}\n```\n\nMore information about Handlebars can be found here - [Handlebars documentation](https://handlebarsjs.com/guide/).\n\n## Preview & Save Config\n\nPreview your template by pressing the Preview button on the right.\n\nAdjust your template if it needs it.\n\nPress save. The template will be saved for that document class.\n\nRepeat these steps for each class you want to be indexed."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to configure high-quality text embeddings for OpenAI",
      "description": "OpenAI and Handlebars Configuration",
      "og_image": "https://assets.terminusdb.com/docs/vectorlink-semantic-cms.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "High quality text embeddings for OpenAI using GraphQL query with Handlebars templates",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "High quality text embeddings for OpenAI using GraphQL query with Handlebars templates"
        },
        "value": "https://assets.terminusdb.com/docs/vectorlink-text-embeddings.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Index Your Data"
    },
    "slug": "index-your-data",
    "body": {
      "@type": "Body",
      "value": "Once you have configured OpenAI, you can index your data. Indexing happens on a commit level so to start indexing you need a new commit.\n\nTo do this, create and approve a change request. The indexing process will begin.\n\nYou can see the commit index history by clicking on the cog symbol on the left. Here you can also restart indexing processes.\n\nOnce you have indexed your data, you can ask the semantic index server questions about your data and content.\n\nTo sumbit prompts about your data, select the magnifying glass icon from the left and fill in the form with your prompts."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Index Your Data with VectorLink",
      "description": "How to index your content and data with VectorLink",
      "og_image": "https://assets.terminusdb.com/docs/vectorlink-semantic-cms.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Model Schema"
    },
    "slug": "model-schema",
    "body": {
      "@type": "Body",
      "value": "[Model Schema UI](/docs/use-the-model-builder-ui/)[JSON Editor](/docs/use-the-json-editor/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Model Schema",
      "description": "Bit sized how to guides to help you model and build schema for TerminusDB and TerminusCMS projects.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Use the Model Builder UI"
    },
    "slug": "use-the-model-builder-ui",
    "body": {
      "@type": "Body",
      "value": "## Make a New Data Product\n\nFirst, log in to TerminusCMS, choose (or create) a team, and then click on `New Data Product`.\n\n![Create a new data product using the TerminusDB/TerminusCMS dashboard](https://assets.terminusdb.com/docs/new-data-product.png)\n\n## Create a Class\n\nNow click on the pink bubbles on the left panel. This takes you to the schema builder page.\n\nHover over the gray schema bubble in the center of the graph view.\n\n![JSON schema editor in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/schema-ui-no-docs.png)\n\nThis will give you a `+` icon. This will allow you to add either a document class or an enum. Choose _document_.\n\nThe document will appear as an orange Square and on the right-hand side you will have a panel for editing the schema. You can choose a name for your new document class under the field `Unique ID*`.\n\nOnce you have chosen an id, you can (optionally) choose the _printed_ name of the document under `Label`.\n\n## Add Properties\n\n![Add document properties using the schema builder UI](https://assets.terminusdb.com/docs/schema-ui-doc-properties.png)\n\nNow you can switch the properties tab, and click on `Add Property`. This will give you a choice of several different property types. You can choose `String` for instance for various string properties.\n\nAgain you will have to give it a unique id, and by default the property will be _optional_, but you can change this to _mandatory_, _list_ or _set_.\n\nWhen you are done, click the Disk icon above (meaning save).\n\n## Add Link Property\n\n![Add link properties to a document using the schema builder UI](https://assets.terminusdb.com/docs/schema-ui-doc-link-properties.png)\n\nYou can also add a link property by choosing `Link Property` under the `AddProperty` selector once you have saved at least one document class.\n\nYou must again specify an ID, and link to an already created document class.\n\n## Add Enum\n\n![Create an enum for your schema using the schema builder UI](https://assets.terminusdb.com/docs/schema-ui-doc-enum.png)\n\nYou can add an enum by clicking the `+` on the gray schema bubble and selecting `Add Enum`.\n\nAfter you have chosen a name for your enum, click on the `Values` tab on the right, and begin entering valid values for this enum.\n\n## Add an Enum Property\n\n![Add an enum property to a document using the schema builder UI](https://assets.terminusdb.com/docs/schema-ui-doc-add-enum-property.png)\n\nNow it is possible to link to this enum from any document class. You can do this by selecting `Enum Property` under the `AddProperty` selector."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Use the Model Builder UI to Build Schema",
      "description": "The model builder UI allows you to construct classes of objects and define what data they have, and what links (or relationships) they have between them.",
      "og_image": "https://assets.terminusdb.com/docs/schema-ui-doc-properties.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Create a new data product using the TerminusDB/TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create a new data product using the TerminusDB/TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/new-data-product.png"
      },
      {
        "@type": "Media",
        "alt": "JSON schema editor in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "JSON schema editor in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/schema-ui-no-docs.png"
      },
      {
        "@type": "Media",
        "alt": "Add document properties using the schema builder UI",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Add document properties using the schema builder UI"
        },
        "value": "https://assets.terminusdb.com/docs/schema-ui-doc-properties.png"
      },
      {
        "@type": "Media",
        "alt": "Add link properties to a document using the schema builder UI",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Add link properties to a document using the schema builder UI"
        },
        "value": "https://assets.terminusdb.com/docs/schema-ui-doc-link-properties.png"
      },
      {
        "@type": "Media",
        "alt": "Create an enum for your schema using the schema builder UI",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create an enum for your schema using the schema builder UI"
        },
        "value": "https://assets.terminusdb.com/docs/schema-ui-doc-enum.png"
      },
      {
        "@type": "Media",
        "alt": "Add an enum property to a document using the schema builder UI",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Add an enum property to a document using the schema builder UI"
        },
        "value": "https://assets.terminusdb.com/docs/schema-ui-doc-add-enum-property.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Use the JSON View for building a Schema"
    },
    "slug": "use-the-json-editor",
    "body": {
      "@type": "Body",
      "value": "## Make a New Data Product\n\nFirst, log in to TerminusCMS, choose (or create) a team, and then click on \"New Data Product\".\n\n![Create a new product with the TerminusCMS or TerminusDB dashboard](https://assets.terminusdb.com/docs/new-data-product.png)\n\n## Create a schema as JSON\n\nNow click on the pink bubbles on the left panel. This takes you to the schema builder page. Select JSON view from the tab and you'll see your entire schema as JSON.\n\n![TerminusCMS schema editor JSON view](https://assets.terminusdb.com/docs/schema-as-code.png)\n\nIf you click on the Edit button in the upper right-hand corner, you'll be able to directly edit the schema.\n\nIf you have no data in your database, it should be possible to freely edit the schema. However, if you have data, then you may not be able to make arbitrary edits. The schema editor will warn you upon submission if some restrictions are violated.\n\nEssentially it should _always_ be possible to [weaken](/docs/what-is-schema-weakening/) the schema safely through the interface. However, other changes will require [schema migration](/docs/schema-migration-reference-guide/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Use the JSON editor to build schema",
      "description": "Use the JSON editor to build your TerminusCMS schema. Define documents, properties, links, and enums. ",
      "og_image": "https://assets.terminusdb.com/docs/schema-as-code.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Create a new product with the TerminusCMS or TerminusDB dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Create a new product with the TerminusCMS or TerminusDB dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/new-data-product.png"
      },
      {
        "@type": "Media",
        "alt": "TerminusCMS schema editor JSON view",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "TerminusCMS schema editor JSON view"
        },
        "value": "https://assets.terminusdb.com/docs/schema-as-code.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Manage Projects with TerminusCMS"
    },
    "slug": "manage-projects-with-terminuscms",
    "body": {
      "@type": "Body",
      "value": "[Create Teams with UI](/docs/create-a-team-with-terminuscms/)[Create Projects with UI](/docs/create-a-project-with-terminuscms/)[Invite Users with UI](/docs/invite-users-using-terminuscms/)[Get API Key](/docs/get-your-api-key-from-terminuscms/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Manage Projects with TerminusCMS",
      "description": "Bit sized how to guides to get to know the TerminusCMS dashboard to manage your projects",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Create a Team with the TerminusCMS Dashboard"
    },
    "slug": "create-a-team-with-terminuscms",
    "body": {
      "@type": "Body",
      "value": "Follow these instruction to create a new team in the TerminusCMS dashboard -\n\n> Note, if it is your first time logging in you will see the pricing page. Select Community Package to proceed and follow these instructions.\\*\n\n1.  In team selection screen, choose the team that was automatically generated upon your sign up (or any other).\n2.  In the resulting screen, choose profile by selecting the arrow next to your profile avitar/initials.\n\n![select profile from the top menu](https://assets.terminusdb.com/docs/manage-your-projects-create-a-new-team.png)\n\n3.  Under your profile details, click the 'Create a New Team' button.\n\n![Name your team and press create new team button](https://assets.terminusdb.com/docs/manage-your-projects-create-a-new-team-2.png)\n\n4.  Name your team and press the 'Create a New Team' button.\n\nYou are now ready to [add projects](/docs/create-a-project-with-terminuscms/) to your team and [invite collaborators](/docs/invite-users-using-terminuscms/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Create teams using TerminusCMS",
      "description": "A how-to guide for creating teams using the TerminusCMS dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/manage-your-projects-create-a-new-team-2.pn"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "select profile from the top menu",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "select profile from the top menu"
        },
        "value": "https://assets.terminusdb.com/docs/manage-your-projects-create-a-new-team.png"
      },
      {
        "@type": "Media",
        "alt": "Name your team and press create new team button",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Name your team and press create new team button"
        },
        "value": "https://assets.terminusdb.com/docs/manage-your-projects-create-a-new-team-2.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Create a Project/Data Project in TerminusCMS"
    },
    "slug": "create-a-project-with-terminuscms",
    "body": {
      "@type": "Body",
      "value": "Follow this instructions to create a project/data product in TerminusCMS -\n\n1.  Login to the dashboard at [dashboard.terminusdb.com](https://dashboard.terminusdb.com).\n2.  Select the team that you want the project to live.\n3.  Choose 'New Data Product' from the top menu.\n4.  Provide your project ID - this can only contain alphanumeric characters and underscores.\n5.  Name your project.\n6.  Provide a description for your project. This is useful if you are collaborating to provide context to other users.\n7.  Select 'Create New Data Product' button.\n\n![how to create a project in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/new-data-product.png)\n\nYour project is created and you can now start working with it. To access it at any time, select the project from the list of projects on left of the dashboard."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to create a project with TerminusCMS",
      "description": "A how-to guide showing you how to create a new project using the TerminusCMS dashboard",
      "og_image": "https://assets.terminusdb.com/docs/new-data-product.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "how to create a project in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "how to create a project in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/new-data-product.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Invite Users to Your Team"
    },
    "slug": "invite-users-using-terminuscms",
    "body": {
      "@type": "Body",
      "value": "To invite team members and manage the team, do the following:\n\n1.  Click the arrow next to your profile icon in the top right corner.\n2.  Select 'Team Members'.\n3.  In the following screen, select 'Invite a Member'.\n![add a new user to your team](https://assets.terminusdb.com/docs/manage-your-projects-add-a-new-user.png)5.  In the pop-up window, enter the user’s email address and select one of the following access permissions - \\_this will be applied to team-level permissions so will apply to all data products within your team. If you want to only give read-write access to a specific data product, it makes sense to give the user low-level permissions and assign higher permissions for that data product only - we will explain this next\n\n*   Admin - can add and remove users and permissions and has total access to data products.\n*   Collaborator - Able to access data products.\n*   Data Updater - Read and write access to data products.\n*   Data Reader - Read-only access to data products.\n*   Info Reader - Schema-level access but not data-level access.\n\n7.  The user will be sent an email with a link they need to click (if they don’t receive it, tell them to check their spam folder).\n8.  When the user has accepted the invitation, their details will display within the Team Members section.\n\n### **Editing & Removing Users**\n\nTo edit the role given to a user:\n\n1.  Navigate to the Team Members section from the profile dropdown.\n2.  Find the user to change from the list and click on the second icon.\n3.  From the pop-up window, select the new role to give them.\n\nTo delete a user from a team, do the same as above, but select the third icon in red.\n\n> Hover over the icons for information about what they do.\n\n### **Granular Permissions**\n\nGrant different permissions for different data products/projects. To do this do the following:\n\n1.  Navigate to the Team Members section from the profile dropdown.\n2.  Find the user to add specific data product permissions for and click on the first icon.\n3.  The resulting table below will list all of the data products in the team.\n4.  Choose the data product to change the user’s role for by clicking on the edit permissions icon.\n5.  Choose from the list of permissions\n\n> Users can only have permissions higher than the team permissions, so if someone needs read/write permissions for only one data product, ensure that the team permissions are set at a lower level.\n\n## Manage Access Control with the JS Client\n\n[JS Client Access Control Reference Guide](/docs/js-client-access-control-reference/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to invite team members to TerminusCMS",
      "description": "A how-to guide for inviting collaborators to your team using the TerminusCMS dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/manage-your-projects-add-a-new-user.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "add a new user to your team",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "add a new user to your team"
        },
        "value": "https://assets.terminusdb.com/docs/manage-your-projects-add-a-new-user.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Get your API key from TerminusCMS"
    },
    "slug": "get-your-api-key-from-terminuscms",
    "body": {
      "@type": "Body",
      "value": "### Generate your API key\n\nTo use the Python or JavaScropt client with TerminusCMS, an API key is required. The API key is obtained in the TerminusCMS dashboard by using the steps below.\n\n**1\\. Log in**\n\nLog in to the user interface dashboard [dashboard.terminusdb.com](https://dashboard.terminusdb.com)\n\n**2\\. Select a Team**\n\nThe teams are listed in the centre of the screen after logging in (and selecting a plan if you have not already done so). This will be the team in which the API key will be generated.\n\n**3\\. Select your profile**\n\nSelect your `Profile` by clicking on ▼ at the top-right corner of the screen.\n\n**4\\. Generate a Personal Access Token**\n\nEnter a description in `Add a Token Description` then click `Generate New Token`. Copy the token generated.\n\n**5\\. Copy the required code snippet**\n\nSelect the `Python` or `JavaScript` tab then copy the code snippet.\n\n### Set up your environment\n\nAssign your token to the environment variable `TERMINUSDB_ACCESS_TOKEN` in your code snippet. The example below is in `bash`.\n\n#### Code: API key environment configuration\n\n```\nexport TERMINUSDB_ACCESS_TOKEN=\"my API key here\"\n```\n\nYou are now ready to start with a client -\n\n[Connect to JavaScript Client](/docs/connect-with-the-javascript-client/)\n\n[Connect to Python Client](/docs/connect-with-python-client/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to get your API key using TerminusCMS",
      "description": "A how-to guide showing how to get your API key to set up and configure your environment to use with a client.",
      "og_image": "https://assets.terminusdb.com/docs/get-your-api-key.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Query TerminusCMS and TerminusDB"
    },
    "slug": "how-to-query",
    "body": {
      "@type": "Body",
      "value": "[GraphQL Query](/docs/how-to-query-with-graphql/)[WOQL Query](/docs/how-to-query-with-woql/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Query TerminusCMS and TerminusDB",
      "description": "Guides showing how to query using GraphQL and WOQL",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Query with GraphQL"
    },
    "slug": "how-to-query-with-graphql",
    "body": {
      "@type": "Body",
      "value": "[GraphQL Basics](/docs/graphql-basics/)[GraphQL Filter](/docs/filter-with-graphql/)[GraphQL Advanced Filter](/docs/advanced-filtering-with-graphql/)[GraphQL Limit](/docs/limit-results-in-graphql/)[GraphQL Order By](/docs/order-by-in-graphql/)[GraphQL Offset](/docs/offset-to-provide-paging/)[GraphQL Path Queries](/docs/path-queries-in-graphql/)[GraphQL Back Links](/docs/back-links-in-graphql/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Query with GraphQL",
      "description": "Bit sized how to guides for querying TerminusCMS and TerminusDB with GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Query with GraphQL"
    },
    "slug": "graphql-basics",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n![Clone a demo project from the dashboard](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)\n\nOnce you have cloned the database, go to the GraphQL icon (triangle in hexagon) on the left hand side and select the filing cabinet icon.\n\n![GraphQL query playground](https://assets.terminusdb.com/docs/how-to-query-graphql.png)\n\nNow you have two panels, one on the left for query, and one on the right for results.\n\n## Entering a query\n\nFirst type `query{` into the query panel. It should look like this:\n\n```\nquery{\n   █\n}\n```\n\nIf at the cursor point you type: `Ctrl-c` you'll get a list of options you can choose from. These options are legal GraphQL syntax according to your provided schema. Let's search for people from the Star Wars universe.\n\n```\nquery{\n   People{\n      label\n   }\n}\n```\n\nThe `label` property in this schema, supplies the name of the person we are interested in. Of course this query might give us a bit too much, so let us also limit it.\n\n```\nquery{\n   People(limit: 5){\n      label\n   }\n}\n```\n\nThis should result in:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\"\n      },\n      {\n        \"label\": \"Obi-Wan Kenobi\"\n      },\n      {\n        \"label\": \"Anakin Skywalker\"\n      },\n      {\n        \"label\": \"Wilhuff Tarkin\"\n      },\n      {\n        \"label\": \"Chewbacca\"\n      }\n    ]\n  }\n}\n```\n\nTo get more fields in our query, we can just add words, using `Ctrl-c` if we are stuck for names of fields.\n\n```\nquery{\n   People(limit: 5){\n      label\n   }\n}\n```\n\nWhen following links to other objects, we have to embed a query inside our query. So, for instance, if we want to know the homeworld that each of these people come from we can write:\n\n```\nquery{\n   People(limit: 2){\n      label\n      homeworld{\n        label\n      }\n   }\n}\n```\n\nThis will get us:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Obi-Wan Kenobi\",\n        \"homeworld\": {\n          \"label\": \"Stewjon\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## Paging\n\nIf we want to page the results, we can also add an offset to our query, and we'll get _the next_ results.\n\n```\nquery{\n   People(limit: 2, offset:2){\n      label\n      homeworld{\n        label\n      }\n   }\n}\n```\n\nAnd now we get two more:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Anakin Skywalker\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Wilhuff Tarkin\",\n        \"homeworld\": {\n          \"label\": \"Eriadu\"\n        }\n      }\n    ]\n  }\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Learn the GraphQL Basics for TerminusCMS",
      "description": "Learn to query TerminusDB and TerminusCMS using GraphQL and a Star Wars data project that you can clone from the dashboard.",
      "og_image": "https://assets.terminusdb.com/docs/graphqll-basics.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone a demo project from the dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone a demo project from the dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      },
      {
        "@type": "Media",
        "alt": "GraphQL query playground",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphQL query playground"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-query-graphql.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Filter with GraphQL"
    },
    "slug": "filter-with-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Using a Filter\n\nOnce you have Star Wars, you can enter into the data product and you can type the following in the [GraphQL query panel](/docs/graphql-basics/):\n\nLet's choose `homeworld`\n\n```\nquery{\n   People(filter: { label : { █ }}){\n\n   }\n}\n```\n\nType `Ctrl-c` and you'll be given some filters which can be used to constrain the label field.\n\nLet's choose a regex which demonstrates the fondness the creators of Star Wars had for the 'oo' sound.\n\n```\nquery{\n   People(filter:{ label : {regex: \".*oo.*\"}}){\n      label\n      homeworld{\n        label\n      }\n   }\n}\n```\n\nThis results in:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Roos Tarpals\",\n        \"homeworld\": {\n          \"label\": \"Naboo\"\n        }\n      },\n      {\n        \"label\": \"Yarael Poof\",\n        \"homeworld\": {\n          \"label\": \"Quermia\"\n        }\n      },\n      {\n        \"label\": \"Plo Koon\",\n        \"homeworld\": {\n          \"label\": \"Dorin\"\n        }\n      },\n      {\n        \"label\": \"Dooku\",\n        \"homeworld\": {\n          \"label\": \"Serenno\"\n        }\n      },\n      {\n        \"label\": \"Sly Moore\",\n        \"homeworld\": {\n          \"label\": \"Umbara\"\n        }\n      }\n    ]\n  }\n}\n```\n\nFor more sophisticated filtering, see [Advanced filtering](/docs/advanced-filtering-with-graphql/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Filter",
      "description": "Filter with GraphQL",
      "og_image": "https://github.com/terminusdb/terminusdb-web-assets/blob/master/docs/graphql-filter.png?raw=true"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Advanced Filtering with GraphQL"
    },
    "slug": "advanced-filtering-with-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\nTerminusDB exposes a _filter_ object, which can be used to select specific documents. See here for basic [Filtering](/docs/filter-with-graphql/)\n\nNow we can filter the homeworld of the people we are interested in. We will use a `regex` because Tatooine is hard to spell.\n\n```\nquery{\n   People(filter: { homeworld: { label: { regex : \"Tat.*\" }}}){\n     label\n     homeworld{\n       label\n     }\n   }\n}\n```\n\nYou can also find out what fields are available with the same `Ctrl-c` trick. Now, fire off the query above, and you'll see something like:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Anakin Skywalker\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"C-3PO\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Darth Vader\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Shmi Skywalker\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Owen Lars\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Cliegg Lars\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Beru Whitesun lars\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"R5-D4\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      },\n      {\n        \"label\": \"Biggs Darklighter\",\n        \"homeworld\": {\n          \"label\": \"Tatooine\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## Adding conjunctions\n\nWe can also add other elements to the filter, by using the `_and` keyword. This requires that both filters are true.\n\n```\nquery{\n  People(filter:{ _and : [ {homeworld : {label : {eq : \"Coruscant\"}}},\n                           {species : {label : { eq: \"Human\"}}},\n                         ]}){\n    label\n    species{\n      label\n    }\n    homeworld{\n      label\n    }\n  }\n}\n```\n\nWhich yields:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Finis Valorum\",\n        \"species\": {\n          \"label\": \"Human\"\n        },\n        \"homeworld\": {\n          \"label\": \"Coruscant\"\n        }\n      },\n      {\n        \"label\": \"Jocasta Nu\",\n        \"species\": {\n          \"label\": \"Human\"\n        },\n        \"homeworld\": {\n          \"label\": \"Coruscant\"\n        }\n      }\n    ]\n  }\n}\n```\n\n## `_not` and `_or`\n\nYou can also use `_not` and `_or` keywords to create even more complex filters. To find all species, excluding droids with a lifespan greater than 500 who don't have a typical sort of skin colour, you can write the following:\n\n```\n{\n  Species(\n    filter: {_and : [\n      {_not :{label:{eq:\"Droid\"}}},\n      {_or :[\n        {average_lifespan:{gt : \"500\"}},\n        {_not:\n              {skin_colors:\n                {anyOfTerms: [\"blue\", \"black\", \"white\", \"green\", \"grey\"\n                              \"brown\", \"red\", \"gray\"]}}}]\n      }]}\n  ) {\n    label\n  }\n}\n```\n\nAnd yields:\n\n```\n{\n  \"data\": {\n    \"Species\": [\n      {\n        \"label\": \"Yoda's species\"\n      },\n      {\n        \"label\": \"Pau'an\"\n      },\n      {\n        \"label\": \"Hutt\"\n      },\n      {\n        \"label\": \"Sullustan\"\n      },\n      {\n        \"label\": \"Cerean\"\n      },\n      {\n        \"label\": \"Iktotchi\"\n      },\n      {\n        \"label\": \"Tholothian\"\n      }\n    ]\n  }\n}\n```\n\n## A Bit of GraphQL theory\n\nThe filter is defined as part of the query for objects. If we look at the `People` query in the Star Wars demo we see the following:\n\n```\ntype Query {\n  People(\n    id: ID\n    ids: [ID!]\n\n    \"\"\"skip N elements\"\"\"\n    offset: Int\n\n    \"\"\"limit results to N elements\"\"\"\n    limit: Int\n    filter: People_Filter\n\n    \"\"\"order by the given fields\"\"\"\n    orderBy: People_Ordering\n  ): [People!]!\n}\n```\n\nThis query exposes a `filter` argument, with the type of `People_Filter`.\n\nA `People_Filter` in turn looks like:\n\n```\ninput People_Filter {\n  birth_year: StringFilter\n  created: DateTimeFilter\n  desc: CollectionStringFilter\n  edited: DateTimeFilter\n  eye_color: StringFilter\n  film: Film_Collection_Filter\n  gender: StringFilter\n  hair_colors: StringFilter\n  height: StringFilter\n  homeworld: Planet_Filter\n  label: StringFilter\n  mass: StringFilter\n  skin_colors: StringFilter\n  species: Species_Filter\n  starship: Starship_Collection_Filter\n  url: StringFilter\n  vehicle: Vehicle_Collection_Filter\n  _and: [People_Filter!]\n  _or: [People_Filter!]\n  _not: People_Filter\n}\n```\n\nIn this way we can recursively qualify all of the objects to which a `People` might point to, terminating at leaves that use the various concrete type filters.\n\nFor instance, the `StringFilter` looks like:\n\n```\ninput StringFilter {\n  eq: String\n  ne: String\n  lt: String\n  le: String\n  gt: String\n  ge: String\n  regex: String\n  startsWith: String\n  allOfTerms: [String!]\n  anyOfTerms: [String!]\n}\n```\n\nWe can specify any of these operands to narrow down our search. For more information on the operations against concrete datatypes, see the [GraphQL Reference](/docs/graphql-query-reference/) section."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Advanced Filtering",
      "description": "Advanced Filtering with GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/graphql-advanced-filter.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Limit Results with GraphQL"
    },
    "slug": "limit-results-in-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n![Clone the Star Wars demo from the TerminusCMS dashboard](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)\n\nOnce you have cloned the database, go to the GraphQL icon (triangle in hexagon) on the left hand side and select the filing cabinet icon.\n\n![GraphQL query playground in TerminusCMS](https://assets.terminusdb.com/docs/how-to-query-graphql.png)\n\nThere are two panels, one on the left for query, and one on the right for results.\n\n## Adding a limit\n\nThe `limit` keyword is an argument which can be passed to a query to restrict the number of results to precisely the number supplied by the argument.\n\nFor instance we can get exactly 5 people from the Star Wars universe by specifying the query here:\n\n```\nquery{\n   People(limit: 5){\n      label\n   }\n}\n```\n\nThis will result in\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\"\n      },\n      {\n        \"label\": \"Obi-Wan Kenobi\"\n      },\n      {\n        \"label\": \"Anakin Skywalker\"\n      },\n      {\n        \"label\": \"Wilhuff Tarkin\"\n      },\n      {\n        \"label\": \"Chewbacca\"\n      }\n    ]\n  }\n}\n```\n\nIf you want to page, to get the next results, you can use an [offset](/docs/offset-to-provide-paging/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Limit Results with GraphQL in TerminusCMS",
      "description": "How to use limit to limit query results with GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/graphql-limit.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone the Star Wars demo from the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone the Star Wars demo from the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      },
      {
        "@type": "Media",
        "alt": "GraphQL query playground in TerminusCMS",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphQL query playground in TerminusCMS"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-query-graphql.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Order By in GraphQL"
    },
    "slug": "order-by-in-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Ordering results of a GraphQL query\n\nBy default, results in GraphQL will choose an implementation specific order which may not even be stable between invocations. If you need results in a _specific order_ then you need to supply an `orderBy` argument.\n\nWe can search for the names of people in reverse alphabetical order such that we only recover the first 5 results in the following way:\n\n```\nquery{\n   People(limit:5, orderBy:{label:DESC}){\n    label\n  }\n}\n```\n\nThis will give us the following people:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Zam Wesell\"\n      },\n      {\n        \"label\": \"Yoda\"\n      },\n      {\n        \"label\": \"Yarael Poof\"\n      },\n      {\n        \"label\": \"Wilhuff Tarkin\"\n      },\n      {\n        \"label\": \"Wicket Systri Warrick\"\n      }\n    ]\n  }\n}\n```\n\nOrder by can also take more than one argument, allowing us to order on more than one value using the remaining arguments when there is a tie in the preceding (lexicographic ordering).\n\nWe can see this by searching for species, and which language they speak and their name. Since many will share the same language, we can see the ordering of the fields independently.\n\n```\nquery{\n   Species(offset:8, limit:5, orderBy:{language:ASC, label:ASC}){\n    label\n    language\n  }\n}\n```\n\nAnd here we have a number of Galactic Basic speakers who nevertheless are ordered by species name.\n\n```\n{\n  \"data\": {\n    \"Species\": [\n      {\n        \"label\": \"Ewok\",\n        \"language\": \"Ewokese\"\n      },\n      {\n        \"label\": \"Human\",\n        \"language\": \"Galactic Basic\"\n      },\n      {\n        \"label\": \"Rodian\",\n        \"language\": \"Galactic Basic\"\n      },\n      {\n        \"label\": \"Yoda's species\",\n        \"language\": \"Galactic basic\"\n      },\n      {\n        \"label\": \"Geonosian\",\n        \"language\": \"Geonosian\"\n      }\n    ]\n  }\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Order By GraphQL Queries in TerminusCMS",
      "description": "How to use the order by argument in GraphQL queries with TerminusCMS and TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/graphql-order-by.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Offset to Provide Paging"
    },
    "slug": "offset-to-provide-paging",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n![Clone the Star Wars demo from the TerminusCMS dashboard](https://assets.terminusdb.com/docs/how-to-clone-a-demo.png)\n\nOnce you have cloned the database, go to the GraphQL icon (triangle in hexagon) on the left hand side and select the filing cabinet icon.\n\n![GraphQL query playground in TerminusCMS](https://assets.terminusdb.com/docs/how-to-query-graphql.png)\n\nThere are two panels, one on the left for query, and one on the right for results.\n\n## Adding an offset\n\nThe `offset` keyword is most often used with the [limit](/docs/limit-results-in-graphql/) keyword which when used together enable paging of results.\n\nFor instance, we can get exactly 5 people from the star-wars universe by specifying the query here:\n\n```\nquery{\n   People(limit: 5){\n      label\n   }\n}\n```\n\nThis will result in\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\"\n      },\n      {\n        \"label\": \"Obi-Wan Kenobi\"\n      },\n      {\n        \"label\": \"Anakin Skywalker\"\n      },\n      {\n        \"label\": \"Wilhuff Tarkin\"\n      },\n      {\n        \"label\": \"Chewbacca\"\n      }\n    ]\n  }\n}\n```\n\nIf we then want to get the _next_ page of data we can write:\n\n```\nquery{\n   People(limit: 5, offset: 5){\n      label\n   }\n}\n```\n\nThis will result in:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Han Solo\"\n      },\n      {\n        \"label\": \"Greedo\"\n      },\n      {\n        \"label\": \"Jabba Desilijic Tiure\"\n      },\n      {\n        \"label\": \"Wedge Antilles\"\n      },\n      {\n        \"label\": \"Jek Tono Porkins\"\n      }\n    ]\n  }\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "GraphQL Offset to Provide Pagination",
      "description": "A guide showing how to use offset in GraphQL to provide pagination",
      "og_image": "https://assets.terminusdb.com/docs/graphql-offset.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "Clone the Star Wars demo from the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Clone the Star Wars demo from the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-clone-a-demo.png"
      },
      {
        "@type": "Media",
        "alt": "GraphQL query playground in TerminusCMS",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphQL query playground in TerminusCMS"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-query-graphql.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Path Queries in GraphQL"
    },
    "slug": "path-queries-in-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Using a Path Query\n\nSometimes we want to search for links that are not immediate, but need to follow a chain of links to get the object of interest. TerminusCMS gives us [path queries](/docs/path-query-reference-guide/) which allow us to succinctly express this.\n\nWe can find a path in GraphQL by using the `_path_to_CLASS` query, where CLASS is the name of one of our classes. One path should be populated for each of the available classes.\n\nTo find everyone who was in a film with Chewbacca, we can write:\n\n```\nquery{\n   People(filter:{label:{eq:\"Chewbacca\"}}){\n     label\n     _path_to_People(path:\"film,<film\"){\n       label\n    }\n  }\n}\n```\n\nThe `film` is the current film which the Chewbacca object points at. Then `<film` means follow _backwards_ to people on the film field.\n\nThis process can be repeated to find second order connections, as follows:\n\n```\nquery{\n   People(filter:{label:{eq:\"Chewbacca\"}}){\n     label\n     _path_to_People(path:\"(film,<film){1,2}\"){\n       label\n    }\n  }\n}\n```\n\nThis says that we should repeat the process one or two times before terminating.\n\nMore complex patterns can be built using the full [path query syntax](/docs/path-query-reference-guide/) described in our documentation."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to perform path queries with GraphQL",
      "description": "How to do path queries on TerminusDB and TerminusCMS data products using GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/graphql-path-query.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Back Links in GraphQL"
    },
    "slug": "back-links-in-graphql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Using a Back Link\n\nMany times when we are looking at an object, we are interested in which objects are pointing to it. In TerminusCMS each object gets a number of extended queries which allows one to discover any objects which point at that object.\n\nOnce you have cloned the Star Wars demo, go to the [GraphQL query panel](/docs/graphql-basics/) and type:\n\n```\nquery{\n  People(limit:1) {\n      █\n  }\n}\n```\n\nWe would like to find the first person in the database, and then find out which starships they are the pilot of. A `Starship` has a `pilot` field, and the backlink is automatically constructed as the `pilot_of_Starship` by TerminusCMS.\n\n```\nquery{\n   People(limit:1){\n     label\n     _pilot_of_Starship{\n      label\n    }\n  }\n}\n```\n\nThis _back link_ will give us back the following:\n\n```\n{\n  \"data\": {\n    \"People\": [\n      {\n        \"label\": \"Luke Skywalker\",\n        \"_pilot_of_Starship\": [\n          {\n            \"label\": \"X-wing\"\n          },\n          {\n            \"label\": \"Imperial shuttle\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nBacklinking allows us to focus on modeling our data in a natural way, while still allowing us to follow the graph in either direction of a field or its opposite without bias."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Back Links",
      "description": "Back Links in GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/graphql-backlink.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Query with WOQL"
    },
    "slug": "how-to-query-with-woql",
    "body": {
      "@type": "Body",
      "value": "[WOQL Basics](/docs/woql-basics/)[WOQL Add Docs](/docs/add-documents-with-woql/)[WOQL Edit Docs](/docs/edit-documents-with-woql/)[WOQL Delete Docs](/docs/delete-documents-with-woql/)[WOQL Read Docs](/docs/read-documents-with-woql/)[WOQL Filter](/docs/filter-with-woql/)[WOQL Order By](/docs/order-by-with-woql/)[WOQL Query Arrays](/docs/query-arrays-and-sets-in-woql/)[WOQL Group Results](/docs/group-query-results/)[WOQL Path Queries](/docs/path-queries-in-woql/)[WOQL Math Queries](/docs/maths-based-queries-in-woql/)[WOQL Schema Queries](/docs/schema-queries-with-woql/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Query with WOQL",
      "description": "Bite sized how to guides to query TerminusCMS and TerminusDB using WOQL",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "WOQL Basics"
    },
    "slug": "woql-basics",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Writing a WOQL Query\n\n![WOQL query playground in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/how-to-query-woql.png)\n\nFirst, go to the WOQL Query Panel in the UI. Now you can type a query using the syntax of the JS client in the panel.\n\nQueries are composed of variables, names, words and values.\n\nLets start with a simple query which just looks at one field.\n\nWe need to describe which variables we want to use, and we do that with `Vars`.\n\nNext we add the `limit` word, to limit to 10 entries.\n\nThen we complete the query with a `triple` word, using the `source` variable, the `label` field, and the `destination` variable.\n\n```javascript\nlet v = Vars(\"source\", \"destination\");\nlimit(10).triple(v.source, 'label', v.destination)\n```\n\nThe results will come back in a table below in the UI. In the client it will return as a list of JSON objects, having each of the variables described in `Vars` bound.\n\nThe `destination` variable is filled with elements of type _string_, because `label` always terminates in a string. However we can also add other fields to our object, to search for more information by chaining `triple` together.\n\n```javascript\nlet v = Vars(\"person\", \"eyes\", \"name\");\nlimit(5)\n  .triple(v.person, 'label', v.name)\n  .triple(v.person, 'eye_color', v.eyes)\n```\n\nThis query results in the following:\n\nName\n\nEyes\n\nPerson\n\nLuke Skywalker\n\nblue\n\nPeople/1\n\nObi-Wan Kenobi\n\nblue-gray\n\nPeople/10\n\nAnakin Skywalker\n\nblue\n\nPeople/11\n\nWilhuff Tarkin\n\nblue\n\nPeople/12\n\nChewbacca\n\nblue\n\nPeople/13\n\n## and\n\nThe `.` syntax is actually introducing an implicit `and` between `triple` words. We can rewrite our query above as:\n\n```javascript\nlet v = Vars(\"person\", \"eyes\", \"name\");\nlimit(5)\n  .and(triple(v.person, 'label', v.name),\n       triple(v.person, 'eye_color', v.eyes))\n```\n\n## select\n\nSince we probably do not really need the `person` variable, as it is an id, and we are just using it to make sure we are talking about the _same_ person in both triples, we can use `select` to remove it.\n\n```javascript\nlet v = Vars(\"person\", \"eyes\", \"name\");\nlimit(5)\n  .select(v.name, v.eyes)\n  .and(triple(v.person, 'label', v.name),\n       triple(v.person, 'eye_color', v.eyes))\n```\n\nNow we get back the table with the `person` column removed."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Learn the WOQL query basics for TerminusDB and TerminusCMS",
      "description": "A guide to show  the WOQL query basics in TerminusDB and TerminusCMS.",
      "og_image": "https://assets.terminusdb.com/docs/woql-basics.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "WOQL query playground in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "WOQL query playground in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-query-woql.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Add a document in WOQL"
    },
    "slug": "add-documents-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## Add a document in WOQL\n\nYou can add a document in WOQL using the `insert_document` keyword.\n\n```javascript\nlet v = Vars(\"id\");\ninsert_document(doc({'@type' : 'Planet', label: 'Planet-X'}), v.id)\n```\n\nWe can also add documents by using a variable. For instance, we can create a new planet for each individual in the star wars universe as follows:\n\n```javascript\nlet v = Vars(\"person\", \"name\");\nand(isa(v.person, \"People\"),\n    triple(v.person,\"label\",v.name),\n    insert_document(doc({'@type' : 'Planet', label: v.name})))\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to add documents using WOQL",
      "description": "A how-to guide  with an example showing how to add documents using a WOQL query.",
      "og_image": "https://assets.terminusdb.com/docs/woql-add-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Edit documents in WOQL"
    },
    "slug": "edit-documents-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\nWe can get a document by Id, by using `read_document`. For instance, we can write:\n\n```javascript\nlet v = Vars(\"doc\", \"id\");\nand(isa(v.id, \"People\"),\n    triple(v.id, \"label\", string(\"Bossk\")),\n    read_document(v.id, v.doc))\n```\n\nWe can also add documents by using a variable. For instance, we can create a new planet for each individual in the star wars universe as follows:\n\n```javascript\nlet v = Vars(\"person\", \"name\");\nand(isa(v.person, \"People\"),\n    triple(v.person,\"label\",v.name),\n    insert_document(doc({'@type' : 'Planet', label: v.name})))\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Edit Documents using WOQL",
      "description": "A guide with example showing how to edit documents using WOQL",
      "og_image": "https://assets.terminusdb.com/docs/woql-edit-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Delete a document in WOQL"
    },
    "slug": "delete-documents-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have access to the data needed for this tutorial.\n\nDeleting a document in WOQL is possible using the `delete_document` keyword.\n\nFirst, let's insert a document.\n\n```javascript\nlet v = Vars(\"id\");\ninsert_document(doc({'@type' : 'Planet', label: 'Planet-X'}), v.id)\n```\n\nSupposing we get back the following:\n\n```\n\"Planet/01dd97a75800f01f43ab7ab55b6dd08f198dd34d2bdbbeeb7bf4edee45111863\"\n```\n\nNow we can delete it with the following:\n\n```\ndelete_document(\"Planet/01dd97a75800f01f43ab7ab55b6dd08f198dd34d2bdbbeeb7bf4edee45111863\")\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to delete documents using WOQL",
      "description": "A how-to guide showing how to construct a WOQL query to delete documents.",
      "og_image": "https://assets.terminusdb.com/docs/woql-delete-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Read documents with WOQL"
    },
    "slug": "read-documents-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have access to the data needed for this tutorial.\n\nYou can read a document after finding the document id as follows:\n\n```javascript\nlet v = Vars(\"doc\", \"id\");\nand(isa(v.id, \"People\"),\n    triple(v.id, \"label\", string(\"Bossk\")),\n    read_document(v.id, v.doc))\n```\n\nThis find a `People` document, makes sure it has the label `\"Boosk\"` and then reads the document into the variable `doc`."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Read Documents in WOQL - TerminusDB\n",
      "description": "A guide to show how to read documents with WOQL in your TerminusDB and TerminusCMS projects.",
      "og_image": "https://assets.terminusdb.com/docs/woql-read-documents.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Writing a filter in WOQL"
    },
    "slug": "filter-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have access to the data needed for this tutorial.\n\nSince WOQL is a datalog, filters are just part of the query. You can express negative information, or constraints on the variables in order to get a restriction down to the things you want.\n\nFor instance, we can write the following query in the query panel for the Star Wars demo:\n\n```javascript\nlet v = Vars(\"person\",\"person_name\",\"vehicle\",\"vehicle_name\");\nlimit(10)\n.select(v.person_name, v.vehicle_name)\n  .and(triple(v.vehicle, \"pilot\", v.person),\n       triple(v.vehicle, \"label\", v.vehicle_name),\n       triple(v.person, \"label\", v.person_name))\n```\n\nThis results in:\n\n```\n[ {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Chewbacca\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Han Solo\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Lando Calrissian\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Nien Nunb\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Luke Skywalker\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"X-wing\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Wedge Antilles\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"X-wing\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Jek Tono Porkins\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"X-wing\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Biggs Darklighter\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"X-wing\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Darth Vader\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"TIE Advanced x1\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Boba Fett\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Slave 1\"}}\n]\n```\n\nWe can ask for a _specific_ example of a vehicle name by filtering on equality.\n\nFor instance:\n\n```javascript\nlet v = Vars(\"person\",\"person_name\",\"vehicle\",\"vehicle_name\");\nselect(v.person_name, v.vehicle_name)\n  .and(triple(v.vehicle, \"pilot\", v.person),\n       triple(v.vehicle, \"label\", v.vehicle_name),\n       triple(v.person, \"label\", v.person_name),\n       eq(v.vehicle_name, string(\"Millennium Falcon\")))\n```\n\nWhich results in:\n\n```\n[ {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Chewbacca\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Han Solo\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Lando Calrissian\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Nien Nunb\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"Millennium Falcon\"}}\n]\n```\n\nWe can also write:\n\n```javascript\nlet v = Vars(\"person\",\"person_name\",\"vehicle\",\"vehicle_name\");\nselect(v.person_name, v.vehicle_name)\n  .and(triple(v.vehicle, \"pilot\", v.person),\n       triple(v.vehicle, \"label\", v.vehicle_name),\n       triple(v.person, \"label\", v.person_name),\n       not(eq(v.vehicle_name, string(\"Millennium Falcon\"))))\n```\n\nIn which we get the complement of the above.\n\nOr, we can use the regex operator to get a wider variety, for instance:\n\n```javascript\nlet v = Vars(\"person\",\"person_name\",\"vehicle\",\"vehicle_name\",\"pattern\");\nselect(v.person_name, v.vehicle_name)\n  .and(triple(v.vehicle, \"pilot\", v.person),\n       triple(v.vehicle, \"label\", v.vehicle_name),\n       triple(v.person, \"label\", v.person_name),\n       regex(\"W.*\", v.vehicle_name, [v.pattern]))\n```\n\nIn this case, we get the following back in JSON format:\n\n```\n[ {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Darth Vader\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"TIE Advanced x1\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Arvel Crynyd\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"A-wing\"}},\n  {\"person_name\": {\"@type\":\"xsd:string\", \"@value\":\"Chewbacca\"},\n   \"vehicle_name\": {\"@type\":\"xsd:string\", \"@value\":\"AT-ST\"}}\n]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to filter with WOQL",
      "description": "A guide showing how to filter with WOQL in your TerminusCMS and TerminusDB projects ",
      "og_image": "https://assets.terminusdb.com/docs/woql-filter.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Order Results in WOQL"
    },
    "slug": "order-by-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have access to the data needed for this tutorial.\n\n## Ordering results using `order_by`\n\nThe `order_by` keyword will allow you to sort results.\n\n```javascript\nlet v = Vars(\"person\", \"label\", \"eyes\", \"group\");\nlimit(2)\n.order_by([\"eyes\", \"desc\"])\n.select(v.eyes, v.group)\n.group_by(\n  \"eyes\",\n  [\"label\"],\n  v.group,\n  and(triple(v.person, \"rdf:type\", \"@schema:People\"),\n      triple(v.person, \"label\", v.label),\n      triple(v.person, \"eye_color\", v.eyes)))\n```\n\nThis returns the first two results of people, who have a given eye color, sorted by eye color, in reverse order.\n\nTo get the alternative order, you can write:\n\n```javascript\nlet v = Vars(\"person\", \"label\", \"eyes\", \"group\");\nlimit(2)\n.order_by([\"eyes\", \"asc\"])\n.select(v.eyes, v.group)\n.group_by(\n  \"eyes\",\n  [\"label\"],\n  v.group,\n  and(triple(v.person, \"rdf:type\", \"@schema:People\"),\n      triple(v.person, \"label\", v.label),\n      triple(v.person, \"eye_color\", v.eyes)))\n```\n\nOr simply:\n\n```javascript\nlet v = Vars(\"person\", \"label\", \"eyes\", \"group\");\nlimit(2)\n.order_by(\"eyes\")\n.select(v.eyes, v.group)\n.group_by(\n  \"eyes\",\n  [\"label\"],\n  v.group,\n  and(triple(v.person, \"rdf:type\", \"@schema:People\"),\n      triple(v.person, \"label\", v.label),\n      triple(v.person, \"eye_color\", v.eyes)))\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Order Results in WOQL - TerminusDB",
      "description": "A guide to show you how to order results using order_by in WOQL.",
      "og_image": "https://assets.terminusdb.com/docs/woql-order-by.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Query Arrays and Sets with WOQL"
    },
    "slug": "query-arrays-and-sets-in-woql",
    "body": {
      "@type": "Body",
      "value": "In TerminusDB there are a number of collection types, including `List`, `Set`, and `Array`.\n\nWhile these all generate JSON lists through the document interface, they have different semantics due to their different realisation in the graph.\n\n## Sets\n\nSets are the simplest objects in TerminusDB. They are simply edges with the same name that leads to more than one object.\n\nFor instance, an example of the document:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"name\" : \"xsd:string\",\n  \"friends\" : { \"@type\" : \"Set\", \"@class\" : \"Person\" }\n}\n```\n\nTo search for the results of friends in WOQL, we can simply use `triple`.\n\n```javascript\nlet v = Vars(\"id\", \"friend\")\ntriple(v.id, \"friends\", v.friend)\n```\n\nIf you want to get back the values in a specific order, you can use an `order_by` clause.\n\n## Lists\n\nTo search a list of objects, you need to traverse the intermediate _cons cells_. The list is actually a graph structure shaped like:\n\n```\n∘ → ∘ rest→ ∘ rest→ ∘ rest→ rdf:nil\n    ↓ first ↓ first ↓ first\n    v0      v1      v2\n```\n\nThis can be traversed using a [path query](/docs/query-arrays-and-sets-in-woql/) as follows:\n\n```javascript\nlet v = Vars(\"queue\", \"person\")\npath(v.queue, \"contacts,rdf:rest*,rdf:first\", v.person)\n```\n\n## Arrays\n\nTo search an array, you can use select, and group by.\n\n```javascript\nlet v = Vars(\"queue\", \"arr\", \"person\", \"index\")\norder_by(v.index)\n     .select(v.queue, v.person, v.index)\n     .and(triple(v.queue, \"contacts\", v.arr),\n          triple(v.arr, \"sys:index\", v.index),\n          triple(v.arr, \"sys:value\", v.person))\n```\n\nThis will give you back the array value (a person) as well as the index in the array, in order."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Query Arrays and Sets with WOQL - TerminusDB",
      "description": "A guide to show how to query arrays and sets with WOQL in your TerminusDB and TerminusCMS projects.",
      "og_image": "https://assets.terminusdb.com/docs/woql-query-arrays-sets.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Group Results in WOQL"
    },
    "slug": "group-query-results",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## How to use Group By\n\nIf we need to group variables according to some criteria, we can create an aggregate of solutions using `group_by`.\n\nA group by is composed of a _focus_, a _template_, and a _group_ together with a query.\n\nWe will demonstrate this with the following query:\n\n```javascript\nlet v = Vars(\"person\", \"label\", \"eyes\", \"group\");\nlimit(1)\n.group_by(\n  \"eyes\",\n  [\"label\"],\n  v.group,\n  and(triple(v.person, \"rdf:type\", \"@schema:People\"),\n      triple(v.person, \"label\", v.label),\n      triple(v.person, \"eye_color\", v.eyes)))\n```\n\nThe first argument, here `\"eyes\"` refers to the eyes variable, and is the variable around which to form the group, the _focus_.\n\nThe second `[\"label\"]` is the _template_, which refers to the variable `\"label\"`. The template will be those things grouped under the first variable.\n\nThe third variable `v.group`, is the _group_ variable, which will include groups of templates for each set of solutions which shares a _focus_.\n\nThis raw query output will be:\n\n```\n{\n    \"eyes\": {\n        \"@type\": \"xsd:string\",\n        \"@value\": \"black\"\n    },\n    \"group\": [\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Greedo\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Nien Nunb\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Gasgano\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Kit Fisto\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Plo Koon\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Lama Su\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Taun We\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Shaak Ti\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"Tion Medon\"\n        }],\n        [{\n            \"@type\": \"xsd:string\",\n            \"@value\": \"BB8\"\n        }]\n    ],\n    \"label\": null,\n    \"person\": null\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Group Results in WOQL",
      "description": "A guide to show how to group results of data in your TerminusCMS and TerminusDB projects using WOQL.",
      "og_image": "https://assets.terminusdb.com/docs/woql-group-query-results.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Path Queries in WOQL"
    },
    "slug": "path-queries-in-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have full access to the data needed for this tutorial.\n\n## How to use `path`\n\nTerminusCMS gives us [path queries](/docs/path-query-reference-guide/) which allow us to succinctly express chains of relationships.\n\nThe `path` keyword allows you to find a path through the graph traversing intermediate edges. An example would be finding a group of individuals who have at some point shared a vehicle as a pilot or piloted another vehicle that in turn was shared with someone. This is a _transitive_ relationship and will explore the entire graph.\n\nFor instance\n\n```javascript\nlet v = Vars(\"person1\", \"person2\");\npath(v.person1, \"(<pilot,pilot>)+\", v.person2)\n```\n\nThis `path` means we follow the `pilot` field _backwards_ (because of the `<` arrow), to the vehicle of which the person is a pilot and then follow it forwards `pilot>` any number of times _but at least once_ which is what the `+` means.\n\nThe path itself can also be returned by adding another field, as so:\n\n```javascript\nlet v = Vars(\"person1\", \"person2\", \"path\");\npath(v.person1, \"(<pilot,pilot>)+\", v.person2, v.path)\n```\n\nThis can be inspected to understand the manner in which we got from `person1` to `person2`."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to do Path Queries in WOQL - TerminusDB",
      "description": "A guide to show how to do path queries in WOQL for your TerminusCMS and TerminusDB projects.",
      "og_image": "https://assets.terminusdb.com/docs/woql-path-query.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Mathematical Operations in WOQL"
    },
    "slug": "maths-based-queries-in-woql",
    "body": {
      "@type": "Body",
      "value": "WOQL has a number of mathematical operations that can be performed. These include, `plus`, `minus`, `divide`, `times`, `div` (for integer division), `exp` and `floor`.\n\nTo use these operations you need to `evaluate` an arithmetic expression, and then you will be able to bind the result to a variable.\n\nFor instance:\n\n```javascript\nlet v = Vars(\"result\");\nevaluate(times(2,3), v.result)\n```\n\nThis will store the value of 2 times 3 in the variable `result`. The bindings which result from this query are:\n\n```\n[ {\"result\": {\"@type\":\"xsd:decimal\", \"@value\":12}} ]\n```\n\nYou can also chain these together, to build up more complicated computations, or use the results obtained by queries to derive new values.\n\n```javascript\nlet v = Vars(\"result1\", \"result2\");\nand(evaluate(times(2,3), v.result1),\n    evaluate(times(v.result1,3), v.result2))\n```\n\nWhich results in:\n\n```\n[ {\"result1\": {\"@type\":\"xsd:decimal\", \"@value\":6},\n   \"result2\": {\"@type\":\"xsd:decimal\", \"@value\":18}} ]\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Mathematical Operations in WOQL - TerminusDB",
      "description": "A guide to show how to how to perform mathematical operations using WOQL ",
      "og_image": "https://assets.terminusdb.com/docs/woql-maths-query.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Schema Queries with WOQL"
    },
    "slug": "schema-queries-with-woql",
    "body": {
      "@type": "Body",
      "value": "> To use this HowTo, first [clone the Star Wars demo](/docs/clone-a-demo-terminuscms-project/) into your team on TerminusCMS. You will then have access to the data needed for this tutorial.\n\n## Finding elements from the schema.\n\nIn order to query the schema, you can use _graph_ arguments to WOQL. TerminusCMS stores each branch as a pair of graphs, an instance graph and a schema graph.\n\nWe can specify the graph by passing it as an argument to the `quad` word.\n\nTo find all classes in the schema we can write:\n\n```javascript\nlet v = Vars(\"cls\");\nquad(v.cls, \"rdf:type\", \"sys:Class\", \"schema\")\n```\n\nThis results in:\n\ncls\n\n@schema:Film\n\n@schema:People\n\n@schema:Planet\n\n@schema:Species\n\n@schema:Starship\n\n@schema:Vehicle\n\nThe `@schema` denotes the default schema prefix, and makes it clear that this identifier lives in the schema name space rather than the data name space.\n"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Schema Queries with WOQL - TerminusDB",
      "description": "A guide to show how to query schema with WOQL in your TerminusDB and TerminusCMS projects.",
      "og_image": "https://assets.terminusdb.com/docs/woql-query-schema.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Curate & Import Data"
    },
    "slug": "curate-and-import-data",
    "body": {
      "@type": "Body",
      "value": "[Curate with Dashboard](/docs/use-the-admin-ui-curate-and-import-data/)[Import with Python](/docs/import-data-with-python-client/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to Curate & Import Data",
      "description": "How to guides for curating and importing data into TerminusCMS and TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Use the TerminusCMS Dashboard to Curate Data & Content"
    },
    "slug": "use-the-admin-ui-curate-and-import-data",
    "body": {
      "@type": "Body",
      "value": "The TerminusCMS dashboard features a data and content editing section called the Document Explorer. It is here where users can add, edit and delete content and data directly into the backend.\n\nIn this example, we've cloned the [Star Wars demo project](/docs/clone-a-demo-terminuscms-project/).\n\nFirst, select the Star Wars project (or an existing project of your own) and navigate to the document explorer section by selecting the third icon on the left, the document with a tick.\n\n![TerminusCMS document explorer to edit content via the UI](https://assets.terminusdb.com/docs/document-explorer-home.png)\n\nThe screen displays a list of documents that are included within the project's schema and the number of documents within the database. It also includes a list of the documents on the left with a `+` symbol to add a new one.\n\n## View and filter documents\n\nClick on film (from the left or on the main screen). This will produce a list of the Star Wars films.\n\nIf it is a long list, you can use the filter to narrow down the results. In this example, we have added a rule to filter the films using the director property of the document specifying it equals _George Lucas_.\n\n![Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard](https://assets.terminusdb.com/docs/document-explorer-filter-view.png)\n\nDepending on the property you filter by, you can use these filter parameters -\n\n*   Equals\n*   Does not equal\n*   Starts with\n*   Contains\n*   Greater than\n*   Greater than or equal to\n*   Less than\n*   Less than or equal to\n\nYou can also group filters to combine multiple properties.\n\nThere is also a GraphQL query tab that displays how the document can be queried and the structure of any filters applied.\n\nTo view a document, click on it from the table view. This will open up that document where you can edit it.\n\nEditing, adding, and deleting content and data will first create a change request.\n\n## Change Requests\n\nTo edit, add, or delete a document you must first create a change request. A change request creates a branch of the database at that moment and lets you make any changes to this branch, safely away from live data. This process happens automatically. When selecting to edit, add, or delete a document you will be prompted to open a change request.\n\nIn this example, we're going to add Even Piell, a character in The Phantom Menace, to the People documents. We choose either the plus next to `People` on the left, or select `Add new People` from the top right.\n\nYou will then be prompted with a popup.\n\n![create a new change request to make changes to content.](https://assets.terminusdb.com/docs/create-a-new-change-request.png)\n\nGive the change request and title and description. If you're working with others, provide a good title and description so they have some context if they review the request.\n\nSelect `Start a change request`. You'll then be in the change request branch to make changes.\n\nThe screen looks like this now. You will notice on the left, and in the top bar, there is a notice that informs you that you're in a change request with the title given. We have expanded the top bar using the dropdown arrow to show the options available. You can -\n\n*   Exit the change request - Come back at a later date to pick up your changes.\n*   Ready for review - This sends the change request for review to either be accepted and merged, or rejected and deleted. _Make sure you are finished with your changes before sending it for review_.\n\nFor this how-to guide's flow, we'll skip adding the document here and continue it in the next section. We will continue with the change request and hypothetically make some changes to show you how change requests work.\n\n### Change Request Home\n\nFor open change requests, ones sent for review, and approved or rejected change requests, you need to navigate to the change request section by clicking the last icon on the left, with the merge symbol.\n\n![Manage change requests in the TerminusCMS dashboard](https://assets.terminusdb.com/docs/change-request-screen-open.png)\n\nThere are four tabs on this screen:\n\n*   **Open:** These are change requests that have been exited rather than submitted for review. You can click `keep editing` to carry on with your changes or `submit it for review`.\n*   **Review:** Change requests submitted for review are added here.\n*   **Merged:** Accepted and approved change requests go here. On this screen, you can see past change requests and view the details to see what changed.\n*   **Rejected:** Change requests that have been rejected.\n\n### Reviewing Change Requests\n\nA user has added some documents and made some changes and submitted the change request for review.\n\n![Change requests ready for review are listed in chronological order](https://assets.terminusdb.com/docs/change-request-waiting-for-review.png)\n\nThe requests are listed in chronological order. To review the change request, select the `Review` button.\n\nThe review screen will tell you who has made the change request and allow you to add notes and accept or reject the change request.\n\n![accept or reject a change request and leave a comment to explain why.](https://assets.terminusdb.com/docs/change-request-review-comment.png)\n\nFurther below the comments section, there is a diff view to display all of the changes that have been made to make reviewing faster and easier.\n\n![change requests feature a diff viewer to make review processes quicker.](https://assets.terminusdb.com/docs/change-request-review-diff.png)\n\nTo accept or reject the change request. Press the corresponding button.\n\n### Conflict Checking\n\nIn some cases when a change request has been opened and worked on, other users may have merged change requests. This results in your change request becoming out-of-date as it was a snapshot of before the recently merged change requests took place.\n\nTerminusCMS checks the commit history when you begin to review a change request to ensure it includes the latest data. If it is out-of-date it flags a message and prompts you to update it to ensure no past changes are stomped.\n\n![A message to update the change request to the latest database.](https://assets.terminusdb.com/docs/change-request-out-of-date-message.png)\n\n## Adding, Editing, & Deleting Documents\n\nAdding, editing, and deleting documents is straightforward.\n\n### Adding a document\n\nNavigate to the Document Explorer by clicking on the document with a tick icon on the left.\n\n![Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard](https://assets.terminusdb.com/docs/document-explorer-filter-view.png)\n\nEither -\n\n1.  Click the plus symbol next to the document you wish to add from the left, or\n2.  Click into a document and on the top right, click the `Add New Document` button.\n\nCreate a new change request, see the section above for details.\n\nGo ahead and fill in the form. The fields of the form will provide detail about what format is required. Any field with an asterisk denotes that it is mandatory.\n\nSubmit your changes by pressing the `Submit` button.\n\n_You will need to submit and review the change request for the changes to be applied_.\n\n### Editing\n\nLet's assume you're in a change request.\n\nFind the document you want to edit and click on it.\n\n![Edit or delete a document from within TerminusCMS's Document Explorer](https://assets.terminusdb.com/docs/document-explorer-edit-or-delete.png)\n\nPress the `Edit` button.\n\nMake your changes.\n\nEnsure to press `Submit` to commit the changes to the change request.\n\n_You will need to submit and review the change request for the changes to be applied_.\n\n### Deleting\n\nFind the document you want to delete and click on it.\n\nSelect the `red bin icon`.\n\nConfirm you wish to delete the document.\n\n_You will need to submit and review the change request for the changes to be applied_."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Curate Data with the TerminusCMS Dashboard",
      "description": "A how-to guide describing how to use the TerminusCMS dashboard to add, edit, and delete content and data",
      "og_image": "https://assets.terminusdb.com/docs/document-explorer-home.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "TerminusCMS document explorer to edit content via the UI",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "TerminusCMS document explorer to edit content via the UI"
        },
        "value": "https://assets.terminusdb.com/docs/document-explorer-home.png"
      },
      {
        "@type": "Media",
        "alt": "Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/document-explorer-filter-view.png"
      },
      {
        "@type": "Media",
        "alt": "create a new change request to make changes to content.",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "create a new change request to make changes to content."
        },
        "value": "https://assets.terminusdb.com/docs/create-a-new-change-request.png"
      },
      {
        "@type": "Media",
        "alt": "Manage change requests in the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Manage change requests in the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/change-request-screen-open.png"
      },
      {
        "@type": "Media",
        "alt": "Change requests ready for review are listed in chronological order",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Change requests ready for review are listed in chronological order"
        },
        "value": "https://assets.terminusdb.com/docs/change-request-waiting-for-review.png"
      },
      {
        "@type": "Media",
        "alt": "accept or reject a change request and leave a comment to explain why.",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "accept or reject a change request and leave a comment to explain why."
        },
        "value": "https://assets.terminusdb.com/docs/change-request-review-comment.png"
      },
      {
        "@type": "Media",
        "alt": "change requests feature a diff viewer to make review processes quicker.",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "change requests feature a diff viewer to make review processes quicker."
        },
        "value": "https://assets.terminusdb.com/docs/change-request-review-diff.png"
      },
      {
        "@type": "Media",
        "alt": "A message to update the change request to the latest database.",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "A message to update the change request to the latest database."
        },
        "value": "https://assets.terminusdb.com/docs/change-request-out-of-date-message.png"
      },
      {
        "@type": "Media",
        "alt": "Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Filtering documents based on its properties in the document explorer section of the TerminusCMS dashboard"
        },
        "value": "https://assets.terminusdb.com/docs/document-explorer-filter-view.png"
      },
      {
        "@type": "Media",
        "alt": "Edit or delete a document from within TerminusCMS's Document Explorer",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Edit or delete a document from within TerminusCMS's Document Explorer"
        },
        "value": "https://assets.terminusdb.com/docs/document-explorer-edit-or-delete.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Schema Reference Guide"
    },
    "slug": "schema-reference-guide",
    "body": {
      "@type": "Body",
      "value": "The TerminusDB schema language enables documents and their relationships to be specified using simple JSON syntax. This syntax makes it as easy as possible to specify a JSON object to automatically convert to a graph. This approach enables data to be viewed as collections of documents or as knowledge graphs of interconnected objects.\n\n### Schema Objects\n\nA JSON object in TerminusDB schema is composed of **key-value** pairs.\n\n#### Key\n\nA key is one of two values, **keyword** or **property**, described in the table below. The full schema definition is a stream or list of these values or JSON objects.\n\n#### Table: Types of keys\n\nKey type\n\nExample\n\nDescription\n\n**keyword**\n\n`@id`\n\nStarts with `@`, has a value with a special meaning.\n\n**property**\n\n`name`\n\nDoes not start with `@`, has a value with a **range** type.\n\n### Class definition\n\nThe basic unit of specification is a **class**. A class definition is a schema object with the keyword `@type` with type value `Class`. The keyword `@id` specifies the name of the class. The example below define a class named `Person` with a property `name` of type `xsd:string`. Search XSD definitions for more information about types.\n\n#### Code: The basic unit of specification\n\n```\n{ \n    \"@type\" : \"Class\",\n    \"@id\"   : \"Person\",\n    \"name\"  : \"xsd:string\" \n}\n```\n\n### Context object\n\nThe **context object** is a special schema object affecting the entire schema. The context object is specified by the special `@type` value `@context`. An example:\n\n#### Code: The context object\n\n```\n{   \"@type\"            : \"@context\",\n    \"@schema\"          : \"http://terminusdb.com/schema/woql#\",\n    \"@base\"            : \"terminusdb://woql/data/\",\n    \"xsd\"              : \"http://www.w3.org/2001/XMLSchema#\",\n    \"@documentation\"   : \n    {\n        \"@title\"       : \"WOQL schema\",\n        \"@authors\"     : [\"Gavin Mendel-Gleason\"],\n        \"@description\" : \"The WOQL schema providing a complete specification of the WOQL syntax. \n                         This enables: \n                         * WOQL queries to be checked for syntactic correctness.\n                         * Storage and retrieval of queries. \n                         * Queries to be associated with data products.\n                         * Helps to prevent errors and detect conflicts in merge of queries.\",   \n    } \n}\n```\n\nThis example does the following:\n\n*   Defines default prefixes in `@schema` and `@base` to use for the schema and data.\n*   Defines the prefix `xsd` enabling vocabulary based on different URL prefixes.\n*   For example, specify `xsd:string` to denote `http://www.w3.org/2001/XMLSchema#string`\n*   Documents the schema in the `@documentation` value, providing:\n*   `@title`\n*   `@authors`\n*   `@description`\n\n#### Context Prefixes\n\nAll properties in the context object that do not start with `@`, such as `xsd`, are URI definitions. They must be of the form shown below. Prefix and URI are defined by their respective regular expressions. That is, a prefix has an identifier starting with an alphabetic character followed by alphanumeric characters. The URI has a protocol followed by valid URI characters. Each prefix is paired with a URI.\n\n```\nPrefix := \":alpha::alphaNum:*\"\nURI    := \":alpha:alphaNum:*://:uriChar:*\"\n\n{   ...\n    Prefix : URI\n    ... }\n```\n\n## Context keywords\n\nA list of keywords used in the context object.\n\n### @schema\n\nThe `@schema` keyword specifies the default URI expansion to use for all elements of the schema. In the example below, the class name `NamedQuery` expands to `http://terminusdb.com/schema/woql#NamedQuery`.\n\n#### Code: Context keyword @schema\n\n```\n{ \n    \"@type\"       : \"@context\",\n    \"@schema\"     : \"http://terminusdb.com/schema/woql#\",\n    \"@base\"       : \"terminusdb://woql/data/\" \n}\n{ \n    \"@id\"         : \"NamedQuery\",\n    \"@type\"       : \"Class\",\n    \"@key\"        :\n    { \n        \"@type\"   : \"Lexical\",\n        \"@fields\" : [ \"name\" ]\n    },\n    \"name\"        : \"xsd:string\",\n    \"query\"       : \"Query\" \n}\n```\n\n### @base\n\n`@base` specifies the default URI expansion used for all elements of instance data. In the previous schema definition, and given the document in the instance graph example below, the id `NamedQuery_my_query` expands to `terminusdb://woql/data/NamedQuery_my_query`.\n\n#### Code: A document in the instance graph\n\n```\n{ \n    \"@type\"     : \"NamedQuery\",\n    \"@id\"       : \"NamedQuery_my_query\",\n    \"name\"      : \"my_query\",\n    \"query\"     : \n    { \n        \"@type\" : \"True\" \n    }\n}\n```\n\n### @documentation\n\n`@documentation` specifies documentation global to the entire schema. See the `@documentation` section in the previous context object example. The `@documentation` tag can be a single value, or it can be a list with each element having an additional `@langugage` tag. The `@language` tag must have an IANA language code, and this will be used to select appropriate descriptions when internationalising the schema.\n\nThe documentation section contains the keywords:\n\n#### @title\n\nThe `@title` of the schema to display.\n\n#### @description\n\nA long-form `@description` of the purpose of the schema, the type of documents contained in the schema, and keywords useful for searching for the type of content that the schema encodes.\n\n#### @authors\n\nA list of strings of `@authors` involved in writing the schema.\n\n#### @metadata\n\nIf you would like to add arbitrary JSON structured metadata to a schema, you can place it in the `@metadata` field of the context object. This can be used to store data product-wide information in a structured format. For instance:\n\n```\n{ \"@type\" : \"@context\",\n  \"@base\" : \"http://my_stuff/\",\n  \"@schema\" : \"http://my_schema#\",\n  \"@metadata\" : { \"configuration\" : { \"frob\" : 29 } }\n}\n```\n\n#### @language\n\nIf you use the `@language` code, specific documentation results can appear in different circumstances depending on the users language preferences.\n\nAn example of the `@language` tag for a context is as follows:\n\n```\n{ \"@base\": \"terminusdb:///data/\",\n  \"@schema\": \"terminusdb:///schema#\",\n  \"@type\": \"@context\",\n  \"@documentation\" : [{\n      \"@language\" : \"en\",\n      \"@title\" : \"Example Schema\",\n      \"@description\" : \"This is an example schema. We are using it to demonstrate the ability to display information in multiple languages about the same semantic content.\",\n      \"@authors\" : [\"Gavin Mendel-Gleason\"]\n   },\n   {  \"@language\" : \"ka\",\n      \"@title\" : \"მაგალითი სქემა\",\n      \"@description\" : \"ეს არის მაგალითის სქემა. ჩვენ ვიყენებთ მას, რათა ვაჩვენოთ ინფორმაციის მრავალ ენაზე ჩვენების შესაძლებლობა ერთი და იმავე სემანტიკური შინაარსის შესახებ.\",\n      \"@authors\" : [\"გავინ მენდელ-გლისონი\"]\n   }\n  ],\n  \"xsd\" : \"http://www.w3.org/2001/XMLSchema#\"\n}\n```\n\n## Document definition keywords\n\nA document definition includes several properties, and the keywords, prefixed `@`, describing class behavior.\n\n### @type\n\nThe `@type` of the object. At the schema level, this is one of: `Enum`, `Class`, `TaggedUnion` and `Unit`.\n\n### @metadata\n\nIf you would like to add arbitrary JSON structured metadata to a class, you can place it in the `@metadata` field of the class. This can be used to direct various approaches to display of the class, or associated information for backend or front-ends which may have different requirements. It is generally good practice to keep important metadata one level deeper in a JSON object so as to leave space for other kinds of metadata. For instance:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"MyClass\",\n  \"@metadata\" : { \"display_format\" : { \"colour\" : \"Blue\", \"size\" : [100,400]}},\n  \"name\" : \"xsd:string\" }\n```\n\n#### Render as Markdown\n\nTo render properties as Markdown to enable users to curate data using a Markdown editor, specify `render_as` and the property in the `@metadata` field. The example below shows a document with the ID `People` with the `desc` string property set to render as Markdown:\n\n```\n{\n        \"@id\": \"People\",\n        \"@type\": \"Class\",\n        \"@metadata\": {\n            \"render_as\": {\n                \"desc\": \"markdown\"\n            }\n        },\n        \"desc\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Optional\"\n        },\n        },\n        \"name\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Optional\"\n        },\n        \"gender\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Optional\"\n    }\n```\n\n#### Order By\n\nYou can specify the order of properties within your schema so that it is displayed in the document explorer in an order specified by you. Using `order_by` in the `metadata` field in square brackets, list the property order you want, for example:\n\n```\n{\n        \"@id\": \"People\",\n        \"@type\": \"Class\",\n        \"@metadata\": {\n            \"order_by\": [\n                \"name\",\n                \"hair_color\",\n                \"eye_color\",\n                \"gender\",\n                \"birth_year\"\n            ],\n        },\n...\n```\n\n### Class\n\n`Class` designates a standard class document. It contains the definition of several properties and keywords describing various class attributes. An example of a class, and an instance of the class:\n\n#### Code: An example of a class\n\n```\n{ \n    \"@id\"         : \"Dog\",\n    \"@type\"       : \"Class\",\n    \"@base\"       : \"Dog_\",\n    \"@key\"        : \n    { \n        \"@type\"   : \"Lexical\",\n        \"@fields\" : [ \"name\" ] \n    },\n    \"name\"        : \"xsd:string\",\n    \"hair_colour\" : \"Colour\" \n}\n```\n\n#### Code: An example of a class instance\n\n```\n{ \n    \"@type\"       : \"@context\",\n    \"@base\"       : \"http://i/\",\n    \"@schema\"     : \"http://s#\" \n}\n{ \n    \"@type\"       : \"Dog\",\n    \"@id\"         : \"Dog_Cerberus\",\n    \"name\"        : \"Cerberus\",\n    \"hair_colour\" : \"Grey\" \n}\n```\n\n### Enum\n\nAn `Enum` is a non-standard class in which each instance is a simple URI with no additional structure. To be a member of the class, you must be one of the referent URIs. An `Enum` example with an extension `Blue` is s shown below. In the database, the actual URI for an Enum is expanded with the preceding type name, so the `Blue` extension becomes `http://s#PrimaryColour/Blue`\n\n#### Code: An example of an enum class\n\n```\n{ \n    \"@type\"   : \"Enum\",\n    \"@id\"     : \"PrimaryColour\",\n    \"@value\" : \n    [\n        \"Red\", \n        \"Blue\", \n        \"Yellow\"\n    ] \n}\n```\n\n```\n\"Blue\"\n```\n\n### TaggedUnion\n\nA `TaggedUnion` specifies mutually exclusive properties. This is useful when there is a disjoint choice between options.\n\nExamples below of a schema with a TaggedUnion and a concrete TaggedUnion class extension. In these examples, the `BinaryTree` class specifies a `TaggedUnion` enabling a choice between a `leaf` (with no value), or a `node` class with a value and branches.\n\n#### Code: An example schema with a TaggedUnion\n\n```\n{ \n    \"@type\"     : \"@context\",\n    \"@base\"     : \"http://i/\",\n    \"@schema\"   : \"http://s#\" \n}\n{ \n    \"@id\"       : \"BinaryTree\",\n    \"@type\"     : \"TaggedUnion\",\n    \"@base\"     : \"binary_tree_\",\n    \"@key\"      : \n    { \n        \"@type\" : \"ValueHash\" \n    },\n    \"leaf\"      : \"sys:Unit\",\n    \"node\"      : \"Node\" \n}\n{ \n    \"@id\"       : \"Node\",\n    \"@type\"     : \"Class\",\n    \"@key\"      : \n    { \n        \"@type\" : \"ValueHash\" \n    },\n    \"value\"     : \"xsd:integer\",\n    \"left\"      : \"BinaryTree\",\n    \"right\"     : \"BinaryTree\" \n}\n```\n\n#### Code: An example TaggedUnion class extension\n\n```\n{ \n    \"@type\"     : \"Node\",\n    \"value\"     : 0,\n    \"left\"      : \n    {\n        \"@type\" : \"BinaryTree\",\n        \"leaf\"  : []\n    },\n    \"right\": \n    { \n        \"@type\" : \"BinaryTree\",\n        \"leaf\"  : []\n    }\n}\n```\n\n### @oneOf\n\nThe `TaggedUnion` is a special case and syntactic sugar for the more general case of collections of disjoint properties. These more complex cases can be represented by inheriting from a number of `TaggedUnion`s, but they may also be given explicitly using the `@oneOf` field, together with a Class.\n\nThe value of the `@oneOf` field is a set, so can be any number of documents all of which have mutually disjoint properties, but which can coexist. Examples with more than one disjoint property are given below.\n\n#### Code: An example schema with @oneOf\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s#\"\n}\n{\n    \"@id\"        : \"IntOrString\",\n    \"@type\"      : \"Class\",\n    \"@oneOf\"     :\n    {\n        \"integer\": \"xsd:integer\",\n        \"string\" : \"xsd:string\"\n    }\n}\n{\n    \"@id\"        : \"Friend\",\n    \"@type\"      : \"Class\",\n    \"@key\"       :\n    {\n        \"@type\"  : \"Lexical\",\n        \"@fields\": [\"name\"]\n    },\n    \"name\"       : \"xsd:string\"\n}\n{\n    \"@id\"        : \"Toy\",\n    \"@type\"      : \"Class\",\n    \"@key\"       :\n    {\n        \"@type\"  : \"Lexical\",\n        \"@fields\": [\"name\"]\n    },\n    \"name\"       : \"xsd:string\"\n}\n{\n    \"@id\"       : \"Pet\",\n    \"@type\"     : \"Class\",\n    \"name\"      : \"xsd:string\",\n    \"@oneOf\"    : [\n        {\n            \"cat\" : \"Toy\",\n            \"dog\" : \"Friend\"\n        },\n        {\n            \"employers\" : \"xsd:positiveInteger\",\n            \"unemployed\": \"xsd:string\"\n        },\n    ]\n}\n```\n\n#### Code: Examples of `@oneOf` class extensions\n\n```\n{\n    \"@type\"     : \"IntOrString\",\n    \"integer\"   : 0\n}\n```\n\n```\n{\n    \"@type\"     : \"IntOrString\",\n    \"string\"    : \"zero\"\n}\n```\n\n```\n{\n    \"@type\"    : \"Pet\",\n    \"cat\"      : {\n        \"@type\": \"Toy\",\n        \"name\" : \"ball of string\"\n    },\n    \"employers\": 5\n}\n```\n\n```\n{\n    \"@type\"    : \"Pet\",\n    \"dog\"      : {\n        \"@type\": \"Person\",\n        \"name\" : \"Jim\"\n    },\n    \"unemployed\": \"A house pet.\"\n}\n```\n\n```\n{\n    \"@type\"     : \"Pet\",\n    \"string\"    : \"zero\"\n}\n```\n\nBut not:\n\n```\n{\n    \"@type\"     : \"IntOrString\",\n    \"integer\"   : 0,\n    \"string\"    : \"zero\"\n}\n```\n\n### Unit\n\nThe `Unit` type has a single extension `[]`. This is used when only the presence of the property is interesting, but it has no interesting value. See the `BinaryTree` in the [TaggedUnion class extension](#codeanexampletaggedunionclassextension) example above.\n\n### @id\n\nThe `@id` key of a class defines the class name and identifier. The name uniquely defines the class, enabling the class to be updated, retrieved, and deleted. In the example below, the class is named `NamedQuery`. It does not have a fully qualified URL or prefix, so it is implicitly based on the URI given for `@schema`.\n\n#### Code: The @id key of a class\n\n```\n{ \n    \"@id\"         : \"NamedQuery\",\n    \"@type\"       : \"Class\",\n    \"@key\"        : \n    { \n        \"@type\"   : \"Lexical\",\n        \"@fields\" : [ \"name\" ] \n    },\n    \"name\"        : \"xsd:string\",\n    \"query\"       : \"Query\" \n}\n```\n\n### @key\n\n`@key` specifies the mechanism to define the `@id` of documents in the database, similar to a primary key in relational database terms. Valid key types are `Lexical`, `Hash`, `ValueHash`, `Random`.\n\nIf the key `@base` is specified in the class, then this is pre-pended to the key. If this is a fully qualified URI then it is complete, otherwise, it is combined with the value of `@base` from the context.\n\n#### Lexical\n\nA `Lexical` key specifies a URI name formed from a URI encoded combination of all `@fields` arguments provided, in the order provided. An example is shown below. With this key type (or key strategy) a URI is formed from the combination of `first_name` and `last_name`. If `@base` is specified in the class, this is prepended.\n\nGiven the [simple document definition](#codeasimpledocumentdefinition) below, this will either generate (if `@id` is not supplied) or check that the URI `http://example.com/people/Person_Hasdrupal_Barca` is the `@id` element.\n\n#### Code: An example Lexical key\n\n```\n{ \n    \"@type\"         : \"@context\",\n    \"@schema\"       : \"http://example.com/people#\",\n    \"@base\"         : \"http://example.com/people/\" \n}\n{ \n    \"@id\"           : \"Person\",\n    \"@type\"         : \"Class\",\n    \"@base\"         : \"Person_\",\n    \"@key\"          : \n    {\n        \"@type\"     : \"Lexical\",\n        \"@fields\"   : \n        [ \n            \"first_name\", \n            \"last_name\" \n        ]\n    },\n    \"first_name\"    : \"xsd:string\",\n    \"last_name\"     : \"xsd:string\",\n    \"year_of_birth\" : \"xsd:gYear\"\n}\n```\n\n#### Code: A simple document definition\n\n```\n{ \n    \"@type\"         : \"Person\",\n    \"first_name\"    : \"Hasdrupal\",\n    \"last_name\"     : \"Barca\",\n    \"year_of_birth\" : \"-245\" \n}\n```\n\n#### Hash\n\n`Hash` is generated in the same way as `Lexical` except that values are first hashed using the SHA-256 hash algorithm.\n\nUse this where there:\n\n*   Are numerous items that form the key making the URI unwieldy.\n*   Is no need for the URI to inform the user of the content of the object.\n*   Is a requirement that data about the object is not be revealed by the key.\n\nDefine a `Hash` in the same way as the [Lexical key strategy](#codeanexamplelexicalkey) example in the previous section, replacing the `@key` `@type` value from `Lexical` to `Hash`.\n\nGiven the [simple document definition](#codeasimpledocumentdefinition) in the previous section, the `@id` `Person_5dd7004081e437b3e684075fa3132542f5cd06c1` is generated.\n\n#### ValueHash\n\nThe `ValueHash` key generates a key defined as the downward transitive closure of the directed acyclic graph from the root of the document. This means you can produce a key that is entirely based on the entire data object. Note `ValueHash`:\n\n*   Takes no additional keywords.\n*   Objects must be directed acyclic graphs, they **cannot be cyclic**.\n\nIn the example below, `ValueHash` is formed only from the value of `layer:identifier`.\n\n#### Code: An example ValueHash key\n\n```\n{ \n    \"@id\"              : \"layer:Layer\",\n    \"@type\"            : \"Class\",\n    \"@documentation\"   : \n    {\n        \"@comment\"     : \"A layer object which has the identifier used in storage.\",\n        \"@properties\"  : \n        { \n            \"layer:identifier\"  : \"The layer identifier.\" \n        }\n    },\n    \"@base\"            : \"layer_data:Layer_\",\n    \"@key\"             : \n    { \n        \"@type\"        : \"ValueHash\" \n    },\n    \"layer:identifier\" : \"xsd:string\" \n}\n```\n\n#### Random\n\nUse `Random` as a convenient key type when an object has no important characteristics that inform a key or does not need to be constructed such that it is reproducible. In the example below, the `@key` `@type` is defined as `Random`, meaning each new database that is added is unique regardless of label.\n\n#### Code: An example of a Random key\n\n```\n{\n    \"@id\"                   : \"UserDatabase\",\n    \"@type\"                 : \"Class\",\n    \"@documentation\"        : \n    {\n        \"@comment\"          : \"A normal user database.\",\n        \"@properties\"       : \n        {\n            \"label\"         : \"The label name of the database.\",\n            \"comment\"       : \"A comment associated with the database.\",\n            \"creation_date\" : \"The time of creation of the database.\",\n            \"state\"         : \"The system transaction state of the database.\" \n        }\n    },\n    \"@inherits\"             : \"Database\",\n    \"@key\"                  : \n    {\n        \"@type\"             : \"Random\" \n    },\n    \"label\"                 : \"xsd:string\",\n    \"comment\"               : \"xsd:string\",\n    \"creation_date\"         : \"xsd:dateTime\",\n    \"state\"                 : \"DatabaseState\" \n}\n```\n\n### @documentation\n\nUse `@documentation` to add documentation to the class and the property fields or values of the class. The `@documentation` can either be an object, or a list of objects with specified languages (and at most one default unspecified). An example using multiple languages might be:\n\n```\n{ \"@id\" : \"Example\",\n  \"@type\" : \"Class\",\n  \"@documentation\" : [\n     {\n       \"@label\" : \"Example\",\n       \"@comment\" : \"An example class\",\n       \"@properties\" : { \"name\" : { \"@label\" : \"name\",\n                                    \"@comment\" : \"The name of the example object\" },\n                         \"choice\" : { \"@label\" : \"choice\",\n                                      \"@comment\" : \"A thing to choose\" }}\n     },\n     {\n        \"@language\" : \"ka\",\n        \"@label\" : \"მაგალითი\",\n        \"@comment\" : \"მაგალითი კლასი\",\n        \"@properties\" : { \"name\" : { \"@label\" : \"სახელი\",\n                                     \"@comment\" : \"მაგალითის ობიექტის სახელი\" },\n                          \"choice\" : { \"@label\" : \"არჩევანი\",\n                                       \"@comment\" : \"რაც უნდა აირჩიოთ\" }}\n     }\n  ],\n  \"name\" : \"xsd:string\"\n}\n```\n\nThe keywords of the `@documentation` object are `@comment` and either `@properties` or `@values` for standard classes or `Enums` respectively. Each of the `@properties` or `@values` can likewise have either a simple label, or an object with `@label` and `@comment (as above)`.\n\nFor `Enum` we can write as follows:\n\n```\n{\n    \"@id\": \"Pet\",\n    \"@type\": \"Enum\",\n    \"@documentation\" : {\n        \"@comment\" : \"What kind of pet?\",\n        \"@values\" : {\n            \"dog\" : \"A doggie\",\n            \"cat\" : \"A kitty\"\n        }\n    },\n   \"@value\" : [\"dog\",\"cat\"]\n}\n```\n\nFor a standard `Class` with one default language, we can write as follows:\n\n```\n{\n    \"@id\": \"Person\",\n    \"@type\": \"Class\",\n    \"@documentation\" : {\n        \"@comment\" : \"Information about people\",\n        \"@values\" : {\n            \"name\" : \"The persons name\",\n            \"friends\" : \"The kinds of company someone keeps\"\n        }\n    },\n   \"name\" : \"xsd:string\",\n   \"friends\" : {\n       \"@type\" : \"Set\",\n       \"@class\" : \"Person\"\n   }\n}\n```\n\n#### @comment\n\nThe `@comment` is the class description.\n\n#### @properties\n\nThe `@properties` keyword is a JSON object with pairs of the form:\n\n```\n{\n    \"property_1\" : \"description_1\",\n\n    ...\n\n    \"property_n\" : \"description_n\"\n}\n```\n\nor with properties pointing to JSON objects, as:\n\n```\n{\n    \"property_1\" : { \"@label\" : \"description_1\", \"@comment\" : \"comment_1\" },\n\n    ...\n\n    \"property_n\" : { \"@label\" : \"description_2\", \"@comment\" : \"comment_2\" }\n}\n```\n\n### @base\n\n`@base` specifies a prefix to prepare to the `@key`. This prefix is absolute if `@base` is a fully qualified URI, otherwise, it will, in turn, be prefixed by the system-wide `@base` definition. In the example below, the `@base` for the class is fully qualified after the `layer_data` prefix is expanded. This means the layer URIs have the form `terminusdb://layer/data/Layer_` followed by a random string.\n\n#### Code: An example of the @base keyword\n\n```\n{ \n    \"@type\"            : \"@context\",\n    \"@documentation\"   :\n    {\n        \"@title\"       : \"The Ref schema\",\n        \"@description\" : \"This is the Ref schema. It gives a specification for storage of references, branches and commits in our commit graph.\",\n        \"@authors\"     :\n        [\n            \"Gavin Mendel-Gleason\",\n            \"Matthijs van Otterdijk\"\n        ]\n    },\n    \"@base\"            : \"terminusdb://ref/data/\",\n    \"@schema\"          : \"http://terminusdb.com/schema/ref#\",\n    \"layer\"            : \"http://terminusdb.com/schema/layer#\",\n    \"layer_data\"       : \"terminusdb://layer/data/\",\n    \"xsd\"              : \"http://www.w3.org/2001/XMLSchema#\"\n}\n{\n    \"@id\"              : \"layer:Layer\",\n    \"@type\"            : \"Class\",\n    \"@documentation\"   :\n    {\n        \"@comment\"     : \"A layer object which has the identifier used in storage.\",\n        \"@properties\"  :\n        {\n            \"layer:identifier\" : \"The layer identifier.\"\n        }\n    },\n    \"@base\"            : \"layer_data:Layer_\",\n    \"@key\"             :\n    {\n        \"@type\"        : \"ValueHash\"\n    },\n    \"layer:identifier\" : \"xsd:string\"\n}\n```\n\n### @subdocument\n\nThe `@subdocument` key is present with the value `[]` or it is not present.\n\nA class designated as a sub-document is considered to be completely owned by its containing document. It is not possible to directly update or delete a subdocument, but it must be done through the containing document. Currently, subdocuments **must have a key** that is `Random` or `ValueHash` (this restriction may be relaxed in the future.)\n\nSee below for examples of a subdocument declaration in a schema, and a corresponding subdocument.\n\n#### Code: An example subdocument declaration\n\n```\n{ \n    \"@type\"        : \"@context\",\n    \"@base\"        : \"terminusdb://i/\",\n    \"@schema\"      : \"terminusdb://s#\" \n}\n{ \n    \"@type\"        : \"Class\",\n    \"@id\"          : \"Person\",\n    \"age\"          : \"xsd:integer\",\n    \"name\"         : \"xsd:string\",\n    \"address\"      : \"Address\" \n}\n{ \n    \"@type\"        : \"Class\",\n    \"@id\"          : \"Address\",\n    \"@key\"         : \n    {\n        \"@type\"    : \"Random\"\n    },\n    \"@subdocument\" : [],\n    \"country\"      : \"xsd:string\",\n    \"postal_code\"  : \"xsd:string\",\n    \"street\"       : \"xsd:string\"\n}\n```\n\n#### Code: An example subdocument\n\n```\n{ \n    \"@type\"           : \"Person\",\n    \"@id\"             : \"doug\",\n    \"name\"            : \"Doug A. Trench\",\n    \"address\"         : \n    { \n        \"@type\"       : \"Address\",\n        \"country\"     : \"Neverlandistan\",\n        \"postal_code\" : \"3\",\n        \"street\"      : \"Cool Harbour lane\"\n    }\n}\n```\n\n### @abstract\n\nThe `@abstract` key is present with the value `[]` or it is not present.\n\nAn abstract class has no concrete referents. It provides a common superclass and potentially several properties shared by all of its descendants. Create useful concrete members using the `@inherits` keyword.\n\nAn example of the abstract keyword in a schema, and a concrete instance of the `Person` class, but not of the `NamedEntity` class:\n\n#### Code: An example of the abstract keyword\n\n```\n{ \n    \"@type\"     : \"@context\",\n    \"@base\"     : \"terminusdb://i/\",\n    \"@schema\"   : \"terminusdb://s#\" \n}\n{ \n    \"@type\"     : \"Class\",\n    \"@abstract\" : [],\n    \"@id\"       : \"NamedEntity\",\n    \"name\"      : \"xsd:string\" \n}\n{ \n    \"@type\"     : \"Person\",\n    \"@id\"       : \"Person\",\n    \"@inherits\" : [\"NamedEntity\"] \n}\n```\n\n```\n{ \n    \"@type\" : \"Person\",\n    \"@id\"   : \"doug\",\n    \"name\"  : \"Doug A. Trench\" \n}\n```\n\n### @inherits\n\n`@inherits` enables classes to inherit properties (and the `@subdocument` designation) from parent classes. It does **not** inherit key strategies.\n\nThis inheritance tree is also available as a `subsumption` relation in the WOQL query language and provides semantics for **frames** in the **schema API**.\n\nThe range of `@inherits` can be a class or a list of classes. For example:\n\n```\n{ \n    ...,\n\n    \"@inherits\" : \"MyClass\",\n\n    ... \n}\n```\n\nOr\n\n```\n{ \n    ...,\n\n    \"@inherits\" : \n    [\n        \"MyFirstClass\", \"MySecondClass\"\n    ]\n\n    ... \n}\n```\n\n#### Multiple inheritance\n\nMultiple inheritance is allowed as long as all inherited properties of the same name have the same range class. If range classes conflict, the schema check fails.\n\nAn example of inheritance of properties and an object meeting this specification:\n\n#### Code: An example of inheritance\n\n```\n{ \n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\" \n}\n{ \n    \"@id\"        : \"RightHanded\",\n    \"@type\"      : \"Class\",\n    \"right_hand\" : \"xsd:string\" \n}\n{ \n    \"@id\"        : \"LeftHanded\",\n    \"@type\"      : \"Class\",\n    \"left_hand\"  : \"xsd:string\" \n}\n{ \n    \"@id\"        : \"TwoHanded\",\n    \"@type\"      : \"Class\",\n    \"@inherits\"  : \n    [ \n        \"RightHanded\", \"LeftHanded\"\n    ] \n}\n```\n\n```\n{ \n    \"@type\"      : \"TwoHanded\",\n    \"@id\"        : \"a two-hander\",\n    \"left_hand\"  : \"Pretty sinister\",\n    \"right_hand\" : \"But this one is dexterous\" \n}\n```\n\n## @unfoldable\n\nThe `@unfoldable` key is present with the value `[]` or it is not present.\n\nIn the document API, when retrieving documents, the default behavior is for any linked document to be returned as an IRI, while subdocuments are fully unfolded and returned as a nested document. With the `@unfoldable` option set, linked documents will behave just like subdocuments, and will also be unfolded on retrieval.\n\nThe `@unfoldable` option can only be set on a class which does not directly or indirectly link to itself. This prevents a self-referencing document from being unfolded infinitely.\n\nThe purpose of `@unfoldable` is to be able to treat linked (top-level) documents as subdocuments in representation. Subdocuments can only be linked by one document, its owner, whereas normal documents can be linked by any number of other documents. If the desired result is to have a document linked by several other documents, but still have it fully unfolded on retrieval like a subdocument, use this option.\n\n### Code: An example unfoldable\n\n```\n{\n    \"@type\"        : \"@context\",\n    \"@base\"        : \"terminusdb://i/\",\n    \"@schema\"      : \"terminusdb://s#\"\n}\n{\n    \"@type\"        : \"Class\",\n    \"@id\"          : \"Person\",\n    \"name\"         : \"xsd:string\",\n    \"address\"      : \"Address\"\n}\n{\n    \"@type\"        : \"Class\",\n    \"@id\"          : \"Address\",\n    \"@unfoldable\"  : [],\n    \"country\"      : \"xsd:string\",\n    \"postal_code\"  : \"xsd:string\",\n    \"street\"       : \"xsd:string\"\n}\n```\n\n#### Code: an example set of documents\n\n```\n{\n    \"@type\"        : \"Address\",\n    \"@id\"          : \"Address/1\",\n    \"country\"      : \"Neverlandistan\",\n    \"postal_code\"  : \"3\",\n    \"street\"       : \"Cool Harbour lane\"\n}\n\n{\n   \"@type\"         : \"Person\",\n   \"@id\"           : \"Person/doug\",\n   \"name\"          : \"Doug A. Trench\",\n   \"address\"       : \"Address/1\"\n}\n\n{\n   \"@type\"         : \"Person\",\n   \"@id\"           : \"Person/phil\",\n   \"name\"          : \"Phil A. Trench\",\n   \"address\"       : \"Address/1\"\n}\n```\n\nThe above example shows both Doug and Phil using the same address document. On retrieval of all Persons, the document API returns these documents:\n\n```\n{\n    \"@type\"        : \"Person\",\n    \"@id\"          : \"Person/doug\",\n    \"name\"         : \"Doug A. Trench\",\n    \"address\"      : { \"@type\"       : \"Address\",\n                       \"@id\"         : \"Address/1\",\n                       \"country\"     : \"Neverlandistan\",\n                       \"postal_code\" : \"3\",\n                       \"street\"      : \"Cool Hasrbour lane\" }\n}\n{\n    \"@type\"        : \"Person\",\n    \"@id\"          : \"Person/phil\",\n    \"name\"         : \"Phil A. Trench\",\n    \"address\"      : { \"@type\"       : \"Address\",\n                       \"@id\"         : \"Address/1\",\n                       \"country\"     : \"Neverlandistan\",\n                       \"postal_code\" : \"3\",\n                       \"street\"      : \"Cool Hasrbour lane\" }\n}\n```\n\nThe address is fully unfolded in both documents despite not being a subdocument.\n\n## Class properties\n\nAll non-keywords are treated as properties of the class, with the form:\n\n```\n<property> : <Class>\n```\n\nOr\n\n```\n<property> : { \"@type\" : <TypeFamily>,  \"@class\" : <Class> }\n```\n\n#### Range classes\n\nA range class is a concrete base type defined as any of the xsd types (see XSD), or a class defined in the current schema, including the current class.\n\nIn the example range class below, `first_name` and `last_name` are strings, `year_of_birth` is a year, and `friend` is any number of `Person` objects, in no particular order and without duplication. Also, see below [an example of a concrete set of documents](#codeanexampleofaconcretesetofdocuments) with this form.\n\n#### Code: An example range class\n\n```\n{ \n    \"@type\"         : \"@context\",\n    \"@schema\"       : \"http://example.com/people#\",\n    \"@base\"         : \"http://example.com/people/\" \n}\n{ \n    \"@id\"           : \"Person\",\n    \"@type\"         : \"Class\",\n    \"@base\"         : \"Person/\",\n    \"@key\"          : \n    { \n        \"@type\"     : \"Lexical\",\n        \"@fields\"   : \n        [ \n            \"first_name\", \"last_name\" \n        ]\n    },\n    \"first_name\"    : \"xsd:string\",\n    \"last_name\"     : \"xsd:string\",\n    \"knows\"         : \n    { \n        \"@type\"     : \"Set\", \n        \"@class\"    : \"Person\"\n    },\n    \"year_of_birth\" : \"xsd:gYear\" \n}\n```\n\n#### Code: An example of a concrete set of documents\n\n```\n{ \n    \"@type\"         : \"Person\",\n    \"@id\"           : \"Person/Hasdrubal_Barca\",\n    \"first_name\"    : \"Hasdrubal\",\n    \"last_name\"     : \"Barca\",\n    \"knows\"         :  \n    [\n        \"Person/Imilce_Barca\",\n        \"Person/Hannibal_Barca\"\n    ],\n    \"year_of_birth\" : \"-245\"\n}\n{ \n    \"@type\"         : \"Person\",\n    \"@id\"           : \"Person/Imilce_Barca\",\n    \"first_name\"    : \"Imilce\",\n    \"last_name\"     : \"Barca\",\n    \"knows\"         :  \n    [\n        \"Person/Hasdrupal_Barca\",\n        \"Person/Hannibal_Barca\"\n    ],\n    \"year_of_birth\" : \"-255\" \n}\n{ \n    \"@type\"         : \"Person\",\n    \"@id\"           : \"Person/Hannibal_Barca\",\n    \"first_name\"    : \"Hannibal\",\n    \"last_name\"     : \"Barca\",\n    \"knows\"         : \n    [\n        \"Person/Imilce_Barca\",\"Person/Hannibal_Barca\"\n    ],\n    \"year_of_birth\" : \"-247\" \n}\n```\n\n#### JSON Type\n\nTwo special JSON types exist in TerminusDB. One is for use as a subdocument, and is called `\"sys:JSON\"` and the type `\"sys:JSONDocument\"` which is used for type level. Both allow un-constrained and untypechecked documents which can be stored or retrieved as apparently unmodified JSON, but which are still indexed and searchable using WOQL.\n\nIds for subdocuments of type `\"sys:JSON\"` are formed from a hash of the content, meaning that subdocuments are shared if their content is the same.\n\nHowever, those of type `\"sys:JSONDocument\"` are assigned a random id, such that they can be retrieved, modified etc. Alternatively they can be assigned an id by passing in an id of the form `{ \"@id\" : \"JSONDocument/my_id_here\", ...}` making sure to use the prefix `\"JSONDocument\"` so as not to ensure we do not have any id conflicts with other document types.\n\n#### Code: An example of `\"sys:JSON\"`\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@schema\"    : \"http://example.com/people#\",\n    \"@base\"      : \"http://example.com/people/\"\n}\n{\n    \"@type\"      : \"Class\",\n    \"@id\"        : \"Person\",\n    \"name\"       : \"xsd:string\",\n    \"metadata\"   : \"sys:JSON\"\n}\n```\n\nWe can now have a well typed `\"Person\"` which contains a metadata field of type `\"sys:JSON\"` which is unconstrained JSON as follows:\n\n```\n{\n    \"@type\"      : \"Person\",\n    \"name\"       : \"John\",\n    \"metadata\"   : { \"theme\" : \"Dark\", \"last_visit\" : \"10-01-02\" }\n}\n```\n\n#### Code: An example of `\"sys:JSONDocument\"`\n\nUsing the `{ \"json\" : true }` option to the insert API, or using the TerminusDB CLI with the `-j` or `--json=true` flag we can insert an arbitrary JSON document.\n\nUsing the CLI we can write:\n\n```\necho '{ \"size\" : 12.0, \"name\" : \"Bob\" }' | terminusdb doc insert admin/example -j\nDocument inserted [\"terminusdb:///json/JSONDocument/9cb4de0ff0b46b6035149a6b763e087d6c59cba2b417de3eedfd26063bee6bdf\"]\n```\n\n## Type families\n\nUse type families to construct optionality or collections of values. Type families are `List`, `Set`, `Array`, and `Optional`.\n\n### Optional\n\nUse `Optional` as a type family where a property is not required.\n\n#### Code: An example of type family Optional\n\n```\n{ \n    \"@type\"      : \"@context\",\n    \"@schema\"    : \"http://example.com/people#\",\n    \"@base\"      : \"http://example.com/people/\" }\n\n{ \n    \"@type\"      : \"Class\",\n    \"@id\"        : \"CodeBlock\",\n    \"code\"       : \"xsd:string\",\n    \"comment\"    : \n    { \n        \"@type\"  : \"Optional\",\n        \"@class\" : \"xsd:string\" \n    }\n}\n```\n\nSupply an optional `comment` field in `CodeBlock`. Both of the following documents are valid:\n\n```\n{ \n    \"@type\"   : \"CodeBlock\",\n    \"@id\"     : \"my_code_block\",\n    \"code\"    : \"print('hello world')\",\n    \"comment\" : \"This is a silly bit of code\" \n}\n```\n\nOR\n\n```\n{ \n    \"@type\" : \"CodeBlock\",\n    \"@id\"   : \"my_code_block\",\n    \"code\"  : \"print('hello world')\" \n}\n```\n\n### List\n\nUse `List` to specify an ordered collection, with multiplicity, of values of a class or datatype.\n\n#### Code: An example of type family List\n\n```\n{ \n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\" \n}\n{ \n    \"@id\"        : \"TaskList\",\n    \"@type\"      : \"Class\",\n    \"tasks\"      : \n    { \n        \"@type\"  : \"List\",\n        \"@class\" : \"Task\"\n    } \n}\n{\n    \"@id\"        : \"Task\",\n    \"@type\"      : \"Class\",\n    \"@key\"       : \"ValueHash\",\n    \"name\"       : \"xsd:string\" \n}\n```\n\nAn example of an object `Task` contained in a `List` of elements known as a `TaskList`. This list is retrieved in the same order that it is inserted. It is also capable of storing duplicates.\n\n```\n{ \n    \"@id\"   : \"my_task_list\",\n    \"@type\" : \"TaskList\",\n    \"tasks\" : \n    [\n        {     \n            \"@type\" : \"Task\", \n            \"name\"  : \"Laundry\" \n        },\n        { \n            \"@type\" : \"Task\", \n            \"name\"  : \"Take_Garage_Out\" \n        }\n    ]\n}\n```\n\n### Set\n\nUse `Set` to specify an unordered set of values of a class or datatype.\n\n#### Code: An example of type family Set\n\n```\n{ \n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\" \n}\n{ \n    \"@id\"        : \"Person\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"friends\"    : \n    { \n        \"@type\"  : \"Set\",\n        \"@class\" : \"Person\" \n    }\n}\n```\n\nAn example of an object `Person` that can have 0 to any number of friends. This list has no order and is retrieved from the database in a potentially different order. Inserted duplicates do not create additional linkages and only a single of the multiple supplied results are returned.\n\n```\n{ \n    \"@id\"           : \"Me\",\n    \"@type\"         : \"Person\",\n    \"friends\"       : \n    [\n        { \n            \"@type\" : \"Person\",\n            \"@id\"   : \"you\",\n            \"name\"  : \"You\" \n        },\n        { \n            \"@type\" : \"Person\",\n            \"@id\"   : \"someone_else\",\n            \"name\"  : \"Someone Else\"\n        }\n    ]\n}\n```\n\n### Foreign Types\n\nUse `Foreign` to specify types that are to be references to external data products. Foreign types are types that are opaque in the current data product. This allows us to give them identifiers although we don't actually store the objects locally. Foreign types have _no_ referential integrity checking, and as they refer to opaque identifiers, the schema is checked by the data product in which they are referred.\n\nA foreign type must be declared explicitly by giving the name of the type to be treated as foreign using the `Foreign` designation in the schema.\n\n#### Code: An example of adding a foreign Person type\n\nFor instance, to add a foreign type of type Person, we can write:\n\n```\n{ \"@type\" : \"Foreign\",\n  \"@id\" : \"Person\"}\n```\n\nThe actual definition of person might be given in its home data product as:\n\n```\n{ \"@type\" : \"Person\",\n  \"@key\" : { \"@type\" : \"Lexical\",\n             \"@fields\" : [ \"name \" ] },\n  \"name\" : \"xsd:string\" }\n```\n\n#### Code: An example creating and referring to a foreign type\n\nFrom the command line we can see how an HR data product might interact with an Events data product.\n\nCreate the HR data product:\n\n```\nterminusdb db create admin/hr\n```\n\nAdd the HR schema:\n\n```\necho '{ \"@type\" : \"Class\", \"@id\" : \"Person\", \"@key\" : { \"@type\" : \"Lexical\", \"@fields\" : [\"name\"]}, \"name\" : \"xsd:string\" }' | terminusdb doc insert admin/hr --graph_type=schema\n```\n\nCreate the Events data product:\n\n```\nterminusdb db create admin/events\n```\n\nAdd events, and a foreign type designation:\n\n```\necho '{ \"@type\" : \"Foreign\", \"@id\" : \"Person\"}{ \"@type\" : \"Class\", \"@id\" : \"Event\", \"date\" : \"xsd:date\", \"person\" : \"Person\" }' | terminusdb doc insert admin/events --graph_type=schema\n```\n\nAdd a person to HR:\n\n```\necho '{ \"@type\" : \"Person\", \"name\" : \"Gavin\" }' | terminusdb doc insert admin/hr\n```\n\nAdd an event referring to the person:\n\n```\necho '{ \"@type\" : \"Event\", \"date\" : \"2022-10-05\", \"person\" : \"terminusdb:///data/Person/Gavin\"}' | terminusdb doc insert admin/events\n```\n\nRecover the event:\n\n```\nterminusdb doc get admin/events --id='Event/9b3c5b174cb1f157dcdcedb692ed57f82ba31193fb81652dc602915732ae94e1'\n```\n\n### Cardinality\n\nUse `Cardinality` to specify an unordered set of values of a class or datatype in which the property has a limited number of elements as specified by the cardinality constraint properties.\n\nThe relevant properties are:\n\n#### `@cardinality`\n\nWhen specified, the number of elements for the given property must be _exactly_ the cardinality specified. This is equivalent to specifying both `@min_cardinality` and `@max_cardinality` as the same cardinality.\n\n#### Code: An example of type family Cardinality with `@cardinality`\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\"\n}\n{\n    \"@id\"        : \"Person\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"friends\"    :\n    {\n        \"@type\"  : \"Cardinality\",\n        \"@class\" : \"Person\"\n        \"@cardinality\" : 3\n    }\n}\n```\n\nAn example of an object `Person` that can have exactly three friends. As with `Set` This list has no order and is retrieved from the database in a potentially different order.\n\n```\n{\n    \"@id\"           : \"Person/Me\",\n    \"@type\"         : \"Person\",\n    \"friends\"       :\n    [\n        {\n            \"@type\" : \"Person\",\n            \"@id\"   : \"Person/you\",\n            \"name\"  : \"You\"\n        },\n        {\n            \"@type\" : \"Person\",\n            \"@id\"   : \"Person/someone_else\",\n            \"name\"  : \"Someone Else\"\n        },\n        {\n            \"@type\" : \"Person\",\n            \"@id\"   : \"Person/Another\",\n            \"name\"  : \"Another\"\n        }\n    ]\n}\n```\n\n#### `@min_cardinality`\n\nWhen specified, the number of elements for the given property must be _at least_ the cardinality specified.\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\"\n}\n{\n    \"@id\"        : \"Person\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"friends\"    :\n    {\n        \"@type\"  : \"Set\",\n        \"@class\" : \"Person\"\n        \"@min_cardinality\" : 1\n    }\n}\n```\n\n#### `@max_cardinality`\n\nWhen specified, the number of elements for the given property must be _no more than_ the cardinality specified.\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\"\n}\n{\n    \"@id\"        : \"Person\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"friends\"    :\n    {\n        \"@type\"  : \"Set\",\n        \"@class\" : \"Person\"\n        \"@min_cardinality\" : 1\n    }\n}\n```\n\nWhen set to 1, this is functionally equivalent to the `Optional` constraint.\n\n### Array\n\nUse `Array` to specify an ordered collection, with multiplicity, of values of a class or datatype in which you may want random access to the data and which may be multi-dimensional. `Array` is implemented with intermediate indexed objects, with a `sys:value` and indexes placed at `sys:index`, `sys:index2`, … `sys:indexN` for each of the array indices of the multi-dimensional array. However when extracted as JSON they will appear merely as lists (possibly of lists), with possible null values representing gaps in the array.\n\n#### Code: An example of type family Array\n\n```\n{ \n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\" \n}\n{ \n    \"@id\"        : \"GeoPolygon\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"coordinates\"    : \n    { \n        \"@type\"  : \"Array\",\n        \"@dimensions\" : 2,\n        \"@class\" : \"xsd:decimal\" \n    }\n}\n```\n\nAn example of a polygon object `GeoPolygon` points to a 2D array of coordinates which specify a polygon encompassing the Phoneix Park.\n\n```\n{\n    \"@id\"           : \"PhoenixPark\",\n    \"@type\"         : \"GeoPolygon\",\n    \"name\"          : \"The Pheonix Park\",\n    \"coordinates\"   :\n    [\n      [\n        -6.3491535,\n        53.3700669\n      ],\n      [\n        -6.3364506,\n        53.3717056\n      ],\n      [\n        -6.349411,\n        53.3699645\n      ]\n    ]\n}\n```\n\n## Inference\n\nTerminusDB is equipped with a type inference engine that allows types to be inferred under certain conditions.\n\nThe algorithm attempts to find a _unique_ type that can successfully be ascribed to a document. In the event that no type is found, you will get an error that no type applies. If _several_ types might apply, you will see the list of candidate types in the error. If TerminusX is able to find the unique type which applies, it will ascribe the type automatically.\n\nType ascription is perhaps most useful in cases in which abstract types are used as ranges of a property, but in which there are only _sibling_ concrete types that might apply. In this case, it is easy to ensure a unique typing for the range class and improves the flexibility of the interface.\n\nIt should also be considered that the type being ascribed is based on the schema _as it is_ when the document is inserted. For this reason, in some cases it may be better to tag the document explicitly with the `@type` keyword.\n\n#### Code: An example of type inference\n\nGiven the following schema:\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\"\n}\n{\n    \"@id\"        : \"Person\",\n    \"@type\"      : \"Class\",\n    \"name\"       : \"xsd:string\",\n    \"friends\"    :\n    {\n        \"@type\"  : \"Set\",\n        \"@class\" : \"Person\"\n    }\n}\n```\n\nWe can insert the following document through the document interface:\n\n```\n{ \"name\" : \"Gavin\",\n  \"friends\" : [ { \"name\" : \"Tim\"}, { \"name\" : \"Julie\" }] }\n```\n\nThis document will be ascribed type `\"Person\"` and the two documents linked will likewise be typed as `\"Person\"`\n\n#### Code: An example of unambiguous inference\n\nIn the case of certain well-defined JSON documents schemata however, such as GeoJSON, there is never a possibility of ambiguity and so the type-inferencing helps to make it much more convenient.\n\n```\n{\n    \"@type\"      : \"@context\",\n    \"@base\"      : \"http://i/\",\n    \"@schema\"    : \"http://s/\"\n}\n{\n    \"@type\" : \"Class\",\n    \"@id\" : \"Geometry\",\n    \"@abstract\" : []\n}\n{\n    \"@type\" : \"Enum\",\n    \"@id\" : \"Point_Type\",\n    \"@value\" : [ \"Point\" ]\n}\n{\n    \"@type\" : \"Class\",\n    \"@id\" : \"Point\",\n    \"@inherits\" : \"Geometry\",\n    \"type\" : \"Point_Type\",\n    \"coordinates\" : {\n        \"@type\" : \"Array\",\n        \"@dimensions\" : 1,\n        \"@class\" : \"xsd:decimal\"\n    }\n}\n```\n\nThis schema provides the `\"Point\"` type with a singleton enum tag. This singleton enum tag will help to uniquely assign the type.\n\nWe can then insert a point document which might be written as:\n\n```\n{\n    \"type\" : \"Point\",\n    \"coordinates\" : [33.2,24.0]\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Schema Reference Guide",
      "description": "A reference guide for the TerminusCMS and TerminusDB schema",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "@terminusdb/terminusdb-client"
    },
    "slug": "javascript",
    "body": {
      "@type": "Body",
      "value": "### AccessControl\n\n#### accessRequestsList(orgName)\n\n\\-- TerminusX API -- Get all the access request list for a specify organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.accessRequestsList().then(result=>{\n console.log(result)\n})\n```\n\n#### createOrganization(orgName)\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Create an organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name to create\n\n##### Examples\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n#### createOrganizationRemote(orgName)\n\n\\-- TerminusX API --- IMPORTANT This does not work with the API-TOKEN. Create an organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name to create\n\n##### Examples\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n#### createRole(name, actions)\n\n\\--TerminusDB API --- basic authentication, admin user. Create a new role in the system database.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nname\n\nstring\n\nThe role name.\n\nactions\n\ntypedef.RolesActions\n\nA list of actions\n\n##### Examples\n\n```\naccessControl.createRole(\"Reader\",[ACTIONS.INSTANCE_READ_ACCESS]).then(result=>{\n console.log(result)\n})\n```\n\n#### createUser(name, password)\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Add the user into the system database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nname\n\nstring\n\nthe user name\n\npassword\n\nstring\n\nyou need the password for basic authentication\n\n##### Examples\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n#### createUserRole(userId, scope, role, orgName)\n\n\\-- TerminusX API -- Create a user's a role for a resource (organization/database)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserId\n\nstring\n\nThe user's id.\n\nscope\n\nstring\n\nThe resource name/id.\n\nrole\n\nstring\n\nThe user role to be assigned.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\naccessControl.assignUserRole('User/auth0%7C61790e11a3966d006906596a',dbId,\n\"Role/collaborator\").then(result=>{\n     console.log(result)\n\n})\n```\n\n#### customHeaders(customHeaders)\n\nadd extra headers to your request\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncustomHeaders\n\nobject\n\n#### deleteAccessRequest(orgName)\n\n\\-- TerminusX API -- Delete an access request to join your team, only an admin user can delete it\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.deleteAccessRequest(\"djjdshhsuuwewueueuiHYHYYW.......\").then(result=>{\n console.log(result)\n})\n```\n\n#### deleteOrgInvite(inviteId, orgName)\n\n\\-- TerminusX API --- Delete an invitation\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninviteId\n\nstring\n\nThe invite id to delete.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.deleteOrgInvite(fullInviteId).then(result=>{\n     console.log(result)\n})\n```\n\n#### deleteOrganization(orgName)\n\n\\-- TerminusDB API --- Delete an Organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name to delete\n\n##### Examples\n\n```\naccessControl.deleteOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n#### deleteRole(name)\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Delete role in the system database, (this api is enabled only in the local installation)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nname\n\nstring\n\nThe role name.\n\n##### Examples\n\n```\naccessControl.deleteRole(\"Reader\").then(result=>{\n console.log(result)\n})\n```\n\n#### deleteUser(userId)\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Remove the user from the system database.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserId\n\nstring\n\nthe document user id\n\n##### Examples\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n#### getAPIUrl(cloudAPIUrl)\n\nGet a API url from cloudAPIUrl\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncloudAPIUrl\n\nstring\n\nThe base url for cloud\n\n#### getAccessRoles()\n\n\\--TerminusX and TerminusDB API --- Get all the system database roles types.\n\n#### getAllOrganizations()\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Get list of organizations\n\n#### getAllUsers()\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Return the list of all the users (this api is enabled only in the local installation)\n\n##### Examples\n\n```\naccessControl.getAllUsers().then(result=>{\n console.log(result)\n})\n```\n\n#### getDatabaseRolesOfUser(userId, orgName)\n\n\\-- TerminusX API -- Get the user's role for every databases under the organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserId\n\nstring\n\nThe user's id.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.getDatabaseRolesOfUser('User/auth0%7C61790e366377Yu6596a').then(result=>{\n     console.log(result)\n})\n\n//this is a capabilities list of databases and roles\n//[ {capability: \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\n//if there is an id we have a user specific capabality for this database\n   // name: {@type: \"xsd:string\", @value: \"profiles_test\"}\n   // role: \"Role/dataUpdater\"\n   // scope: \"UserDatabase/7ebdfae5a02bc7e8f6d79sjjjsa4e179b1df9d4576a3b1d2e5ff3b4859\"\n   // user: \"User/auth0%7C61790e11a3966d006906596a\"},\n\n//{ capability: null\n// if the capability id is null the user level of access for this database is the\nsame of the team\n  //name: {@type: \"xsd:string\", @value: \"Collab002\"}\n  //role: \"Role/dataReader\"\n  // scope: \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\n  //user: \"User/auth0%7C61790e11a3966d006906596a\"}]\n```\n\n#### getDefaultOrganization(params)\n\nGet a organization from parameters.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nparams\n\nobject\n\nThe parameters\n\n#### getOrgInvite(inviteId, orgName)\n\n\\-- TerminusX API --- Get the invitation info\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninviteId\n\nstring\n\nThe invite id to retrieve.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc\n2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.getOrgInvite(fullInviteId).then(result=>{\n console.log(result)\n})\n```\n\n#### getOrgUsers(orgName)\n\n\\-- TerminusX and TerminusDB API -- Get all the organization's users and roles,\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\naccessControl.getOrgUsers().then(result=>{\n console.log(result)\n})\n\n//this function will return an array of capabilities with users and roles\n//-- TerminusX --  response array example\n//[{capability: \"Capability/3ea26e1d698821c570afe9cb4fe81a3......\"\n//     email: {@type: \"xsd:string\", @value: \"user@terminusdb.com\"}\n//     picture: {@type: \"xsd:string\",…}\n//     role: \"Role/dataReader\"\n//     scope: \"Organization/my_org_name\"\n//     user: \"User/auth0%7C613f5dnndjdjkTTT\"}]\n//\n//\n// -- Local Installation -- response array example\n//[{ \"@id\":\"User/auth0%7C615462f8ab33f4006a6bee0c\",\n//  \"capability\": [{\n//   \"@id\":\"Capability/c52af34b71f6f8916ac0115ecb5fe0e31248ead8b1e3d100852015...\",\n//   \"@type\":\"Capability\",\n//  \"role\": [{\n//    \"@id\":\"Role/admin\",\n//    \"@type\":\"Role\",\n//    \"action\": [\"instance_read_access\"],\n//     \"name\":\"Admin Role\"\n//     }],\n//  \"scope\":\"Organization/@team\"}]]\n```\n\n#### getOrganization(organization)\n\n\\-- TerminusDB API --- Get an organization from the TerminusDB API.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norganization\n\nstring\n\nThe organization\n\n#### getPendingOrgInvites(orgName)\n\n\\-- TerminusX API --- Get the pending invitations list.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst invitationList = accessControl.getPendingOrgInvites().then(result=>{\n   console.log(invitationList)\n\n})\n//this will return an array of invitations object like this\n//[{@id: \"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc2ac51161ef5ba\ncb0988d992c4bce82b3fa5d25\"\n//      @type: \"Invitation\"\n//      creation_date: \"2021-10-22T11:13:28.762Z\"\n//      email_to: \"new_user@terminusdb.com\"\n//      invited_by: \"User/auth0%7C6162f8ab33567406a6bee0c\"\n//      role: \"Role/dataReader\"\n//      status: \"needs_invite\"}]\n```\n\n#### getTeamUserRole(orgName)\n\n\\-- TerminusX API --- Get the user role for a given organization or the default organization The user is identified by the jwt or the access token\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.getTeamUserRole().then(result=>{\n console.log(result)\n})\n\n//response object example\n{\"userRole\":\"Role/admin\"}\n```\n\n#### getTeamUserRoles(userName, orgName)\n\n\\-- TerminusX and TerminusDB API -- Get the user roles for a given organization or the default organization,\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserName\n\nstring\n\nThe organization name.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.getTeamUserRole(\"myUser\").then(result=>{\n console.log(result)\n})\n\n//response object example\n{\n \"@id\": \"User/myUser\",\n  \"capability\": [\n        {\n          \"@id\":\"Capability/server_access\",\n          \"@type\":\"Capability\",\n          \"role\": [{\n             \"@id\":\"Role/reader\",\n              \"@type\":\"Role\",\n             \"action\": [\n                \"instance_read_access\",\n             ],\n              \"name\":\"reader\"\n            }],\n          \"scope\":\"Organization/myteam\"\n        }\n      ],\n  \"name\": \"myUser\"\n}\n```\n\n#### getUserInfo(orgName)\n\n\\-- TerminusX API -- Get the userinfo teams ownership and subscription\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.getUserInfo().then(result=>{\n   console.log(result)\n})\n```\n\n#### ifOrganizationExists(orgName)\n\n\\-- TerminusX API --- Check if the organization exists. it is a Head call . IMPORTANT This does not work with the API-TOKEN.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nThe organization name to check if exists.\n\n#### manageCapability(userName, resourceName, rolesArr, operation, scopeType)\n\n\\-- TerminusdDB API --- Grant/Revoke Capability\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserName\n\nstring\n\nthe document user id\n\nresourceName\n\nstring\n\nthe name of a (database or team)\n\nrolesArr\n\narray\n\nthe roles name list\n\noperation\n\ntypedef.CapabilityCommand\n\ngrant/revoke operation\n\nscopeType\n\ntypedef.ScopeType\n\nthe resource type (database or organization)\n\n##### Examples\n\n```\n//we add an user to an organization and manage users' access\n//the user myUser can  access the Organization and all the database under the organization with \"reader\" Role\nclient.manageCapability(myUser,myteam,[reader],\"grant\",\"organization\").then(result=>{\n consol.log(result)\n})\n\n//the user myUser can  access the database db__001 under the organization myteam\n//with \"writer\" Role\nclient.manageCapability(myUser,myteam/db__001,[writer],\"grant\",\"database\").then(result=>{\n consol.log(result)\n})\n```\n\n#### removeUserFromOrg(userId, orgName)\n\n\\-- TerminusX API -- Remove an user from an organization, only an admin user can remove an user from an organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserId\n\nstring\n\nThe id of the user to be removed. (this is the document user's @id)\n\norgName\n\nstring\n\nThe organization name in which the user is to be removed.\n\n##### Examples\n\n```\naccessControl.removeUserFromOrg(\"User/auth0%7C613f5dnndjdjkTTT\",\"my_org_name\").then(result=>{\n console.log(result)\n})\n```\n\n#### sendAccessRequest(email, affiliation, note, orgName)\n\n\\-- TerminusX API -- Get all the access request list for a specify organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nemail\n\nstring\n\nthe user email.\n\naffiliation\n\nstring\n\nthe user affiliation, company, university etc..\n\nnote\n\nstring\n\nthe message for the team admin\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.sendAccessRequest(\"myemail@terminusdb.com\",\n \"my_company\",\n \"please add me to your team\"\n).then(result=>{\n console.log(result)\n})\n```\n\n#### sendOrgInvite(userEmail, role, note, orgName)\n\n\\-- TerminusX API --- Send a new invitation\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserEmail\n\nstring\n\nThe email of user.\n\nrole\n\nstring\n\nThe role for user. (the document @id role like Role/collaborator)\n\nnote\n\nstring\n\nThe note to send with the invitation.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```\naccessControl.sendOrgInvite(\"new_user@terminusdb.com\",\"Role/admin\",\n\"please join myteam\").then(result=>{\n   console.log(result)\n})\n```\n\n#### setApiKey(atokenpi)\n\nSets the API token for the object, to request a token create an account in https://terminusdb.com/\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\natokenpi\n\nstring\n\nThe API token to use to connect with TerminusX\n\n#### setApiToken(atokenpi)\n\nSets the API token for the object, to request a token create an account in https://terminusdb.com/\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\natokenpi\n\nstring\n\nThe API token to use to connect with TerminusX\n\n#### setJwtToken(jwt)\n\nSets the Jwt token for the object\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njwt\n\nstring\n\nThe jwt api token to use\n\n#### updateOrgInviteStatus(inviteId, accepted, orgName)\n\n\\-- TerminusX API --- Accept /Reject invitation. if the invitation has been accepted we add the current user to the organization. the only user that can accept this invitation is the user registered with the invitation email, we indentify the user with the jwt token\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninviteId\n\nstring\n\nThe invite id to updated.\n\naccepted\n\nboolean\n\nThe status of the invitation.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.updateOrgInviteStatus(fullInviteId,true).then(result=>{\n  console.log(result)\n})\n```\n\n#### updateUserRole(userId, capabilityId, scope, role, orgName)\n\n\\-- TerminusX API -- Update user's a role for a resource (organization/database), (this api works only in terminusX)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nuserId\n\nstring\n\nThe user's id.\n\ncapabilityId\n\nstring\n\nThe capability id.\n\nscope\n\nstring\n\nThe resource name/id.\n\nrole\n\nstring\n\nThe user role to be updated.\n\norgName\n\nstring\n\nThe organization name.\n\n##### Examples\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\nconst capId= \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\naccessControl.updateUserRole('User/auth0%7C61790e11a3966d006906596a',capId,dbId,\n\"Role/dataUpdater\").then(result=>{\n     console.log(result)\n\n})\n```\n\n### View\n\n#### matchCell()\n\nCalled to test whether a specific cell is matched by a set of rules returns array of rules that matched\n\n#### matchColumn()\n\nCalled to test whether an entire column of results is matched by a set of rules returns array of rules that matched\n\n#### matchEdge()\n\nCalled to test whether a specific edge (source -> target) is matched by a set of rules returns array of rules that matched\n\n#### matchFrame()\n\nCalled to test whether a specific frame is matched by a set of rules\n\n#### matchNode()\n\nCalled to test whether a specific node is matched by a set of rules returns array of rules that matched\n\n#### matchRow()\n\nCalled to match an entire row of results is matched by a set of rules returns array of rules that matched\n\n#### rule()\n\nShorthand functions for accessing the pattern matching capabilities\n\n### WOQL\n\n#### Vars(varNames)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring\n\n##### Examples\n\n```javascript\nconst v = WOQL.Vars('var01', 'var02', 'var03');\ntriple(v.var01, v.var02, v.var03)\n```\n\n#### add\\_quad(subject, predicate, object, graphRef-)\n\nAdds quads according to the pattern \\[S,P,O,G\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### add\\_triple(subject, predicate, object)\n\nAdds triples according to the the pattern \\[subject,predicate,object\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### added\\_quad(subject, predicate, object, graphRef-)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph) removed from the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### added\\_triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object) added in the current layer\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### all(subject, predicate, object, graphRef)\n\nGenerates a query that by default matches all triples in a graph - identical to star() except for order of arguments\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nthe resource identifier of a graph possible value are schema/{main - myschema - \\*} | instance/{main - myschema - \\*} | inference/{main - myschema - \\*}\n\n#### and(subqueries)\n\nLogical conjunction of the contained queries - all queries must match or the entire clause fails\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubqueries\n\nWOQLQuery\n\nA list of one or more woql queries to execute as a conjunction\n\n##### Examples\n\n```javascript\n//find triples that are of type scm:Journey, and have\n//a start_station Start, and that start_station is labeled Start_Label\nlet [Journey, Start, Start_Label] = vars(\"Journey\", \"Start\", \"Start_Label\")\nWOQL.and(\n     WOQL.triple(Journey, \"rdf:type\", \"@schema:Journey\"),\n     WOQL.triple(Journey, \"start_station\", Start),\n     WOQL.triple(Start, \"label\", Start_Label))\n```\n\n#### as(source, target, type)\n\nImports the value identified by Source to a Target variable\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsource\n\nstring|number|Var\n\nSource\n\ntarget\n\nstring|Var\n\nTarget\n\ntype\n\nstring\n\ntype to cast value to string|number etc...\n\n##### Examples\n\n```javascript\nlet [First_Var, Second_Var] = vars('First_Var', 'Second_Var')\nWOQL.as(\"first var\", First_Var, \"string\").as(\"second var\", Second_Var)\nWOQL.as([\"first var\", First_Var, \"string\"], [\"second var\", Second_Var])\n```\n\n#### boolean(bool)\n\nGenerates explicitly a JSON-LD literal boolean from the input\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbool\n\nboolean\n\ntrue | false\n\n##### Examples\n\n```\nboolean(true)\n//returns { \"@type\": \"xsd:boolean\", \"@value\": true }\n```\n\n#### client(client)\n\nUse instead to run your query woqlclient.query('myWOQLQuery')\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclient\n\nWOQLClient\n\n#### comment(comment, subquery)\n\nAdds a text comment to a query - can also be used to wrap any part of a query to turn it off\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncomment\n\nstring\n\ntext comment\n\nsubquery\n\nWOQLQuery\n\nquery that is \"commented out\"\n\n#### concat(varList, resultVarName)\n\ntakes a variable number of string arguments and concatenates them into a single string\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\narray|string|Var\n\na variable representing a list or a list of variables or strings - variables can be embedded in the string if they do not contain spaces\n\nresultVarName\n\nstring|Var\n\nA variable or string containing the output string\n\n##### Examples\n\n```javascript\nlet [first_name, last_name, full_name] = vars(\"first_name\", \"last_name\", \"full_name\")\nconcat([first_name, \" \", last_name], full_name)\n```\n\n#### count(countVarName, subquery)\n\nCreates a count of the results of the query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncountVarName\n\nstring|number|Var\n\nvariable or integer count\n\nsubquery\n\nWOQLQuery\n\n##### Examples\n\n```javascript\nlet [count, Person] = vars(\"count\", \"Person\")\nWOQL.count(count).triple(Person, \"rdf:type\", \"@schema:Person\")\n```\n\n#### date(date)\n\nGenerates explicitly a JSON-LD literal date from the imput\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndate\n\nstring\n\nany date format string (YYYY-MM-DD)\n\n##### Examples\n\n```\ndate(\"2022-10-02\")\n//returns { \"@type\": \"xsd:date\", \"@value\": \"2022-10-02\" }\n```\n\n#### datetime(datetime)\n\nGenerates explicitly a JSON-LD literal datetime from the imput\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndatetime\n\nstring\n\nany datetime format string (YYYY-MM-DDThh-mm-ssZ)\n\n##### Examples\n\n```\ndatetime(\"2022-10-19T14:17:12Z\")\n//returns { \"@type\": \"xsd:dateTime\", \"@value\": \"2022-10-19T14:17:12Z\" }\n```\n\n#### delete\\_document(IRI)\n\nDelete a document from the graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nIRI\n\nstring\n\nThe document id or a variable\n\n#### delete\\_quad(subject, predicate, object, graphRef)\n\nDeletes a single triple from the graph \\[Subject, Predicate, Object, Graph\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n##### Examples\n\n```python\nremove the class Person from the schema graph\nWOQL.delete_quad(\"Person\", \"rdf:type\", \"sys:Class\", \"schema\")\n```\n\n#### delete\\_triple(subject, predicate, object)\n\nDeletes a single triple from the default graph of the database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n##### Examples\n\n```\ndelete_triple(\"john\", \"age\", 42)\n```\n\n#### distinct(varNames)\n\nFilter the query to return only results that are distinct in the given variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring|Var\n\nthese variables are guaranteed to be unique as a tuple\n\n#### div(args)\n\nDivision - integer division - args are divided left to right\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nnumbers for division\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(div(10, 3), result)\n//result contains 3\n```\n\n#### divide(args)\n\nDivides numbers N1...Nn by each other left, to right precedence\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nnumbers to tbe divided\n\n#### doc(object)\n\nProduces an encoded form of a document that can be used by a WOQL operation such as \\`WOQL.insert\\_document\\`.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nobject\n\nobject\n\nDocument to encode\n\n##### Examples\n\n```javascript\nconst doc = WOQL.doc({ \"@type\": \"Person\", name: \"Newperson\" })\n```\n\n#### dot(document, field, value)\n\nExtract the value of a key in a bound document.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\nstring|Var\n\nDocument which is being accessed.\n\nfield\n\nstring|Var\n\nThe field from which the document which is being accessed.\n\nvalue\n\nstring|Var\n\nThe value for the document and field.\n\n#### emerge(auto\\_eval)\n\nquery module allow you to use WOQL words as top level functions\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nauto\\_eval\n\n\\*\n\n#### eq(varName, varValue)\n\nMatches if a is equal to b\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarName\n\nstring|Var\n\nliteral, variable or id\n\nvarValue\n\nstring|Var\n\nliteral, variable or id\n\n#### eval(arithExp, resultVarName)\n\nEvaluates the passed arithmetic expression and generates or matches the result value\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\narithExp\n\nobject|WOQLQuery|string\n\nquery or JSON-LD representing the query\n\nresultVarName\n\nstring|Var\n\noutput variable\n\n#### evaluate(arithExp, resultVarName)\n\nEvaluates the passed arithmetic expression and generates or matches the result value\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\narithExp\n\nobject|WOQLQuery|string\n\nA WOQL query containing a valid WOQL Arithmetic Expression, which is evaluated by the function\n\nresultVarName\n\nstring|number|Var\n\nEither a variable, in which the result of the expression will be stored, or a numeric literal which will be used as a test of result of the evaluated expression\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(plus(2, minus(3, 1)), result)\n```\n\n#### exp(varNum, expNum)\n\nExponent - raises varNum01 to the power of varNum02\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum\n\nstring|number|Var\n\na variable or numeric containing the number to be raised to the power of the second number\n\nexpNum\n\nnumber\n\na variable or numeric containing the exponent\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(exp(3, 2), result)\n//result contains 9\n```\n\n#### floor(varNum)\n\nGenerates the nearest lower integer to the passed number\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum\n\nstring|number|Var\n\nVariable or numeric containing the number to be floored\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(divide(floor(times(10, minus(2.1, plus(0.2, 1)))), 10), result)\n//result contains 0.9 - floating point error removed\n```\n\n#### from(graphRef-, query)\n\nSpecifies the database URL that will be the default database for the enclosed query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\nquery\n\nWOQLQuery\n\nThe query\n\n#### get(asvars, queryResource)\n\nUse the document inteface to import documents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nasvars\n\nVars|array.<Var>\n\nan array of AsVar variable mappings (see as for format below)\n\nqueryResource\n\nWOQLQuery\n\nan external resource (remote, file, post) to query\n\n##### Examples\n\n```python\nlet [a, b] = vars(\"a\", \"b\")\nget(as(\"a\", a).as(\"b\", b)).remote(\"http://my.url.com/x.csv\")\n//copies the values from column headed \"a\" into a variable a and from column\n//\"b\" into a variable b from remote CSV\n```\n\n#### graph(graphRef)\n\nSets the graph resource ID that will be used for subsequent chained function calls\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph which will be used for subsequent chained schema calls\n\n##### Examples\n\n```\nWOQL.graph(\"schema\")\n//equivalent to add_quad(\"MyClass\", \"label\", \"My Class Label\", \"schema/main\")\n```\n\n#### greater(varNum01, varNum02)\n\nCompares the value of v1 against v2 and returns true if v1 is greater than v2\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum01\n\nstring|number|Var\n\na variable or numeric containing the number to be compared\n\nvarNum02\n\nstring|number|Var\n\na variable or numeric containing the second comporator\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\ngreater(1.2, 1.1).eq(result, literal(true, \"boolean\"))\n//result contains true\n```\n\n#### group\\_by(varList, patternVars, resultVarName, subquery)\n\nGroups the results of the contained subquery on the basis of identical values for Groupvars, extracts the patterns defined in PatternVars and stores the results in GroupedVar\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\narray|string|Var\n\nEither a single variable or an array of variables\n\npatternVars\n\narray|string|Var\n\nEither a single variable or an array of variables\n\nresultVarName\n\nstring|Var\n\noutput variable name\n\nsubquery\n\nWOQLQuery\n\nThe query whose results will be grouped\n\n##### Examples\n\n```javascript\n//subquery is an argument or a chained query\nlet [age, last_name, first_name, age_group, person] = vars(\"age\", \"last name\", \"first name\",\n\"age group\", \"person\")\ngroup_by(age, [last_name, first_name], age_group)\n  .triple(person, \"first_name\", first_name)\n  .triple(person, \"last_name\", last_name)\n  .triple(person, \"age\", age)\n```\n\n#### idgen(prefix, inputVarList, resultVarName)\n\nGenerate a new IRI from the prefix and concatention of the variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nprefix\n\nstring\n\nA prefix for the IRI - typically formed of the doc prefix and the classtype of the entity (“doc:Person”)\n\ninputVarList\n\narray|string|Var\n\nAn array of variables and / or strings from which the unique hash will be generated\n\nresultVarName\n\nstring|Var\n\nVariable in which the unique ID is stored\n\n##### Examples\n\n```javascript\nlet [newid] = vars(\"newid\")\nidgen(\"doc:Person\", [\"John\", \"Smith\"], newid)\n```\n\n#### immediately(subquery)\n\nRuns the query without backtracking on side-effects\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nWOQL Query objects\n\n#### insert(classId, classType, graphRef)\n\nInserts a single triple into the database declaring the Node to have type Type, optionally into the specified graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclassId\n\nstring|Var\n\nIRI string or variable containing the IRI of the node to be inserted\n\nclassType\n\nstring|Var\n\nIRI string or variable containing the IRI of the type of the node (class/document name)\n\ngraphRef\n\ntypedef.GraphRef\n\nOptional Graph resource identifier\n\n##### Examples\n\n```\ninsert(\"mydoc\", \"MyType\")\n//equivalent to add_triple(\"mydoc\", \"rdf:type\", \"@schema:MyType\")\n```\n\n#### insert\\_document(docjson, IRI)\n\nInsert a document in the graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocjson\n\nobject\n\nThe document to insert. Must either have an '@id' or have a class specified key.\n\nIRI\n\nstring\n\nAn optional identifier specifying the document location.\n\n##### Examples\n\n```javascript\nconst res = await client.query(\n   WOQL.insert_document(WOQL.doc({ \"@type\" : \"Person\", \"label\": \"John\" }))\n)\n```\n\n#### into(graphRef-, subquery)\n\nSpecifies the graph resource to write the contained query into\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\nsubquery\n\nWOQLQuery\n\nThe query which will be written into the graph\n\n##### Examples\n\n```\n//Subq is an argument or a chained query\nusing(\"admin/minecraft\").into(\"instance/main\").add_triple(\"a\", \"rdf:type\", \"@schema:X\")\n//writes a single tripe (doc:a, rdf:type, scm:X) into the main instance graph\n```\n\n#### iri(val)\n\nExplicitly sets a value to be an IRI - avoiding automatic type marshalling\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nval\n\nstring\n\nstring which will be treated as an IRI\n\n#### isa(instanceIRI, classId)\n\nTests whether a given instance IRI has type Class, according to the current state of the DB\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninstanceIRI\n\nstring|Var\n\nA string IRI or a variable that identify the class instance\n\nclassId\n\nstring|Var\n\nA Class IRI or a variable\n\n##### Examples\n\n```javascript\nlet [subject] = vars(\"subject\")\nisa(subject, \"Person\")\n```\n\n#### join(varList, glue, resultVarName)\n\nJoins a list variable together (Input) into a string variable (Output) by glueing the strings together with Glue\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\nstring|array|Var\n\na variable representing a list or a list of strings and / or variables\n\nglue\n\nstring|Var\n\nA variable (v:glue) or (glue) string representing the characters to put in between the joined strings in input\n\nresultVarName\n\nstring|Var\n\nA variable or string containing the output string\n\n##### Examples\n\n```javascript\nlet [sentence] = vars(\"sentence\")\njoin([\"joe\", \"has\", \"a\", \"hat\", \" \", sentence)\n```\n\n#### json(JSON\\_LD)\n\nGenerates a WOQLQuery object from the passed WOQL JSON - if an argument is passed, the query object is created from it, if none is passed, the current state is returned as a JSON-LD\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nJSON\\_LD\n\nobject\n\nJSON-LD woql document encoding a query\n\n#### length(inputVarList, resultVarName)\n\nCalculates the length of the list in va and stores it in vb\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarList\n\nstring|array\n\nEither a variable representing a list or a list of variables or literals\n\nresultVarName\n\nstring|Var\n\nA variable in which the length of the list is stored or the length of the list as a non-negative integer\n\n##### Examples\n\n```javascript\nlet [count] = vars(\"count\")\nlength([\"john\", \"joe\", \"frank\"], count)\n```\n\n#### less(varNum01, varNum02)\n\nCompares the value of v1 against v2 and returns true if v1 is less than v2\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum01\n\nstring|number|Var\n\na variable or numeric containing the number to be compared\n\nvarNum02\n\nstring|number|Var\n\na variable or numeric containing the second comporator\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nless(1, 1.1).eq(result, literal(true, \"boolean\"))\n//result contains true\n```\n\n#### lib()\n\nget the predefined library query \\[WOQLLibrary\\](/api/woqlLibrary.js?id=WOQLLibrary)\n\n##### Examples\n\n```python\n//get commits older than the specified commit id\nconst query = WOQL.lib().previousCommits('m8vpxewh2aovfauebfkbzwmj4qwr5lb')\n\n//return the commits of a specific branch starting from the head\n//you can add the limit (how many results to return.) and the start point\n//if a timestamp is given, gets the commits before the specified timestamp\n//WOQL.lib().commits(branch='main',limit=0,start=0,timestamp=0)\n\nconst query = WOQL.lib().commits('main',10,2,1630683082.9278786)\n\n//return the branches list with the timestamp and commits id\nconst query = WOQL.lib().branches()\n```\n\n#### like(stringA, stringB, distance)\n\nGenerates a string Leverstein distance measure between stringA and stringB\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstringA\n\nstring|Var\n\nstring literal or variable representing a string to be compared\n\nstringB\n\nstring|Var\n\nstring literal or variable representing the other string to be compared\n\ndistance\n\nnumber|string|Var\n\nvariable representing the distance between the variables\n\n##### Examples\n\n```javascript\nlet [dist] = vars('dist')\nlike(\"hello\", \"hallo\", dist)\n//dist contains 0.7265420560747664\n```\n\n#### limit(limit, subquery)\n\nSpecifies a maximum number of results that will be returned from the subquery\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nlimit\n\nnumber|string\n\nA variable that refers to an non-negative integer or a non-negative integer\n\nsubquery\n\nWOQLQuery\n\nA subquery whose results will be limited\n\n##### Examples\n\n```javascript\nlet [a, b, c] = vars(\"a\", \"b\", \"c\")\nlimit(100).triple(a, b, c)\n//subquery is an argument or a chained query\nlimit(100,triple(a, b, c))\n```\n\n#### link(subject, predicate, object)\n\nCreates a pattern matching rule for a triple \\[Subject, Predicate, Object\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### literal(val, type)\n\nGenerates explicitly a JSON-LD string literal from the input\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nval\n\nstring\n\nany literal type\n\ntype\n\nstring\n\nan xsd or xdd type\n\n##### Examples\n\n```\nliteral(1, \"nonNegativeInteger\")\n//returns { \"@type\": \"xsd:nonNegativeInteger\", \"@value\": 1 }\n```\n\n#### lower(inputVarName, resultVarName)\n\nChanges a string to lower-case\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nstring or variable representing the non-lowercased string\n\nresultVarName\n\nstring|Var\n\nvariable that stores the lowercased string output\n\n##### Examples\n\n```javascript\nlet [lower] = var(\"l\")\nlower(\"aBCe\", lower)\n//lower contains \"abce\"\n```\n\n#### member(element, list)\n\nMatches if List includes Element\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nelement\n\nstring|object|Var\n\nEither a variable, IRI or any simple datatype\n\nlist\n\nstring|array|Var\n\nList (\\[string, literal\\] or string\\*) Either a variable representing a list or a list of variables or literals\n\n##### Examples\n\n```javascript\nlet [name] = vars(\"name\")\nmember(name, [\"john\", \"joe\", \"frank\"])\n```\n\n#### minus(args)\n\nSubtracts Numbers N1..Nn\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nvariable or numeric containing the value that will be subtracted from\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(minus(2.1, plus(0.2, 1)), result)\n```\n\n#### node(nodeid, chainType)\n\nSpecifies the identity of a node that can then be used in subsequent builder functions. Note that node() requires subsequent chained functions to complete the triples / quads that it produces - by itself it only generates the subject.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnodeid\n\nstring|Var\n\nThe IRI of a node or a variable containing an IRI which will be the subject of the builder functions\n\nchainType\n\ntypedef.FuntionType\n\nOptional type of builder function to build (default is triple)\n\n##### Examples\n\n```\nnode(\"mydoc\").label(\"my label\")\n//equivalent to triple(\"mydoc\", \"label\", \"my label\")\n```\n\n#### not(subquery)\n\nLogical negation of the contained subquery - if the subquery matches, the query will fail to match\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nA subquery which will be negated\n\n##### Examples\n\n```javascript\nlet [subject, label] = vars(\"subject\", \"label\")\nnot().triple(subject, 'label', label)\n```\n\n#### nuke(graphRef)\n\nDeletes all triples in the passed graph (defaults to instance/main)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph from which all triples will be removed\n\n##### Examples\n\n```python\nnuke(\"schema/main\")\n//will delete everything from the schema/main graph\n```\n\n#### once(subquery)\n\nResults in one solution of the subqueries\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nWOQL Query objects\n\n#### opt(subquery)\n\nSpecifies that the Subquery is optional - if it does not match the query will not fail\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nWOQLQuery\n\nA subquery which will be optionally matched\n\n##### Examples\n\n```javascript\nlet [subject] = vars(\"subject\")\nopt(triple(subject, 'label', \"A\"))\n//Subq is an argument or a chained query\nopt().triple(subject, 'label', \"A\")\n```\n\n#### or(subqueries)\n\nCreates a logical OR of the arguments\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubqueries\n\nWOQLQuery\n\nA list of one or more woql queries to execute as alternatives\n\n##### Examples\n\n```javascript\nlet [Subject] = vars(\"Subject\")\nor(\n  triple(Subject, 'label', \"A\"),\n  triple(Subject, \"label\", \"a\")\n )\n```\n\n#### order\\_by(varNames)\n\nOrders the results of the contained subquery by a precedence list of variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring|Var|array\n\nA sequence of variables, by which to order the results, each optionally followed by either “asc” or “desc” to represent order as a list, by default it will sort the variable in ascending order\n\n##### Examples\n\n```javascript\nlet [A, B, C] = vars(\"A\", \"B\", \"C\")\nWOQL.order_by(A, [B, \"asc\"], [C, \"desc\"]).triple(A, B, C);\n```\n\n#### pad(inputVarName, pad, len, resultVarName)\n\nPads out the string input to be exactly len long by appending the pad character pad to form output\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nThe input string or variable in unpadded state\n\npad\n\nstring|Var\n\nThe characters to use to pad the string or a variable representing them\n\nlen\n\nnumber|string|Var\n\nThe variable or integer value representing the length of the output string\n\nresultVarName\n\nstring|Var\n\nstores output\n\n##### Examples\n\n```javascript\nlet [fixed] = vars(\"fixed length\")\npad(\"joe\", \" \", 8, fixed)\n//fixed contains \"joe     \"\n```\n\n#### path(subject, pattern, object, resultVarName)\n\nPerforms a path regular expression match on the graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nAn IRI or variable that refers to an IRI representing the subject, i.e. the starting point of the path\n\npattern\n\nstring\n\n(string) - A path regular expression describing a pattern through multiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)\n\nobject\n\nstring|Var\n\nAn IRI or variable that refers to an IRI representing the object, i.e. ending point of the path\n\nresultVarName\n\nstring|Var\n\nA variable in which the actual paths traversed will be stored\n\n##### Examples\n\n```javascript\nlet [person, grand_uncle, lineage] = vars(\"person\", \"grand uncle\", \"lineage\")\npath(person, \"((father|mother) {2,2}), brother)\", grand_uncle, lineage)\n```\n\n#### plus(args)\n\nAdds the numbers together\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\na variable or numeric containing the values to add\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(plus(2, plus(3, 1)), result)\n```\n\n#### post(url, formatObj, source)\n\nIdentifies a resource as a local path on the client, to be sent to the server through a HTTP POST request, with the format defined through the options\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nurl\n\nstring\n\nThe Path on the server at which the file resource can be accessed\n\nformatObj\n\ntypedef.DataFormatObj\n\nimput options, optional\n\nsource\n\nstring\n\nIt defines the source of the file, it can be 'url','post'\n\n##### Examples\n\n```\npost(\"/.../.../\", {type:'csv'})\n```\n\n#### put(varsToExp, query, fileResource)\n\nUse the document inteface to import documents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarsToExp\n\nVars|array.<Var>\n\nan array of AsVar variable mappings (see as for format below)\n\nquery\n\nWOQLQuery\n\nThe query which will be executed to produce the results\n\nfileResource\n\nstring\n\nan file resource local to the server\n\n#### quad(subject, predicate, object, graphRef)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### query()\n\nGenerates an empty WOQLQuery object\n\n##### Examples\n\n```javascript\nlet q = query()\n//then q.triple(1, 1) ...\n```\n\n#### re(pattern, inputVarName, resultVarList)\n\nMatches the regular expression defined in Patern against the Test string, to produce the matched patterns in Matches\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\npattern\n\nstring\n\nstring or variable using normal PCRE regular expression syntax with the exception that special characters have to be escaped twice (to enable transport in JSONLD)\n\ninputVarName\n\nstring|Var\n\nstring or variable containing the string to be tested for patterns with the regex\n\nresultVarList\n\nstring|array|object|Var\n\nvariable representing the list of matches or a list of strings or variables\n\n##### Examples\n\n```javascript\nlet [All, Sub] = vars(\"All\", \"Sub\")\nWOQL.re(\"h(.).*\", \"hello\", [All, Sub])\n//e contains 'e', llo contains 'llo'\n//p is a regex pattern (.*) using normal regular expression syntax, the only unusual\nthing is that special characters have to be escaped twice, s is the string to be matched\nand m is a list of matches:\n```\n\n#### read\\_document(IRI, output)\n\nRead a node identified by an IRI as a JSON-LD document\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nIRI\n\nstring\n\nThe document id or a variable to read\n\noutput\n\nstring\n\nVariable which will be bound to the document.\n\n##### Examples\n\n```javascript\nlet [person] = vars(\"Person\")\nconst query = WOQL.read_document(\n     \"Person/0b4feda109d9d13c9da809090b342ad9e4d8185545ce05f7cd20b97fe458f547\",\n    person\n);\nconst res =  await client.query(query);\n```\n\n#### read\\_object()\n\nUse {@link #read\\_document|read\\_document} instead.\n\n#### remote(remoteObj, formatObj)\n\nIdentifies a remote resource by URL and specifies the format of the resource through the options\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremoteObj\n\nobject\n\nThe URL at which the remote resource can be accessed\n\nformatObj\n\ntypedef.DataFormatObj\n\nThe format of the resource data {}\n\n##### Examples\n\n```\nremote({url:\"http://url.of.resource\"}, {type: \"csv\"})\n```\n\n#### removed\\_quad(subject, predicate, object, graphRef-)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph) removed from the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### removed\\_triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object) added in the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### select(varNames)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring|Var\n\nonly these variables are returned\n\n##### Examples\n\n```javascript\nlet [a, b, c] = vars(\"a\", \"b\", \"c\")\nWOQL.select(a, triple(a, b, c))\nFilters the query so that only the variables included in [V1...Vn] are returned in the bindings\n```\n\n#### size(resourceId, resultVarName)\n\nCalculates the size in bytes of the contents of the resource identified in ResourceID\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nresourceId\n\nstring|Var\n\nA valid resource identifier string (can refer to any graph / branch / commit / db)\n\nresultVarName\n\nstring|Var\n\nThe variable name\n\n##### Examples\n\n```javascript\nlet [varSize] = vars(\"varSize\")\nsize(\"admin/minecraft/local/branch/main/instance/main\", varSize)\n//returns the number of bytes in the main instance graph on the main branch\n```\n\n#### split(inputVarName, separator, resultVarName)\n\nSplits a string (Input) into a list strings (Output) by removing separator\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nA string or variable representing the unsplit string\n\nseparator\n\nstring|Var\n\nA string or variable containing a sequence of charatcters to use as a separator\n\nresultVarName\n\nstring|Var\n\nvariable that stores output list\n\n##### Examples\n\n```javascript\nlet [words] = vars(\"words\")\nsplit(\"joe has a hat\", \" \", words)\n```\n\n#### star(graph, subject, predicate, object)\n\nGenerates a query that by default matches all triples in a graph identified by \"graph\" or in all the current terminusDB's graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\n\nstring|boolean\n\nfalse or the resource identifier of a graph possible value are schema/{main - myschema - \\*} | instance/{main - myschema - \\*} | inference/{main - myschema - \\*}\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable, default value \"v:Subject\"\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable, default value \"v:Predicate\"\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal, default value \"v:Object\"\n\n##### Examples\n\n```\nstar(\"schema/main\")\n//will return every triple in schema/main graph\n```\n\n#### start(start, subquery)\n\nSpecifies an offset position in the results to start listing results from\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstart\n\nnumber|string|Var\n\nA variable that refers to an interger or an integer literal\n\nsubquery\n\nWOQLQuery\n\nWOQL Query object, you can pass a subquery as an argument or a chained query\n\n##### Examples\n\n```javascript\nlet [a, b, c] = vars(\"a\", \"b\", \"c\")\nstart(100).triple(a, b, c)\n```\n\n#### string(val)\n\nGenerates explicitly a JSON-LD string literal from the input\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nval\n\nstring|boolean|number\n\nany primitive literal type\n\n##### Examples\n\n```\nstring(1)\n//returns { \"@type\": \"xsd:string\", \"@value\": \"1\" }\n```\n\n#### sub(classA, classB)\n\nReturns true if ClassA subsumes ClassB, according to the current DB schema\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclassA\n\nstring\n\nClassA\n\nclassB\n\nstring\n\nClassB\n\n#### substr(string, before, length, after, substring)\n\nSubstring\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstring\n\nstring|Var\n\nString or variable\n\nbefore\n\nnumber|Var\n\ninteger or variable (characters from start to begin)\n\nlength\n\nnumber|Var\n\ninteger or variable (length of substring)\n\nafter\n\nnumber|Var\n\ninteger or variable (number of characters after substring)\n\nsubstring\n\nstring|Var\n\nString or variable\n\n#### sum(subquery, total)\n\ncomputes the sum of the List of values passed. In contrast to other arithmetic functions, sum self-evaluates - it does not have to be passed to evaluate()\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nWOQLQuery\n\na subquery or (\\[string or numeric\\]) - a list variable, or a list of variables or numeric literals\n\ntotal\n\nstring|Var\n\nthe variable name with the sum result of the values in List\n\n##### Examples\n\n```javascript\nlet [total] = vars(\"total\")\nsum([2, 3, 4, 5], total)\n```\n\n#### times(args)\n\nMultiplies numbers N1...Nn together\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\na variable or numeric containing the value\n\n##### Examples\n\n```javascript\nlet [result] = vars(\"result\")\nevaluate(times(10, minus(2.1, plus(0.2, 1))), result)\n //result contains 9.000000000000002y\n```\n\n#### trim(inputStr, resultVarName)\n\nRemove whitespace from both sides of a string:\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputStr\n\nstring|Var\n\nA string or variable containing the untrimmed version of the string\n\nresultVarName\n\nstring|Var\n\nA string or variable containing the trimmed version of the string\n\n##### Examples\n\n```javascript\nlet [trimmed] = vars(\"trimmed\")\ntrim(\"hello   \", trimmed)\n//trimmed contains \"hello\"\n```\n\n#### triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### triple\\_count(resourceId, tripleCount)\n\nCalculates the number of triples of the contents of the resource identified in ResourceID\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nresourceId\n\nstring|Var\n\nA valid resource identifier string (can refer to any graph / branch / commit / db)\n\ntripleCount\n\nstring|number|Var\n\nAn integer literal with the size in bytes or a variable containing that integer\n\n##### Examples\n\n```javascript\nlet [count] = vars(\"count\")\ntriple_count(\"admin/minecraft/local/_commits\", count)\n//returns the number of bytes in the local commit graph\n```\n\n#### true()\n\nA function that always matches, always returns true\n\n##### Examples\n\n```\nwhen(true()).triple(\"a\", \"b\", \"c\")\n```\n\n#### type\\_of(elementId, elementType)\n\nReturns true if 'elementId' is of type 'elementType', according to the current DB schema\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nelementId\n\nstring|Var\n\nthe id of a schema graph element\n\nelementType\n\nstring|Var\n\nthe element type\n\n#### typecast(varName, varType, resultVarName)\n\nCasts the value of Input to a new value of type Type and stores the result in CastVar\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarName\n\nstring|number|object|Var\n\nEither a single variable or a literal of any basic type\n\nvarType\n\nstring|Var\n\nEither a variable or a basic datatype (xsd / xdd)\n\nresultVarName\n\nstring|Var\n\nsave the return variable\n\n##### Examples\n\n```javascript\nlet [time] = vars(\"time\")\ncast(\"22/3/98\", \"xsd:dateTime\", time)\n```\n\n#### unique(prefix, inputVarList, resultVarName)\n\nGenerate a new IRI from the prefix and a hash of the variables which will be unique for any given combination of variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nprefix\n\nstring\n\nA prefix for the IRI - typically formed of the doc prefix and the classtype of the entity (“doc:Person”)\n\ninputVarList\n\narray|string|Var\n\nAn array of variables and / or strings from which the unique hash will be generated\n\nresultVarName\n\nstring|Var\n\nVariable in which the unique ID is stored\n\n##### Examples\n\n```javascript\nlet [newid] = vars(\"newid\")\nunique(\"doc:Person\", [\"John\", \"Smith\"], newid)\n```\n\n#### update\\_document(docjson, IRI)\n\nUpdate a document identified by an IRI\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocjson\n\nobject\n\nThe document to update. Must either have an '@id' or have a class specified key.\n\nIRI\n\nstring\n\nAn optional identifier specifying the document location.\n\n#### update\\_quad(subject, predicate, newObject, graphRef)\n\nUpdate a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nnewObject\n\nstring|Var\n\nThe value to update or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### update\\_triple(subject, predicate, newObjValue, oldObjValue)\n\nUpdate a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the new one (Subject, Predicate, newObjValue)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nnewObjValue\n\nstring|Var\n\nThe value to update or a literal\n\noldObjValue\n\nstring|Var\n\nThe old value of the object\n\n#### upper(inputVarName, resultVarName)\n\nChanges a string to upper-case\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nstring or variable representing the uncapitalized string\n\nresultVarName\n\nstring|Var\n\nvariable that stores the capitalized string output\n\n##### Examples\n\n```javascript\nlet [allcaps] = vars(\"allcaps\")\nupper(\"aBCe\", allcaps)\n//upper contains \"ABCE\"\n```\n\n#### using(refPath, subquery)\n\nQuery running against any specific commit Id\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrefPath\n\nstring\n\npath to specific reference Id or commit Id\n\nsubquery\n\nWOQLQuery\n\nsubquery for the specific commit point\n\n##### Examples\n\n```javascript\nlet [a, b, c] = vars(\"a\", \"b\", \"c\")\nWOQL.using(\"userName/dbName/local/commit|branch/commitID\").triple(a, b, c)\n```\n\n#### value(subject, predicate, objValue)\n\nCreates a pattern matching rule for a triple \\[Subject, Predicate, Object\\] add extra information about the type of the value object\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobjValue\n\nstring|number|boolean|Var\n\nan specific value\n\n#### vars(varNames)\n\nGenerates javascript variables for use as WOQL variables within a query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring\n\n##### Examples\n\n```javascript\nconst [a, b, c] = WOQL.vars(\"a\", \"b\", \"c\")\n//a, b, c are javascript variables which can be used as WOQL variables in subsequent queries\n```\n\n### WOQLClient\n\n#### action(actionName, payload)\n\nSends an action to the server\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nactionName\n\nstring\n\nstructure of the action\n\npayload\n\nobject\n\na request body call\n\n#### addDocument(json, params, dbId, string, lastDataVersion, getDataVersion)\n\nto add a new document or a list of new documents into the instance or the schema graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njson\n\nobject\n\nparams\n\ntypedef.DocParamsPost\n\nthe post parameters {@link #typedef.DocParamsPost}\n\ndbId\n\nstring\n\nthe dbid\n\nstring\n\nmessage\n\nthe insert commit message\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\n##### Examples\n\n```javascript\nconst json = [{ \"@type\" : \"Class\",\n             \"@id\" : \"Coordinate\",\n             \"@key\" : { '@type' : 'Hash',\n             '@fields' : ['x','y'] },\n             \"x\" : \"xsd:decimal\",\n             \"y\" : \"xsd:decimal\" },\n             { \"@type\" : \"Class\",\n             \"@id\" : \"Country\",\n             \"@key\" : { '@type' : 'Lexical',\n                         '@fields' : [name] },\n             \"name\" : \"xsd:string\",\n             \"perimeter\" : { \"@type\" : \"List\",\n                             \"@class\" : \"Coordinate\" } }]\nclient.addDocument(json,{\"graph_type\":\"schema\"},\"mydb\",\"add new schema documents\")\n\n//if we would like to override the entire schema\nconst json = [\n{\"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"@context\"\n  },\n  {\n      \"@id\": \"Person\",\n       \"@key\": {\n          \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"name\": {\n          \"@class\": \"xsd:string\",\n          \"@type\": \"Optional\"\n      }\n  }]\n\n// client.addDocument(json,{\"graph_type\":\"schema\",\"full_replace:true\"},\n      \"mydb\",\"update the all schema\");\n\n// Here we will pass true to show how to get dataVersion\n\nconst response = await client.addDocument(json, {\"graph_type\": \"schema\"},\n  \"mydb\",\n  \"add new schema\", '',\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.addDocument(json, {\"graph_type\": \"schema\"},\n  \"mydb\",\n  \"add new schema\", response.dataVersion,\n)\n```\n\n#### api()\n\nRetrieve the URL of the server’s API base that we are currently connected to\n\n##### Examples\n\n```javascript\nlet api_url = client.api()\n```\n\n#### apply(beforeVersion, afterVersion, message, matchFinalState, options)\n\nDiff two different commits and apply changes on the current branch/commit. If you would like to change branch or commit before apply use client.checkout(\"branchName\")\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbeforeVersion\n\nstring\n\nBefore branch/commit to compare\n\nafterVersion\n\nstring\n\nAfter branch/commit to compare\n\nmessage\n\nstring\n\napply commit message\n\nmatchFinalState\n\nboolean\n\nthe default value is false\n\noptions\n\nobject\n\n{keep:{}} Options to send to the apply endpoint\n\n##### Examples\n\n```\nclient.checkout(\"mybranch\")\nclient.apply(\"mybranch\",\"mybranch_new\",\"merge main\").then(result=>{\n   console.log(result)\n})\n```\n\n#### author()\n\nGets the string that will be written into the commit log for the current user\n\n##### Examples\n\n```\nclient.author()\n```\n\n#### branch(newBranchId, isEmpty)\n\nCreates a new branch with a TerminusDB database, starting from the current context of the client (branch / ref)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnewBranchId\n\nstring\n\nlocal identifier of the new branch the ID of the new branch to be created\n\nisEmpty\n\nboolean\n\nif isEmpty is true it will create a empty branch.\n\n##### Examples\n\n```\nclient.branch(\"dev\")\n```\n\n#### checkout(branchId)\n\nGets/Sets the client’s internal branch context value (defaults to ‘main’)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranchId\n\nstring\n\nthe branch id to set the context to\n\n#### clonedb(cloneSource, newDbId, orgId)\n\nClones a remote repo and creates a local copy\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncloneSource\n\ntypedef.CloneSourceDetails\n\nobject describing the source branch to be used as a base\n\nnewDbId\n\nstring\n\nid of the new cloned database on the local server\n\norgId\n\nstring\n\nid of the local organization that the new cloned database will be created in (in desktop mode this is always “admin”)\n\n##### Examples\n\n```python\nclient.clonedb({remote_url: \"https://my.terminusdb.com/myorg/mydb\", label \"Cloned DB\", comment: \"Cloned from mydb\"}, newid: \"mydb\")\n```\n\n#### connect(params)\n\nYou can call this to get the server info or override the start params configuration, this.connectionConfig.server will be used if present, or the promise will be rejected.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nparams\n\ntypedef.ParamsObj\n\nTerminusDB Server connection parameters\n\n##### Examples\n\n```\nclient.connect()\n```\n\n#### copy()\n\ncreates a copy of the client with identical internal state and context useful if we want to change context for a particular API call without changing the current client context\n\n##### Examples\n\n```javascript\nlet newClient = client.copy()\n```\n\n#### createDatabase(dbId, dbDetails, orgId)\n\nCreates a new database in TerminusDB server\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nThe id of the new database to be created\n\ndbDetails\n\ntypedef.DbDetails\n\nobject containing details about the database to be created\n\norgId\n\nstring\n\noptional organization id - if absent default local organization id is used\n\n##### Examples\n\n```\n//remember set schema:true if you need to add a schema graph\nclient.createDatabase(\"mydb\", {label: \"My Database\", comment: \"Testing\", schema: true})\n```\n\n#### customHeaders(customHeaders)\n\nadd extra headers to your request\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncustomHeaders\n\nobject\n\n#### databaseInfo(dbName)\n\nGets the database's details\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbName\n\nstring\n\nthe datbase name\n\n#### databases(dbList)\n\nSet/Get the organization's databases list (id, label, comment) that the current user has access to on the server.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbList\n\narray\n\na list of databases the user has access to on the server, each having:\n\n##### Examples\n\n```javascript\n//to get the list of all organization's databases\nasync function callGetDatabases(){\n     await client.getDatabases()\n     console.log(client.databases())\n}\n```\n\n#### db(dbId)\n\nSets / Gets the current database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nthe database id to set the context to\n\n##### Examples\n\n```\nclient.db(\"mydb\")\n```\n\n#### deleteBranch(branchId)\n\nDeletes a branch from database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranchId\n\nstring\n\nlocal identifier of the branch\n\n#### deleteDatabase(dbId, orgId, force)\n\nDeletes a database from a TerminusDB server\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nThe id of the database to be deleted\n\norgId\n\nstring\n\nthe id of the organization to which the database belongs (in desktop use, this will always be “admin”)\n\nforce\n\nboolean\n\n##### Examples\n\n```\nclient.deleteDatabase(\"mydb\")\n```\n\n#### deleteDocument(params, dbId, message, lastDataVersion, getDataVersion)\n\nto delete the document\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nparams\n\ntypedef.DocParamsDelete\n\ndbId\n\nstring\n\nthe database id\n\nmessage\n\nstring\n\nthe delete message\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\n##### Examples\n\n```javascript\nclient.deleteDocument({\"graph_type\":\"schema\",id:['Country','Coordinate']})\n\n\n// Here we will pass true to show how to get dataVersion\n\nconst response = await client.deleteDocument({\"graph_type\":\"schema\",id:['Country','Coordinate']},\n  \"\",\n  \"\",\n  \"\",\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.deleteDocument({\"graph_type\":\"schema\",\n  id:['Country','Coordinate']},\n  \"\",\n  \"\",\n  response.dataVersion,\n)\n```\n\n#### dispatch()\n\nCommon request dispatch function\n\n#### fetch(remoteId)\n\nFetch updates to a remote database to a remote repository with the local database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremoteId\n\nstring\n\nif of the remote to fetch (eg: 'origin')\n\n#### generateCommitDescriptor(commitId)\n\nGenerates the json structure for commit descriptor\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncommitId\n\nstring\n\na valid commit id o\n\n#### generateCommitInfo(msg, author)\n\nGenerates the json structure for commit messages\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmsg\n\nstring\n\ntextual string describing reason for the change\n\nauthor\n\nstring\n\noptional author id string - if absent current user id will be used\n\n#### getBranches(dbId)\n\nget the database collections list\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nthe database id\n\n##### Examples\n\n```\nclient.getBranches()\n```\n\n#### getClassDocuments(dbId)\n\nget all the Document Classes (no abstract or subdocument)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\n##### Examples\n\n```\nclient.getClassDocuments()\n```\n\n#### getClasses(dbId)\n\nget all the schema classes (documents,subdocuments,abstracts)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nthe database id\n\n##### Examples\n\n```\nclient.getClasses()\n```\n\n#### getCommitsLog(start, count)\n\nget the database collections list\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstart\n\nnumber\n\nwhere to start printing the commit information in the log (starting from the head of the current branch)\n\ncount\n\nnumber\n\nThe number of total commit log records to return\n\n##### Examples\n\n```\nclient.getCommitsLog(count=10)\n```\n\n#### getDatabases()\n\nGets the organization's databases list. If no organization has been set up, the function throws an exception\n\n##### Examples\n\n```javascript\nasync function callGetDatabases(){\n     const dbList = await client.getDatabases()\n     console.log(dbList)\n}\n```\n\n#### getDocument(params, dbId, branch, lastDataVersion, getDataVersion, query)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nparams\n\ntypedef.DocParamsGet\n\nthe get parameters, you can pass document query search template with the params\n\ndbId\n\nstring\n\nthe database id\n\nbranch\n\nstring\n\nthe database branch\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\nquery\n\nobject\n\ndocument query search template\n\n##### Examples\n\n```python\n//return the schema graph as a json array\nclient.getDocument({\"graph_type\":\"schema\",\"as_list\":true}).then(result={\n   console.log(result)\n})\n\n//retutn the Country class document from the schema graph\nclient.getDocument({\"graph_type\":\"schema\",\"as_list\":true,\"id\":\"Country\"}).then(result={\n   console.log(result)\n})\n\n//pass a document query template to query the document interface\nconst queryTemplate = { \"name\": \"Ireland\"}\nclient.getDocument({\"as_list\":true, \"@type\":\"Country\"\n           query:queryTemplate}).then(result=>{\n   console.log(result)\n})\n\n\n// Here we will pass true to show how to get dataVersion\nconst response = await client.getDocument({\"graph_type\":\"schema\",\"as_list\":true},\n  \"\",\n  \"\",\n  \"\",\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.getDocument({\"graph_type\":\"schema\",\"as_list\":true},\n  \"\",\n  \"\",\n  response.dataVersion,\n)\n```\n\n#### getDocumentHistory(id, historyParams)\n\nGet the document's history for a specific database or branch\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nid\n\nstring\n\nid of document to report history of\n\nhistoryParams\n\ntypedef.DocHistoryParams\n\n##### Examples\n\n```\n//this will return the last 5 commits for the Person/Anna document\nclient.checkout(\"mybranch\")\nclient.docHistory(\"Person/Anna\",{start:0,count:5}).then(result=>{\n   console.log(result)\n})\n//this will return the last and the first commit for the Person/Anna document\nclient.docHistory(\"Person/Anna\",{updated:true,created:true}).then(result=>{\n   console.log(result)\n})\n```\n\n#### getEnums(dbId)\n\nget all the Enum Objects\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\n##### Examples\n\n```\nclient.getEnums()\n```\n\n#### getJSONDiff(before, after, options)\n\nGet the patch of difference between two documents.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\n\nobject\n\nThe current state of JSON document\n\nafter\n\nobject\n\nThe updated state of JSON document\n\noptions\n\nobject\n\n{keep:{}} Options to send to the diff endpoint. The diff api outputs the changes between the input, in options you can list the properties that you would like to see in the diff result in any case.\n\n##### Examples\n\n```\nclient.getJSONDiff(\n     { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Jane\" },\n     { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Janine\" }\n ).then(diffResult=>{\n console.log(diffResult)\n})\n//result example\n//{'@id': 'Person/Jane',\n// name: { '@after': 'Janine', '@before': 'Jane', '@op': 'SwapValue' }}\n```\n\n#### getPrefixes(dbId)\n\nget the database prefixes object\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nthe database id\n\n##### Examples\n\n```\nclient.getPrefixes()\n//return object example\n{\n'@base': 'terminusdb:///data/',\n'@schema': 'terminusdb:///schema#',\n'@type': 'Context'}\n```\n\n#### getSchema(dbId, branch)\n\nget the database schema in json format\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbId\n\nstring\n\nthe database id\n\nbranch\n\nstring\n\nspecific a branch/collection\n\n##### Examples\n\n```\nclient.getSchema()\n```\n\n#### getSchemaFrame(type, dbId)\n\nThe purpose of this method is to quickly discover the supported fields of a particular type.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ntype\n\nstring\n\nIf given, the type to get information for. If omitted, information for all types is returned\n\ndbId\n\nstring\n\nthe database id\n\n##### Examples\n\n```\nclient.getSchemaFrame(\"Country\")\n```\n\n#### getTriples(graphType)\n\nRetrieve the contents of a graph within a TerminusDB as triples, encoded in the turtle (ttl) format\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphType\n\ntypedef.GraphType\n\ntype of graph to get triples from, either “instance” or “schema”\n\n##### Examples\n\n```javascript\nconst turtle = await client.getTriples(\"schema\", \"alt\")\n```\n\n#### getUserOrganizations()\n\nGet the list of the user's organizations and the database related\n\n##### Examples\n\n```\nasync funtion callGetUserOrganizations(){\n     await getUserOrganizations()\n     console.log(client.userOrganizations())\n}\n```\n\n#### getVersionDiff(beforeVersion, afterVersion, id, options)\n\nGet the patch of difference between branches or commits.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbeforeVersion\n\nstring\n\nBefore branch/commit to compare\n\nafterVersion\n\nstring\n\nAfter branch/commit to compare\n\nid\n\nstring\n\nThe document id to be diffed, if it is omitted all the documents will be compared\n\noptions\n\ntypedef.DiffObject\n\n{keep:{},count:10,start:0} Options to send to the diff endpoint. The diff api outputs the changes between the input (branches or commits), in options you can list the properties that you would like to see in the diff result in any case.\n\n##### Examples\n\n```javascript\n//This is to view all the changes between two commits\nconst beforeCommit = \"a73ssscfx0kke7z76083cgswszdxy6l\"\nconst afterCommit = \"73rqpooz65kbsheuno5dsayh71x7wf4\"\n\nclient.getVersionDiff( beforeCommit, afterCommit).then(diffResult=>{\n console.log(diffResult)\n})\n\n//This is to view the changes between two commits but only for the given document\nclient.getVersionDiff( beforeCommit, afterCommit, \"Person/Tom\").then(diffResult=>{\n console.log(diffResult)\n})\n\n//This is to view the changes between a branch (head) and a commit for the given document\nclient.getVersionDiff(\"main\", afterCommit, \"Person/Tom\" ).then(diffResult=>{\n   console.log(diffResult)\n})\n\n//This is to view the changes between two branches with the keep options\nconst options = {\"keep\":{\"@id\":true, \"name\": true}, start:0, count:10}\nclient.getVersionDiff(\"main\",\"mybranch\",options).then(diffResult=>{\n   console.log(diffResult)\n})\n```\n\n#### getVersionObjectDiff(dataVersion, jsonObject, id, options)\n\nGet the patch of difference between two documents.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndataVersion\n\nstring\n\nThe version from which to compare the object\n\njsonObject\n\nobject\n\nThe updated state of JSON document\n\nid\n\nstring\n\nThe document id to be diffed\n\noptions\n\nobject\n\n{keep:{}} Options to send to the diff endpoint the diff api outputs the changes between the input, but you can list the properties that you would like to see in the diff result in any case.\n\n##### Examples\n\n```javascript\nconst jsonObj =  { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Janine\" }\nclient.getVersionObjectDiff(\"main\",jsonObj\n     \"Person/Jane\").then(diffResp=>{\n   console.log(diffResp)\n})\n```\n\n#### hasDatabase(orgName, dbName)\n\nChecks if a database exists Returns true if a DB exists and false if it doesn't. Other results throw an exception.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgName\n\nstring\n\nthe organization id to set the context to\n\ndbName\n\nstring\n\nthe db name to set the context to\n\n##### Examples\n\n```javascript\nasync function executeIfDatabaseExists(f){\n     const hasDB = await client.hasDatabase(\"admin\", \"testdb\")\n     if (hasDB) {\n         f()\n     }\n}\n```\n\n#### info()\n\nGets TerminusDB Server Information\n\n##### Examples\n\n```\nclient.info()\n```\n\n#### insertTriples(graphType, turtle, commitMsg)\n\nAppends the passed turtle to the contents of a graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphType\n\nstring\n\ntype of graph |instance|schema|inference|\n\nturtle\n\nstring\n\nis a valid set of triples in turtle format (OWL)\n\ncommitMsg\n\nstring\n\nTextual message describing the reason for the update\n\n#### localAuth(newCredential)\n\nSets/Gets set the database basic connection credential\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnewCredential\n\ntypedef.CredentialObj\n\n##### Examples\n\n```\nclient.localAuth({user:\"admin\",\"key\":\"mykey\",\"type\":\"basic\"})\n```\n\n#### message(message, pathname)\n\nSends a message to the server\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmessage\n\nstring\n\ntextual string\n\npathname\n\nstring\n\na server path to send the message to\n\n#### optimizeBranch(branchId)\n\nOptimize db branch\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranchId\n\nstring\n\nlocal identifier of the new branch\n\n#### organization(orgId)\n\nGets/Sets the client’s internal organization context value, if you change the organization name the databases list will be set to empty\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgId\n\nstring|boolean\n\nthe organization id to set the context to\n\n##### Examples\n\n```\nclient.organization(\"admin\")\n```\n\n#### patch(before, patch)\n\nApply a patch object to another object\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\n\nobject\n\nThe current state of JSON document\n\npatch\n\nobject\n\nThe patch object\n\n##### Examples\n\n```\nclient.patch(\n     { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"},\n     { \"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}\n ).then(patchResult=>{\n console.log(patchResult)\n})\n//result example\n//{ \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jannet\"}\n```\n\n#### patchResource(patch, message)\n\nApply a patch object to the current resource\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\npatch\n\narray\n\nThe patch object\n\nmessage\n\nstring\n\nThe commit message\n\n##### Examples\n\n```javascript\nconst patch = [\n  {\n   \"@id\": \"Obj/id1\",\n    \"name\": {\n     \"@op\": \"SwapValue\",\n      \"@before\": \"foo\",\n      \"@after\": \"bar\"\n    }\n  },\n {\n   \"@id\": \"Obj/id2\",\n    \"name\": {\n      \"@op\": \"SwapValue\",\n      \"@before\": \"foo\",\n     \"@after\": \"bar\"\n    }\n }\n]\nclient.db(\"mydb\")\nclient.checkout(\"mybranch\")\nclient.patchResource(patch,\"apply patch to mybranch\").then(patchResult=>{\n console.log(patchResult)\n})\n// result example\n// [\"Obj/id1\",\n// \"Obj/id2\"]\n// or conflict error 409\n// {\n// \"@type\": \"api:PatchError\",\n// \"api:status\": \"api:conflict\",\n// \"api:witnesses\": [\n//  {\n//   \"@op\": \"InsertConflict\",\n//    \"@id_already_exists\": \"Person/Jane\"\n//  }\n//]\n//}\n```\n\n#### prepareRevisionControlArgs(rc\\_args)\n\nAdds an author string (from the user object returned by connect) to the commit message.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrc\\_args\n\nobject\n\n#### pull(remoteSourceRepo)\n\nPull changes from a branch on a remote database to a branch on a local database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremoteSourceRepo\n\ntypedef.RemoteRepoDetails\n\nan object describing the source of the pull\n\n##### Examples\n\n```python\nclient.pull({remote: \"origin\", remote_branch: \"main\", message: \"Pulling from remote\"})\n```\n\n#### push(remoteTargetRepo)\n\nPush changes from a branch on a local database to a branch on a remote database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremoteTargetRepo\n\ntypedef.RemoteRepoDetails\n\nan object describing the target of the push {remote: \"origin\", \"remote\\_branch\": \"main\", \"author\": \"admin\", \"message\": \"message\"}\n\n##### Examples\n\n```python\nclient.push({remote: \"origin\", remote_branch: \"main\", message: \"Pulling from remote\"})\n```\n\n#### query(woql, commitMsg, allWitnesses, lastDataVersion, getDataVersion)\n\nExecutes a WOQL query on the specified database and returns the results\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nwoql\n\nWOQLQuery\n\nan instance of the WOQLQuery class\n\ncommitMsg\n\nstring\n\na message describing the reason for the change that will be written into the commit log (only relevant if the query contains an update)\n\nallWitnesses\n\nboolean\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\n##### Examples\n\n```javascript\nconst result = await client.query(WOQL.star())\n```\n\n#### queryDocument(query, params, dbId, branch, lastDataVersion, getDataVersion)\n\nUse {@link #getDocument} instead.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nquery\n\nobject\n\nthe query template\n\nparams\n\ntypedef.DocParamsGet\n\nthe get parameters\n\ndbId\n\nstring\n\nthe database id\n\nbranch\n\nstring\n\nthe database branch\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\n##### Examples\n\n```javascript\nconst query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 42 },\n }\nclient.queryDocument(query, {\"as_list\":true})\n\n\n// Here we will pass true to show how to get dataVersion\nconst query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 42 },\n }\n\nconst response = await client.queryDocument(query, {\"as_list\": true}, '', '','',true);\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [\n //     {\n //       '@id': 'Person/052d60ffbd114bf5e7331b03f07fcb7',\n //       '@type': 'Person',\n //       age: 42,\n //       name: 'John',\n //     },\n //   ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // query and used it is next query as lastDataVersion\n const query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 18 },\n }\n\n const response1 = await client.queryDocument(query, {\"as_list\": true}, '',\n   '',\n   response.dataVersion\n );\n```\n\n#### rebase(rebaseSource)\n\nMerges the passed branch into the current one using the rebase operation\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrebaseSource\n\nobject\n\njson describing the source branch to be used as a base\n\n##### Examples\n\n```python\n//from the branch head\nclient.rebase({rebase_from: \"admin/db_name/local/branch/branch_name\", message:\n\"Merging from dev\")\n//or from a commit id\nclient.rebase({rebase_from: \"admin/db_name/local/commit/9w8hk3y6rb8tjdy961de3i536ntkqd8\",\nmessage: \"Merging from dev\")\n```\n\n#### ref(commitId)\n\nSets / gets the current ref pointer (pointer to a commit within a branch) Reference ID or Commit ID are unique hashes that are created whenever a new commit is recorded\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncommitId\n\nstring\n\nthe reference ID or commit ID\n\n##### Examples\n\n```\nclient.ref(\"mkz98k2h3j8cqjwi3wxxzuyn7cr6cw7\")\n```\n\n#### remoteAuth(newCredential)\n\nSets/Gets the jwt token for authentication we need this to connect 2 terminusdb server to each other for push, pull, clone actions\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnewCredential\n\ntypedef.CredentialObj\n\n##### Examples\n\n```\nclient.remoteAuth({\"key\":\"dhfmnmjglkrelgkptohkn\",\"type\":\"jwt\"})\n```\n\n#### repo(repoId)\n\nGets / Sets the client’s internal repository context value (defaults to ‘local’)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrepoId\n\ntypedef.RepoType|string\n\ndefault value is local\n\n##### Examples\n\n```\nclient.repo(\"origin\")\n```\n\n#### reset(commitPath)\n\nReset the current branch HEAD to the specified commit path\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncommitPath\n\nstring\n\nThe commit path to set the current branch to\n\n#### resetBranch(branchId, commitId)\n\nReset branch to a commit id, Reference ID or Commit ID are unique hashes that are created whenever a new commit is recorded\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranchId\n\nstring\n\nlocal identifier of the new branch\n\ncommitId\n\nstring\n\nReference ID or Commit ID\n\n#### resource(resourceType, resourceId)\n\nGenerates a resource string for the required context of the current context for \"commits\" \"meta\" \"branch\" and \"ref\" special resources\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nresourceType\n\ntypedef.ResourceType\n\nthe type of resource string that is required - one of “db”, “meta”, “repo”, “commits”, “branch”, “ref”\n\nresourceId\n\nstring\n\ncan be used to specify a specific branch / ref - if not supplied the current context will be used\n\n##### Examples\n\n```javascript\nconst branch_resource = client.resource(\"branch\")\n```\n\n#### sendCustomRequest(requestType, customRequestURL, payload)\n\nCall a custom Api endpoit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrequestType\n\nstring\n\nThe current state of JSON document\n\ncustomRequestURL\n\nstring\n\nThe patch object\n\npayload\n\nobject\n\nthe request payload\n\n##### Examples\n\n```\nclient.sendCustomRequest(\"GET\", \"http://localhost:3030/changes/\").then(result=>{\n   console.log(result)\n})\n```\n\n#### server()\n\nGets the current connected server url it can only be set creating a new WOQLCLient instance\n\n#### set(params)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nparams\n\ntypedef.ParamsObj\n\na object with connection params\n\n##### Examples\n\n```\nsets several of the internal state values in a single call\n(similar to connect, but only sets internal client state, does not communicate with server)\nclient.set({key: \"mypass\", branch: \"dev\", repo: \"origin\"})\n```\n\n#### setApiKey(accessToken)\n\nset the api key to access the cloud resources\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\naccessToken\n\nstring\n\n#### setSystemDb()\n\nSets the internal client context to allow it to talk to the server’s internal system database\n\n#### squashBranch(branchId, commitMsg)\n\nSquash branch commits\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranchId\n\nstring\n\nlocal identifier of the new branch\n\ncommitMsg\n\nstring\n\nTextual message describing the reason for the update\n\n#### updateDatabase(dbDoc)\n\nUpdate a database in TerminusDB server\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbDoc\n\ntypedef.DbDoc\n\nobject containing details about the database to be updated\n\n##### Examples\n\n```\nclient.updateDatabase({id: \"mydb\", label: \"My Database\", comment: \"Testing\"})\n```\n\n#### updateDocument(json, params, dbId, message, lastDataVersion, getDataVersion, compress, create)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njson\n\nobject\n\nparams\n\ntypedef.DocParamsPut\n\nthe Put parameters {@link #typedef.DocParamsPut}\n\ndbId\n\n\\*\n\nthe database id\n\nmessage\n\n\\*\n\nthe update commit message\n\nlastDataVersion\n\nstring\n\nthe last data version tracking id.\n\ngetDataVersion\n\nboolean\n\nIf true the function will return object having result and dataVersion.\n\ncompress\n\nboolean\n\nIf true, the function will create a new document if it doesn't exist.\n\ncreate\n\nboolean\n\nPerform an \\*upsert\\* which inserts if the document is not present (also works on nested documents)\n\n##### Examples\n\n```javascript\nclient.updateDocument(\n{\n \"@id\": \"Person\",\n   \"@key\": {\n     \"@type\": \"Random\",\n   },\n   \"@type\": \"Class\",\n   label: \"xsd:string\",\n },\n{ graph_type: \"schema\" }\n);\n\n\n// Here we will pass true to show how to get dataVersion\n\n    const response = await client.updateDocument(\n      {\n        \"@id\": \"Person\",\n        \"@key\": {\n          \"@type\": \"Random\",\n        },\n        \"@type\": \"Class\",\n        label: \"xsd:string\",\n      },\n      { graph_type: \"schema\" },\n      \"\",\n      \"\",\n      \"\",\n      true\n    );\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.updateDocument(\n      {\n        \"@id\": \"Person\",\n        \"@key\": {\n          \"@type\": \"Random\",\n        },\n        \"@type\": \"Class\",\n        label: \"xsd:string\",\n      },\n      { graph_type: \"schema\" },\n      \"\",\n      \"\",\n      response.dataVersion\n    );\n\n // update a document and create the linked document together\n // we are update the document \"Person/Person01\"\n // and create a new document {\"@type\": \"Person\",\"name\": \"child01\"} at the same time\n const response1 = await client.updateDocument(\n     {\n      \"@id\": \"Person/Person01\",\n      \"@type\": \"Person\",\n      \"name\": \"Person01\"\n      \"children\":[{\"@type\": \"Person\",\"name\": \"child01\"}]\n    },{create:true})\n```\n\n#### updateTriples(graphType, turtle, commitMsg)\n\nReplace the contents of the specified graph with the passed triples encoded in the turtle (ttl) format\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphType\n\nstring\n\ntype of graph |instance|schema|inference|\n\nturtle\n\nstring\n\nstring encoding triples in turtle (ttl) format\n\ncommitMsg\n\nstring\n\nTextual message describing the reason for the update\n\n##### Examples\n\n```\nclient.updateTriples(\"schema\", \"alt\", turtle_string, \"dumping triples to graph alt\")\n```\n\n#### user()\n\nGets the current user object as returned by the connect capabilities response user has fields: \\[id, name, notes, author\\]\n\n#### userOrganization()\n\n#### userOrganizations(orgList)\n\nGet/Set the list of the user's organizations (id, organization, label, comment).\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norgList\n\narray\n\na list of user's Organization\n\n##### Examples\n\n```\nasync funtion callGetUserOrganizations(){\n     await client.getUserOrganizations()\n     console.log(client.userOrganizations())\n}\n```\n\n### WOQLLibrary\n\n#### branches()\n\nGeneral Pattern 4: Retrieves Branches, Their ID, Head Commit ID, Head Commit Time (if present, new branches have no commits)\n\n#### commits(branch, limit, start, timestamp)\n\nget all the commits of a specific branch if a timestamp is given, gets all the commits before the specified timestamp\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranch\n\nstring\n\nthe branch name\n\nlimit\n\nnumber\n\nthe max number of result\n\nstart\n\nnumber\n\nthe start of the pagination\n\ntimestamp\n\nnumber\n\nUnix timestamp in seconds\n\n#### first\\_commit()\n\nFinds the id of the very first commit in a database's history This is useful for finding information about when, by who and why the database was created The first commit is the only commit in the database that does not have a parent commit\n\n#### previousCommits(commit\\_id, limit)\n\nget commits older than the specified commit id\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncommit\\_id\n\nstring\n\nthe commit id\n\nlimit\n\nnumber\n\nthe max number of result\n\n### WOQLQuery\n\n#### addSubQuery()\n\nInternal library function which adds a subquery and sets the cursor\n\n#### addSubQuery(Subq)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nSubq\n\nWOQLQuery\n\n#### add\\_quad(subject, predicate, object, graphRef)\n\nAdds quads according to the pattern \\[S,P,O,G\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### add\\_triple(subject, predicate, object)\n\nAdds triples according to the the pattern \\[subject,predicate,object\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### added\\_quad(subject, predicate, object, graphRef-)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph) removed from the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### added\\_triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object) added in the current layer\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### all(Subj, Pred, Obj, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nSubj\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\nPred\n\nstring|Var\n\nThe IRI of a property or a variable\n\nObj\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\nGraph\n\ntypedef.GraphRef\n\nthe resource identifier of a graph possible\n\n#### all(Subj, Pred, Obj, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nSubj\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\nPred\n\nstring|Var\n\nThe IRI of a property or a variable\n\nObj\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\nGraph\n\ntypedef.GraphRef\n\nthe resource identifier of a graph possible\n\n#### and(subqueries)\n\nLogical conjunction of the contained queries - all queries must match or the entire clause fails\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubqueries\n\nWOQLQuery\n\nA list of one or more woql queries to execute as a conjunction\n\n#### arop()\n\nWraps arithmetic operators in the appropriate json-ld\n\n#### as(varList)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\narray|string|Var\n\nvariable number of arguments\n\n#### asv()\n\nWraps the elements of an AS variable in the appropriate json-ld\n\n#### boolean(tf)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ntf\n\nboolean\n\n#### boolean(tf)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ntf\n\nboolean\n\n#### cleanGraph()\n\nTransforms a graph filter or graph id into the proper json-ld form\n\n#### cleanObject()\n\nTransforms whatever is passed in as the object of a triple into the appropriate json-ld form (variable, literal or id)\n\n#### cleanPredicate()\n\nTransforms whatever is passed in as the predicate (id or variable) into the appropriate json-ld form\n\n#### cleanSubject()\n\nTransforms whatever is passed in as the subject into the appropriate json-ld for variable or id\n\n#### comment(comment, subquery)\n\nAdds a text comment to a query - can also be used to wrap any part of a query to turn it off\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncomment\n\nstring\n\ntext comment\n\nsubquery\n\nWOQLQuery\n\nquery that is \"commented out\"\n\n#### compilePathPattern()\n\nTurns a textual path pattern into a JSON-LD description\n\n#### concat(varList, resultVarName)\n\ntakes a variable number of string arguments and concatenates them into a single string\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\narray|string|Var\n\na variable representing a list or a list of variables or strings - variables can be embedded in the string if they do not contain spaces\n\nresultVarName\n\nstring|Var\n\nA variable or string containing the output string\n\n#### containsUpdate()\n\nDoes this query contain an update\n\n#### context()\n\nsets the value of the current json-ld context on a full query scope\n\n#### count(countVarName, subquery)\n\nCreates a count of the results of the query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncountVarName\n\nstring|number|Var\n\nvariable or integer count\n\nsubquery\n\nWOQLQuery\n\n#### dataList()\n\ntakes input that can be either a string (variable name) or an array - each element of the array is a member of the list\n\n#### dataValueList()\n\nWraps data values\n\n#### delete\\_document(IRI)\n\nDelete a document from the graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nIRI\n\nstring\n\nThe document id or a variable\n\n#### delete\\_quad(subject, predicate, object, graphRef)\n\nDeletes a single triple from the graph \\[Subject, Predicate, Object, Graph\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### delete\\_triple(subject, predicate, object)\n\nDeletes a single triple from the default graph of the database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### distinct(varNames)\n\nFilter the query to return only results that are distinct in the given variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring|Var\n\nthese variables are guaranteed to be unique as a tuple\n\n#### div(args)\n\nDivision - integer division - args are divided left to right\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nnumbers for division\n\n#### divide(args)\n\nDivides numbers N1...Nn by each other left, to right precedence\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nnumbers to tbe divided\n\n#### dot(document, field, value)\n\nExtract the value of a key in a bound document.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\nstring|Var\n\nDocument which is being accessed.\n\nfield\n\nstring|Var\n\nThe field from which the document which is being accessed.\n\nvalue\n\nstring|Var\n\nThe value for the document and field.\n\n#### eq(varName, varValue)\n\nMatches if a is equal to b\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarName\n\nstring|Var\n\nliteral, variable or id\n\nvarValue\n\nstring|Var\n\nliteral, variable or id\n\n#### eval(arithExp, resultVarName)\n\nEvaluates the passed arithmetic expression and generates or matches the result value\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\narithExp\n\nobject|WOQLQuery|string\n\nquery or JSON-LD representing the query\n\nresultVarName\n\nstring|Var\n\noutput variable\n\n#### execute()\n\nUse instead woqlclient.query('myWOQLQuery')\n\n#### exp(varNum, expNum)\n\nExponent - raises varNum01 to the power of varNum02\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum\n\nstring|number|Var\n\na variable or numeric containing the number to be raised to the power of the second number\n\nexpNum\n\nnumber\n\na variable or numeric containing the exponent\n\n#### expandVariable(varname)\n\nTransforms strings that start with v: into variable json-ld structures\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarname\n\nunknown\n\nwill be transformed if it starts with v:\n\n#### findLastProperty(json)\n\nFinds the last woql element that has a subject in that is a property id used for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njson\n\nobject\n\n#### findLastSubject(json)\n\nFinds the last woql element that has a subject in it and returns the json for that used for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njson\n\nobject\n\n#### floor(varNum)\n\nGenerates the nearest lower integer to the passed number\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum\n\nstring|number|Var\n\nVariable or numeric containing the number to be floored\n\n#### from(graphRef-, query)\n\nSpecifies the database URL that will be the default database for the enclosed query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\nquery\n\nWOQLQuery\n\nThe query\n\n#### get(asvars, queryResource)\n\nUse the document inteface to import documents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nasvars\n\nVars|array.<Var>\n\nan array of AsVar variable mappings (see as for format below)\n\nqueryResource\n\nWOQLQuery\n\nan external resource (remote, file, post) to query\n\n#### getContext()\n\nRetrieves the value of the current json-ld context\n\n#### getLimit()\n\nFunctions to manipulate and check the paging related properties of a query\n\n#### getPagingProperty()\n\nReturns the value of one of the 'paging' related properties (limit, start,...)\n\n#### graph(graphRef)\n\nSets the graph resource ID that will be used for subsequent chained function calls\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph which will be used for subsequent chained schema calls\n\n#### graph(graphRef)\n\nSets the graph resource ID that will be used for subsequent chained function calls\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph which will be used for subsequent chained schema calls\n\n#### greater(varNum01, varNum02)\n\nCompares the value of v1 against v2 and returns true if v1 is greater than v2\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum01\n\nstring|number|Var\n\na variable or numeric containing the number to be compared\n\nvarNum02\n\nstring|number|Var\n\na variable or numeric containing the second comporator\n\n#### group\\_by(gvarlist, groupedvar, output, groupquery)\n\nGroups the results of the contained subquery on the basis of identical values for Groupvars, extracts the patterns defined in PatternVars and stores the results in GroupedVar\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngvarlist\n\narray|string|Var\n\nEither a single variable or an array of variables\n\ngroupedvar\n\narray|string|Var\n\nEither a single variable or an array of variables\n\noutput\n\nstring|Var\n\noutput variable name\n\ngroupquery\n\nWOQLQuery\n\nThe query whose results will be grouped\n\n#### idgen(prefix, inputVarList, outputVar)\n\nGenerates the node's ID combined the variable list with a specific prefix (URL base). If the input variables's values are the same, the output value will be the same.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nprefix\n\nstring\n\ninputVarList\n\nstring|array\n\nthe variable input list for generate the id\n\noutputVar\n\nstring\n\nthe output variable name\n\n#### immediately(subquery)\n\nRuns the query without backtracking on side-effects\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nWOQL Query objects\n\n#### insert(id, type, refGraph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nid\n\nstring|Var\n\nIRI string or variable containing\n\ntype\n\nstring|Var\n\nIRI string or variable containing the IRI of the\n\nrefGraph\n\ntypedef.GraphRef\n\nOptional Graph resource identifier\n\n#### insert(id, type, refGraph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nid\n\nstring|Var\n\nIRI string or variable containing\n\ntype\n\nstring|Var\n\nIRI string or variable containing the IRI of the\n\nrefGraph\n\ntypedef.GraphRef\n\nOptional Graph resource identifier\n\n#### insert\\_document(docjson, IRI)\n\nInsert a document in the graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocjson\n\nobject\n\nThe document to insert. Must either have an '@id' or have a class specified key.\n\nIRI\n\nstring\n\nAn optional identifier specifying the document location.\n\n#### into(graphRef-, subquery)\n\nSpecifies the graph resource to write the contained query into\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\nsubquery\n\nWOQLQuery\n\nThe query which will be written into the graph\n\n#### iri(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nstring\n\n#### iri(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nstring\n\n#### isa(instanceIRI, classId)\n\nTests whether a given instance IRI has type Class, according to the current state of the DB\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninstanceIRI\n\nstring|Var\n\nA string IRI or a variable that identify the class instance\n\nclassId\n\nstring|Var\n\nA Class IRI or a variable\n\n#### jlt()\n\nWraps the passed value in a json-ld literal carriage\n\n#### jobj()\n\nTransforms a javascript representation of a query into a json object if needs be\n\n#### join(varList, glue, resultVarName)\n\nJoins a list variable together (Input) into a string variable (Output) by glueing the strings together with Glue\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarList\n\nstring|array|Var\n\na variable representing a list or a list of strings and / or variables\n\nglue\n\nstring|Var\n\nA variable (v:glue) or (glue) string representing the characters to put in between the joined strings in input\n\nresultVarName\n\nstring|Var\n\nA variable or string containing the output string\n\n#### json(json)\n\nconverts back and forward from json if the argument is present, the current query is set to it, if the argument is not present, the current json version of this query is returned\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\njson\n\nobject\n\na query in json format\n\n#### length(inputVarList, resultVarName)\n\nCalculates the length of the list in va and stores it in vb\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarList\n\nstring|array\n\nEither a variable representing a list or a list of variables or literals\n\nresultVarName\n\nstring|Var\n\nA variable in which the length of the list is stored or the length of the list as a non-negative integer\n\n#### less(varNum01, varNum02)\n\nCompares the value of v1 against v2 and returns true if v1 is less than v2\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNum01\n\nstring|number|Var\n\na variable or numeric containing the number to be compared\n\nvarNum02\n\nstring|number|Var\n\na variable or numeric containing the second comporator\n\n#### like(stringA, stringB, distance)\n\nGenerates a string Leverstein distance measure between stringA and stringB\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstringA\n\nstring|Var\n\nstring literal or variable representing a string to be compared\n\nstringB\n\nstring|Var\n\nstring literal or variable representing the other string to be compared\n\ndistance\n\nnumber|string|Var\n\nvariable representing the distance between the variables\n\n#### limit(limit, subquery)\n\nSpecifies a maximum number of results that will be returned from the subquery\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nlimit\n\nnumber|string\n\nA variable that refers to an non-negative integer or a non-negative integer\n\nsubquery\n\nWOQLQuery\n\nA subquery whose results will be limited\n\n#### link(subject, predicate, object)\n\nCreates a pattern matching rule for triple \\[Subject, Predicate, Object\\]\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### literal(s, t)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nany\n\nt\n\nstring\n\n#### literal(s, t)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nany\n\nt\n\nstring\n\n#### loadDefaultVocabulary()\n\nvocabulary elements that can be used without prefixes in woql.js queries\n\n#### lower(inputVarName, resultVarName)\n\nChanges a string to lower-case\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nstring or variable representing the non-lowercased string\n\nresultVarName\n\nstring|Var\n\nvariable that stores the lowercased string output\n\n#### member(element, list)\n\nMatches if List includes Element\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nelement\n\nstring|object|Var\n\nEither a variable, IRI or any simple datatype\n\nlist\n\nstring|array|Var\n\nList (\\[string, literal\\] or string\\*) Either a variable representing a list or a list of variables or literals\n\n#### minus(args)\n\nSubtracts Numbers N1..Nn\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\nvariable or numeric containing the value that will be subtracted from\n\n#### node(nodeid, chainType)\n\nSpecifies the identity of a node that can then be used in subsequent builder functions. Note that node() requires subsequent chained functions to complete the triples / quads that it produces - by itself it only generates the subject.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnodeid\n\nstring|Var\n\nThe IRI of a node or a variable containing an IRI which will be the subject of the builder functions\n\nchainType\n\ntypedef.FuntionType\n\nOptional type of builder function to build (default is triple)\n\n#### node(node, type)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnode\n\nstring|Var\n\nThe IRI of a node or a variable containing an IRI which will be the subject of the builder functions\n\ntype\n\ntypedef.FuntionType\n\nOptional type of builder function to build (default is triple)\n\n#### not(subquery)\n\nLogical negation of the contained subquery - if the subquery matches, the query will fail to match\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nA subquery which will be negated\n\n#### nuke(graphRef)\n\nDeletes all triples in the passed graph (defaults to instance/main)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph from which all triples will be removed\n\n#### nuke(graphRef)\n\nDeletes all triples in the passed graph (defaults to instance/main)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraphRef\n\ntypedef.GraphRef\n\nResource String identifying the graph from which all triples will be removed\n\n##### Examples\n\n```python\nnuke(\"schema/main\")\n//will delete everything from the schema/main graph\n```\n\n#### once(subquery)\n\nResults in one solution of the subqueries\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nstring|WOQLQuery\n\nWOQL Query objects\n\n#### opt(subquery)\n\nSpecifies that the Subquery is optional - if it does not match the query will not fail\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nWOQLQuery\n\nA subquery which will be optionally matched\n\n#### or(subqueries)\n\nCreates a logical OR of the arguments\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubqueries\n\nWOQLQuery\n\nA list of one or more woql queries to execute as alternatives\n\n#### order\\_by(orderedVarlist)\n\nOrders the results of the contained subquery by a precedence list of variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norderedVarlist\n\nstring|Var|array\n\nA sequence of variables, by which to order the results, each optionally followed by either “asc” or “desc” to represent order as a list, by default it will sort the variable in ascending order\n\n#### pad(inputVarName, pad, len, resultVarName)\n\nPads out the string input to be exactly len long by appending the pad character pad to form output\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nThe input string or variable in unpadded state\n\npad\n\nstring|Var\n\nThe characters to use to pad the string or a variable representing them\n\nlen\n\nnumber|string|Var\n\nThe variable or integer value representing the length of the output string\n\nresultVarName\n\nstring|Var\n\nstores output\n\n#### parameterError()\n\nBasic Error handling\n\n#### parameterError(msg)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmsg\n\nstring\n\n#### path(subject, pattern, object, resultVarName)\n\nPerforms a path regular expression match on the graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nAn IRI or variable that refers to an IRI representing the subject, i.e. the starting point of the path\n\npattern\n\nstring\n\n(string) - A path regular expression describing a pattern through multiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)\n\nobject\n\nstring|Var\n\nAn IRI or variable that refers to an IRI representing the object, i.e. ending point of the path\n\nresultVarName\n\nstring|Var\n\nA variable in which the actual paths traversed will be stored\n\n#### plus(args)\n\nAdds the numbers together\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\na variable or numeric containing the values to add\n\n#### post(url, formatObj, source)\n\nIdentifies a resource as a local path on the client, to be sent to the server through a HTTP POST request, with the format defined through the options\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nurl\n\nstring\n\nThe Path on the server at which the file resource can be accessed\n\nformatObj\n\ntypedef.DataFormatObj\n\nimput options, optional\n\nsource\n\nstring\n\nIt defines the source of the file, it can be 'url','post'\n\n#### prettyPrint(clang)\n\nReturns a script version of the query\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclang\n\nstring\n\neither \"js\" or \"python\"\n\n#### put(varsToExp, query, fileResource)\n\nUse the document inteface to import documents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarsToExp\n\nVars|array.<Var>\n\nan array of AsVar variable mappings (see as for format below)\n\nquery\n\nWOQLQuery\n\nThe query which will be executed to produce the results\n\nfileResource\n\nstring\n\nan file resource local to the server\n\n#### quad(subject, predicate, object, graphRef)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### re(pattern, inputVarName, resultVarList)\n\nMatches the regular expression defined in Patern against the Test string, to produce the matched patterns in Matches\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\npattern\n\nstring\n\nstring or variable using normal PCRE regular expression syntax with the exception that special characters have to be escaped twice (to enable transport in JSONLD)\n\ninputVarName\n\nstring|Var\n\nstring or variable containing the string to be tested for patterns with the regex\n\nresultVarList\n\nstring|array|object|Var\n\nvariable representing the list of matches or a list of strings or variables\n\n#### read\\_document(IRI, output)\n\nRead a node identified by an IRI as a JSON-LD document\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nIRI\n\nstring\n\nThe document id or a variable to read\n\noutput\n\nstring\n\nVariable which will be bound to the document.\n\n#### remote(remoteObj, formatObj)\n\nIdentifies a remote resource by URL and specifies the format of the resource through the options\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremoteObj\n\nobject\n\nThe URL at which the remote resource can be accessed\n\nformatObj\n\ntypedef.DataFormatObj\n\nThe format of the resource data {}\n\n#### removed\\_quad(subject, predicate, object, graphRef-)\n\nCreates a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph) removed from the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\ngraphRef-\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### removed\\_triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object) added in the current commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### select(varNames)\n\nFilters the query so that only the variables included in \\[V1...Vn\\] are returned in the bindings\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarNames\n\nstring|Var\n\nonly these variables are returned\n\n#### setPagingProperty()\n\nSets the value of one of the paging\\_transitive\\_properties properties\n\n#### setVocabulary()\n\nProvides the query with a 'vocabulary' a list of well known predicates that can be used without prefixes mapping: id: prefix:id ...\n\n#### size(resourceId, resultVarName)\n\nCalculates the size in bytes of the contents of the resource identified in ResourceID\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nresourceId\n\nstring|Var\n\nA valid resource identifier string (can refer to any graph / branch / commit / db)\n\nresultVarName\n\nstring|Var\n\nThe variable name\n\n#### split(inputVarName, separator, resultVarName)\n\nSplits a string (Input) into a list strings (Output) by removing separator\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nA string or variable representing the unsplit string\n\nseparator\n\nstring|Var\n\nA string or variable containing a sequence of charatcters to use as a separator\n\nresultVarName\n\nstring|Var\n\nvariable that stores output list\n\n#### star()\n\nSimple composite functions which produce WOQL queries\n\n#### star(graph, subject, predicate, object)\n\nGenerates a query that by default matches all triples in a graph identified by \"graph\" or in all the current terminusDB's graph\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\n\nstring|boolean\n\nfalse or the resource identifier of a graph possible value are schema/{main - myschema - \\*} | instance/{main - myschema - \\*} | inference/{main - myschema - \\*}\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable, default value \"v:Subject\"\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable, default value \"v:Predicate\"\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal, default value \"v:Object\"\n\n#### start(start, subquery)\n\nSpecifies an offset position in the results to start listing results from\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstart\n\nnumber|string|Var\n\nA variable that refers to an interger or an integer literal\n\nsubquery\n\nWOQLQuery\n\nWOQL Query object, you can pass a subquery as an argument or a chained query\n\n#### string(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nstring\n\n#### string(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ns\n\nstring\n\n#### sub(classA, classB)\n\nReturns true if ClassA subsumes ClassB, according to the current DB schema\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclassA\n\nstring\n\nClassA\n\nclassB\n\nstring\n\nClassB\n\n#### substr(string, before, length, after, subString)\n\nSubstring\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nstring\n\nstring|Var\n\nString or variable\n\nbefore\n\nnumber|Var\n\ninteger or variable (characters from start to begin)\n\nlength\n\nnumber|Var\n\ninteger or variable (length of substring)\n\nafter\n\nnumber|Var\n\ninteger or variable (number of characters after substring)\n\nsubString\n\nstring|Var\n\nString or variable\n\n#### sum(subquery, total)\n\ncomputes the sum of the List of values passed. In contrast to other arithmetic functions, sum self-evaluates - it does not have to be passed to evaluate()\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubquery\n\nWOQLQuery\n\na subquery or (\\[string or numeric\\]) - a list variable, or a list of variables or numeric literals\n\ntotal\n\nstring|Var\n\nthe variable name with the sum result of the values in List\n\n#### times(args)\n\nMultiplies numbers N1...Nn together\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nargs\n\nstring|number|Var\n\na variable or numeric containing the value\n\n#### trim(inputStr, resultVarName)\n\nRemove whitespace from both sides of a string:\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputStr\n\nstring|Var\n\nA string or variable containing the untrimmed version of the string\n\nresultVarName\n\nstring|Var\n\nA string or variable containing the trimmed version of the string\n\n#### triple(subject, predicate, object)\n\nCreates a triple pattern matching rule for the triple \\[S, P, O\\] (Subject, Predicate, Object)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobject\n\nstring|Var\n\nThe IRI of a node or a variable, or a literal\n\n#### triple\\_count(resourceId, tripleCount)\n\nCalculates the number of triples of the contents of the resource identified in ResourceID\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nresourceId\n\nstring|Var\n\nA valid resource identifier string (can refer to any graph / branch / commit / db)\n\ntripleCount\n\nstring|number|Var\n\nAn integer literal with the size in bytes or a variable containing that integer\n\n#### true()\n\nA function that always matches, always returns true\n\n#### type\\_of(elementId, elementType)\n\nReturns true if 'elementId' is of type 'elementType', according to the current DB schema\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nelementId\n\nstring|Var\n\nthe id of a schema graph element\n\nelementType\n\nstring|Var\n\nthe element type\n\n#### typecast(varName, varType, resultVarName)\n\nCasts the value of Input to a new value of type Type and stores the result in CastVar\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nvarName\n\nstring|number|object|Var\n\nEither a single variable or a literal of any basic type\n\nvarType\n\nstring|Var\n\nEither a variable or a basic datatype (xsd / xdd)\n\nresultVarName\n\nstring|Var\n\nsave the return variable\n\n#### unique(prefix, inputVarList, resultVarName)\n\nGenerate a new IRI from the prefix and a hash of the variables which will be unique for any given combination of variables\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nprefix\n\nstring\n\nA prefix for the IRI - typically formed of the doc prefix and the classtype of the entity (“doc:Person”)\n\ninputVarList\n\narray|string|Var\n\nAn array of variables and / or strings from which the unique hash will be generated\n\nresultVarName\n\nstring|Var\n\nVariable in which the unique ID is stored\n\n#### update\\_document(docjson, IRI)\n\nUpdate a document identified by an IRI\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocjson\n\nobject\n\nThe document to update. Must either have an '@id' or have a class specified key.\n\nIRI\n\nstring\n\nAn optional identifier specifying the document location.\n\n#### update\\_quad(subject, predicate, newObject, graphRef)\n\nUpdate a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nnewObject\n\nstring|Var\n\nThe value to update or a literal\n\ngraphRef\n\ntypedef.GraphRef\n\nA valid graph resource identifier string\n\n#### update\\_quad(subject, predicate, newObject, graph)\n\nUpdate a pattern matching rule for the quad \\[S, P, O, G\\] (Subject, Predicate, Object, Graph)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring\n\nThe IRI of a property or a variable\n\nnewObject\n\nstring\n\nThe value to update or a literal\n\ngraph\n\nstring\n\nthe resource identifier of a graph possible value are schema/{main - myschema - \\*} | instance/{main - myschema - \\*} | inference/{main - myschema - \\*}\n\n#### update\\_triple(subject, predicate, newObjValue, oldObjValue)\n\nUpdate a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the new one (Subject, Predicate, newObjValue)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nnewObjValue\n\nstring|Var\n\nThe value to update or a literal\n\noldObjValue\n\nstring|Var\n\nThe old value of the object\n\n#### update\\_triple(subject, predicate, newObjValue, oldObjValue)\n\nUpdate a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the new one (Subject, Predicate, newObjValue)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nnewObjValue\n\nstring|Var\n\nThe value to update or a literal\n\noldObjValue\n\nstring|Var\n\nThe old value of the object\n\n#### updated()\n\n#### updated()\n\nCalled to inidicate that this query will cause an update to the DB\n\n#### upper(inputVarName, resultVarName)\n\nChanges a string to upper-case\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ninputVarName\n\nstring|Var\n\nstring or variable representing the uncapitalized string\n\nresultVarName\n\nstring|Var\n\nvariable that stores the capitalized string output\n\n#### using(refPath, subquery)\n\nQuery running against any specific commit Id\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrefPath\n\nstring\n\npath to specific reference Id or commit Id\n\nsubquery\n\nWOQLQuery\n\nsubquery for the specific commit point\n\n#### value(subject, predicate, objValue)\n\nCreates a pattern matching rule for triple \\[Subject, Predicate, Object\\] add extra information about the type of the value object\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nsubject\n\nstring|Var\n\nThe IRI of a triple’s subject or a variable\n\npredicate\n\nstring|Var\n\nThe IRI of a property or a variable\n\nobjValue\n\nstring|number|boolean|Var\n\nan specific value\n\n#### valueList()\n\ntakes a list of input that can be any value\n\n#### vlist()\n\ncreates an unadorned variable name list\n\n#### wform(opts)\n\nJSON LD Format Descriptor\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nopts\n\nobject\n\n#### wrapCursorWithAnd()\n\nContains definitions of the WOQL functions which map directly to JSON-LD types All other calls and queries can be composed from these"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB JavaScript Client Reference Guide",
      "description": "TerminusDB JavaScript Client Reference Guide",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "terminusdb-client"
    },
    "slug": "python",
    "body": {
      "@type": "Body",
      "value": "## terminusdb\\_client\n\n### Client\n\n#### \\_\\_init\\_\\_(server\\_url, user\\_agent, \\*\\*kwargs)\n\nThe Client constructor.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nserver\\_url\n\nstr\n\nURL of the server that this client will connect to.\n\nuser\\_agent\n\noptional, str\n\nUser agent header when making requests. Defaults to terminusdb-client-python with the version appended.\n\n\\*\\*kwargs\n\nExtra configuration options\n\n#### \\_check\\_connection()\n\nRaise connection InterfaceError if not connected Defaults to check if a db is connected\n\n#### \\_generate\\_commit(msg, author)\n\nPack the specified commit info into a dict format expected by the server.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmsg\n\nstr\n\nCommit message.\n\nauthor\n\nstr\n\nCommit author.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client._generate_commit(\"<message>\", \"<author>\")\n{'author': '<author>', 'message': '<message>'}\n```\n\n#### \\_get\\_prefixes()\n\nGet the prefixes for a given database\n\n#### add\\_role(role)\n\nAdd a new role\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrole\n\ndict\n\nThe role dict\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")\n>>> role = {\n    \"name\": \"Grand Pubah\",\n    \"action\": [\n        \"branch\",\n        \"class_frame\",\n        \"clone\",\n        \"commit_read_access\",\n        \"commit_write_access\",\n        \"create_database\",\n        \"delete_database\",\n        \"fetch\",\n        \"instance_read_access\",\n        \"instance_write_access\",\n        \"manage_capabilities\",\n        \"meta_read_access\",\n        \"meta_write_access\",\n        \"push\",\n        \"rebase\",\n        \"schema_read_access\",\n        \"schema_write_access\"\n      ]\n  }\n>>> client.add_role(role)\n```\n\n#### add\\_user(username, password)\n\nAdd a new user\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nusername\n\nstr\n\nThe username of the user\n\npassword\n\nstr\n\nThe user's password\n\n#### apply(before\\_version, after\\_object, branch)\n\nDiff two different commits and apply changes on branch\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\\_version\n\nstring\n\nBefore branch/commit to compare\n\nafter\\_object\n\nstring\n\nAfter branch/commit to compare\n\nbranch\n\nstring\n\nBranch to apply to. Optional.\n\n#### change\\_capabilities(capability\\_change)\n\nChange the capabilities of a certain user\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncapability\\_change\n\ndict\n\nDict for the capability change request. Example: { \"operation\": \"revoke\", \"scope\": \"UserDatabase/f5a0ef94469b32e1aee321678436c7dfd5a96d9c476672b3282ae89a45b5200e\", \"user\": \"User/admin\", \"roles\": \\[ \"Role/consumer\", \"Role/admin\" \\] }\n\n#### change\\_role(role)\n\nChange role actions for a particular role\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nrole\n\ndict\n\nRole dict\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")\n>>> role = {\n    \"name\": \"Grand Pubah\",\n    \"action\": [\n        \"branch\",\n        \"class_frame\",\n        \"clone\",\n        \"commit_read_access\",\n        \"commit_write_access\",\n        \"create_database\",\n        \"delete_database\",\n        \"fetch\",\n        \"instance_read_access\",\n        \"instance_write_access\",\n        \"manage_capabilities\",\n        \"meta_read_access\",\n        \"meta_write_access\",\n        \"push\",\n        \"rebase\",\n        \"schema_read_access\",\n        \"schema_write_access\"\n      ]\n  }\n>>> client.change_role(role)\n```\n\n#### change\\_user\\_password(username, password)\n\nChange user's password\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nusername\n\nstr\n\nThe username of the user\n\npassword\n\nstr\n\nThe new password\n\n#### clonedb(clone\\_source, newid, Description, remote\\_auth)\n\nClone a remote repository and create a local copy.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclone\\_source\n\nstr\n\nThe source url of the repo to be cloned.\n\nnewid\n\nstr\n\nIdentifier of the new repository to create.\n\nDescription\n\nstr, optional\n\nOptional description about the cloned database.\n\nremote\\_auth\n\nstr, optional\n\nOptional remote authorization (uses client remote auth otherwise)\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.clonedb(\"http://terminusdb.com/some_user/test_db\", \"my_test_db\")\n```\n\n#### close()\n\nUndo connect and close the connection.\n\n#### commit()\n\nNot implementated: open transactions currently not suportted. Please check back later.\n\n#### connect(team, db, remote\\_auth, key, user, use\\_token, jwt\\_token, api\\_token, branch, ref, repo, \\*\\*kwargs)\n\nConnect to a Terminus server at the given URI with an API key.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nteam\n\nstr\n\nName of the team, default to be \"admin\"\n\ndb\n\noptional, str\n\nName of the database connected\n\nremote\\_auth\n\noptional, dict\n\nRemote Auth setting\n\nkey\n\noptional, str\n\nAPI key for connecting, default to be \"root\"\n\nuser\n\noptional, str\n\nName of the user, default to be \"admin\"\n\nuse\\_token\n\nbool\n\nUse token to connect. If both \\`jwt\\_token\\` and \\`api\\_token\\` is not provided (None), then it will use the ENV variable TERMINUSDB\\_ACCESS\\_TOKEN to connect as the API token\n\njwt\\_token\n\noptional, str\n\nThe Bearer JWT token to connect. Default to be None.\n\napi\\_token\n\noptional, strs\n\nThe API token to connect. Default to be None.\n\nbranch\n\noptional, str\n\nBranch to be connected, default to be \"main\"\n\nref\n\noptional, str\n\nRef setting\n\nrepo\n\noptional, str\n\nLocal or remote repo, default to be \"local\"\n\n\\*\\*kwargs\n\nExtra configuration options.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")\n```\n\n#### copy()\n\nCreate a deep copy of this client.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> clone = client.copy()\n>>> assert client is not clone\n```\n\n#### create\\_branch(new\\_branch\\_id, empty)\n\nCreate a branch starting from the current branch.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nnew\\_branch\\_id\n\nstr\n\nNew branch identifier.\n\nempty\n\nbool\n\nCreate an empty branch if true (no starting commit)\n\n#### create\\_database(dbid, team, label, description, prefixes, include\\_schema)\n\nCreate a TerminusDB database by posting a terminus:Database document to the Terminus Server.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbid\n\nstr\n\nUnique identifier of the database.\n\nteam\n\nstr, optional\n\nID of the Team in which to create the DB (defaults to 'admin')\n\nlabel\n\nstr, optional\n\nDatabase name.\n\ndescription\n\nstr, optional\n\nDatabase description.\n\nprefixes\n\ndict, optional\n\nOptional dict containing \\`\\`\"@base\"\\`\\` and \\`\\`\"@schema\"\\`\\` keys. @base (str) IRI to use when \\`\\`doc:\\`\\` prefixes are expanded. Defaults to \\`\\`terminusdb:///data\\`\\`. @schema (str) IRI to use when \\`\\`scm:\\`\\` prefixes are expanded. Defaults to \\`\\`terminusdb:///schema\\`\\`.\n\ninclude\\_schema\n\nbool\n\nIf \\`\\`True\\`\\`, a main schema graph will be created, otherwise only a main instance graph will be created.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.create_database(\"someDB\", \"admin\", \"Database Label\", \"My Description\")\n```\n\n#### create\\_organization(org)\n\nAdd a new organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\nThe id of the organization\n\n#### delete\\_branch(branch\\_id)\n\nDelete a branch\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranch\\_id\n\nstr\n\nBranch to delete\n\n#### delete\\_database(dbid, team, force)\n\nDelete a TerminusDB database.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbid\n\nstr\n\nID of the database to delete\n\nteam\n\nstr, optional\n\nthe team in which the database resides (defaults to \"admin\")\n\nforce\n\nbool\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.delete_database(\"<database>\", \"<team>\")\n```\n\n#### delete\\_document(document, graph\\_type, commit\\_msg, last\\_data\\_version)\n\nDelete the specified document(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\nstr or list of str\n\nDocument(s) (as dictionary or DocumentTemplate objects) or id(s) of document(s) to be updated.\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\ncommit\\_msg\n\nstr\n\nCommit message.\n\nlast\\_data\\_version\n\nstr\n\nLast version before the update, used to check if the document has been changed unknowingly\n\n#### delete\\_organization(org)\n\nDeletes a specific organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\nThe id of the organization\n\n#### delete\\_user(username)\n\nDelete a user\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nusername\n\nstr\n\nThe username of the user\n\n#### diff()\n\nDEPRECATED\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> result = client.diff({ \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"}, { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"})\n>>> result.to_json = '{ \"name\" : { \"@op\" : \"SwapValue\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}'\n```\n\n#### diff\\_object(before\\_object, after\\_object)\n\nDiff two different objects.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\\_object\n\nstring\n\nBefore object to compare\n\nafter\\_object\n\nstring\n\nAfter object to compare\n\n#### diff\\_version(before\\_version, after\\_version)\n\nDiff two different versions. Can either be a branch or a commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\\_version\n\nstring\n\nCommit or branch of the before version to compare\n\nafter\\_version\n\nstring\n\nCommit or branch of the after version to compare\n\n#### fetch(remote\\_id)\n\nFatch the brach from a remote\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremote\\_id\n\nstr\n\nid of the remote\n\n#### get\\_all\\_branches()\n\nGet all the branches available in the database.\n\n#### get\\_all\\_documents(graph\\_type, skip, count, as\\_list, get\\_data\\_version, kwargs)\n\nRetrieves all avalibale the documents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\\_type\n\nGraphType, optional\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\nskip\n\nint\n\nThe starting posiion of the returning results, default to be 0\n\ncount\n\nint or None\n\nThe maximum number of returned result, if None (default) it will return all of the avalible result.\n\nas\\_list\n\nbool\n\nIf the result returned as list rather than an iterator.\n\nget\\_data\\_version\n\nbool\n\nIf the version of the document(s) should be obtained. If True, the method return the result and the version as a tuple.\n\nkwargs\n\nAdditional boolean flags for retriving. Currently avaliable: \"prefixed\", \"unfold\"\n\n#### get\\_available\\_roles()\n\nGet the available roles for the current authenticated user\n\n#### get\\_class\\_frame(class\\_name)\n\nGet the frame of the class of class\\_name. Provide information about all the avaliable properties of that class.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nclass\\_name\n\nstr\n\nName of the class\n\n#### get\\_commit\\_history(max\\_history)\n\nGet the whole commit history. Commit history - Commit id, author of the commit, commit message and the commit time, in the current branch from the current commit, ordered backwards in time, will be returned in a dictionary in the follow format: \\`\\`\\` { \"commit\\_id\": { \"author\": \"commit\\_author\", \"message\": \"commit\\_message\", \"timestamp: <datetime object of the timestamp>\" } } \\`\\`\\`\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmax\\_history\n\nint, optional\n\nmaximum number of commit that would return, counting backwards from your current commit. Default is set to 500. It needs to be nop-negative, if input is 0 it will still give the last commit.\n\n#### get\\_database()\n\nReturns metadata (id, organization, label, comment) about the requested database Parameters ---------- dbid : str The id of the database team : str The organization of the database (default self.team)\n\n#### get\\_databases()\n\nReturns a list of database metadata records for all databases the user has access to\n\n#### get\\_document(iri\\_id, graph\\_type, get\\_data\\_version, kwargs)\n\nRetrieves the document of the iri\\_id\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\niri\\_id\n\nstr\n\nIri id for the document that is to be retrieved\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\nget\\_data\\_version\n\nbool\n\nIf the data version of the document(s) should be obtained. If True, the method return the result and the version as a tuple.\n\nkwargs\n\nAdditional boolean flags for retriving. Currently avaliable: \"prefixed\", \"minimized\", \"unfold\"\n\n#### get\\_documents\\_by\\_type(doc\\_type, graph\\_type, skip, count, as\\_list, get\\_data\\_version, kwargs)\n\nRetrieves the documents by type\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndoc\\_type\n\nstr\n\nSpecific type for the docuemnts that is retriving\n\ngraph\\_type\n\nGraphType, optional\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\nskip\n\nint\n\nThe starting posiion of the returning results, default to be 0\n\ncount\n\nint or None\n\nThe maximum number of returned result, if None (default) it will return all of the avalible result.\n\nas\\_list\n\nbool\n\nIf the result returned as list rather than an iterator.\n\nget\\_data\\_version\n\nbool\n\nIf the version of the document(s) should be obtained. If True, the method return the result and the version as a tuple.\n\nkwargs\n\nAdditional boolean flags for retriving. Currently avaliable: \"prefixed\", \"unfold\"\n\n#### get\\_existing\\_classes()\n\nGet all the existing classes (only ids) in a database.\n\n#### get\\_organization(org)\n\nReturns a specific organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\nThe id of the organization\n\n#### get\\_organization\\_user(org, username)\n\nReturns user info related to an organization.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\nusername\n\nstr\n\n#### get\\_organization\\_user\\_databases(org, username)\n\nReturns the databases available to a user which are inside an organization\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\nusername\n\nstr\n\n#### get\\_organization\\_users(org)\n\nReturns a list of users in an organization.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\norg\n\nstr\n\n#### get\\_organizations()\n\nReturns a list of organizations in the database.\n\n#### get\\_triples(graph\\_type)\n\nRetrieves the contents of the specified graph as triples encoded in turtle format\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\n#### get\\_user(username)\n\nGet a user\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nusername\n\nstr\n\nThe username of the user\n\n#### get\\_users()\n\nGet all users\n\n#### has\\_database(dbid, team)\n\nCheck whether a database exists\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbid\n\nstr\n\nThe id of the database\n\nteam\n\nstr\n\nThe organization of the database (default self.team)\n\n#### has\\_doc(doc\\_id, graph\\_type)\n\nCheck if a certain document exist in a database\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndoc\\_id\n\nstr\n\nId of document to be checked.\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\n#### info()\n\nGet info of a TerminusDB database server\n\n#### insert\\_document(document, graph\\_type, full\\_replace, commit\\_msg, last\\_data\\_version, compress, raw\\_json)\n\nInserts the specified document(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\ndict or list of dict\n\nDocument(s) to be inserted.\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\nfull\\_replace\n\nbool\n\nIf True then the whole graph will be replaced. WARNING: you should also supply the context object as the first element in the list of documents if using this option.\n\ncommit\\_msg\n\nstr\n\nCommit message.\n\nlast\\_data\\_version\n\nstr\n\nLast version before the update, used to check if the document has been changed unknowingly\n\ncompress\n\nstr or int\n\nIf it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is \\`never\\` it will never compress the data.\n\nraw\\_json\n\nbool\n\nUpdate as raw json\n\n#### insert\\_triples(graph\\_type, content, commit\\_msg)\n\nInserts into the specified graph with the triples encoded in turtle format.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\ncontent\n\nValid set of triples in Turtle or Trig format.\n\ncommit\\_msg\n\nstr\n\nCommit message.\n\n#### list\\_databases()\n\nReturns a list of database ids for all databases the user has access to\n\n#### log()\n\nGet commit history of a database Parameters ---------- team : str, optional The team from which the database is. Defaults to the class property. db : str, optional The database. Defaults to the class property. start : int, optional Commit index to start from. Defaults to 0. count : int, optional Amount of commits to get. Defaults to -1 which gets all.\n\n#### ok()\n\nCheck whether the TerminusDB server is still OK. Status is not OK when this function returns false or throws an exception (mostly ConnectTimeout)\n\n#### optimize(path)\n\nOptimize the specified path.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\npath\n\nstring\n\nPath to optimize, for instance admin/database/\\_meta for the repo graph.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.optimize('admin/database') # optimise database branch (here main)\n>>> client.optimize('admin/database/_meta') # optimise the repository graph (actually creates a squashed flat layer)\n>>> client.optimize('admin/database/local/_commits') # commit graph is optimised\n```\n\n#### patch(before, patch)\n\nApply the patch object to the before object and return an after object. Note that this change does not commit changes to the graph.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbefore\n\ndict\n\nObject before to patch\n\npatch\n\nPatch\n\nPatch object to apply to the dict\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> patch_obj = Patch(json='{\"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}')\n>>> result = client.patch({ \"@id\" : \"Person/Jane\", \"@type\" : Person\", \"name\" : \"Jane\"}, patch_obj)\n>>> print(result)\n'{ \"@id\" : \"Person/Jane\", \"@type\" : Person\", \"name\" : \"Janine\"}'\n```\n\n#### patch\\_resource()\n\nApply the patch object to the given resource\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> patch_obj = Patch(json='{\"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}')\n>>> result = client.patch_resource(patch_obj,branch=\"main\")\n>>> print(result)\n'[\"Person/Jane\"]'\n```\n\n#### pull(remote, remote\\_branch, message, author)\n\nPull updates from a remote repository to the current database.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremote\n\nstr\n\nremote to pull from, default \"origin\"\n\nremote\\_branch\n\nstr, optional\n\nremote branch to pull from, default to be your current barnch\n\nmessage\n\nstr, optional\n\noptional commit message\n\nauthor\n\nstr, optional\n\noption to overide the author of the operation\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.pull()\n```\n\n#### push(remote, remote\\_branch, message, author, remote\\_auth)\n\nPush changes from a branch to a remote repo\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nremote\n\nstr\n\nremote to push to, default \"origin\"\n\nremote\\_branch\n\nstr, optional\n\nremote branch to push to, default to be your current barnch\n\nmessage\n\nstr, optional\n\noptional commit message\n\nauthor\n\nstr, optional\n\noption to overide the author of the operation\n\nremote\\_auth\n\ndict, optional\n\noptional remote authorization (uses client remote auth otherwise)\n\n##### Examples\n\n```\n>>> Client(server=\"http://localhost:6363\").push(remote=\"origin\", remote_branch = \"main\", author = \"admin\", message = \"commit message\"})\n```\n\n#### query(woql\\_query, commit\\_mg, get\\_data\\_version, last\\_data\\_version, file\\_dict)\n\nUpdates the contents of the specified graph with the triples encoded in turtle format Replaces the entire graph contents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nwoql\\_query\n\ndict or WOQLQuery object\n\nA woql query as an object or dict\n\ncommit\\_mg\n\nstr\n\nA message that will be written to the commit log to describe the change\n\nget\\_data\\_version\n\nbool\n\nIf the data version of the query result(s) should be obtained. If True, the method return the result and the version as a tuple.\n\nlast\\_data\\_version\n\nstr\n\nLast version before the update, used to check if the document has been changed unknowingly\n\nfile\\_dict\n\n\\*\\*deprecated\\*\\*\n\nFile dictionary to be associated with post name => filename, for multipart POST\n\n##### Examples\n\n```\n>>> Client(server=\"http://localhost:6363\").query(woql, \"updating graph\")\n```\n\n#### query\\_document(document\\_template, graph\\_type, as\\_list, get\\_data\\_version)\n\nRetrieves all documents that match a given document template\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\\_template\n\ndict\n\nTemplate for the document that is being retrived\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\nas\\_list\n\nbool\n\nIf the result returned as list rather than an iterator.\n\nget\\_data\\_version\n\nbool\n\nIf the data version of the document(s) should be obtained. If True, the method return the result and the version as a tuple.\n\n#### rebase(branch, rebase\\_source, message, author)\n\nRebase the current branch onto the specified remote branch. Need to specify one of 'branch','commit' or the 'rebase\\_source'.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nbranch\n\nstr, optional\n\nthe branch for the rebase\n\nrebase\\_source\n\nstr, optional\n\nthe source branch for the rebase\n\nmessage\n\nstr, optional\n\nthe commit message\n\nauthor\n\nstr, optional\n\nthe commit author\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.rebase(\"the_branch\")\n```\n\n#### replace\\_document(document, graph\\_type, commit\\_msg, last\\_data\\_version, compress, create, raw\\_json)\n\nUpdates the specified document(s)\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\ndict or list of dict\n\nDocument(s) to be updated.\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\ncommit\\_msg\n\nstr\n\nCommit message.\n\nlast\\_data\\_version\n\nstr\n\nLast version before the update, used to check if the document has been changed unknowingly\n\ncompress\n\nstr or int\n\nIf it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is \\`never\\` it will never compress the data.\n\ncreate\n\nbool\n\nCreate the document if it does not yet exist.\n\nraw\\_json\n\nbool\n\nUpdate as raw json\n\n#### reset(commit, soft, use\\_path)\n\nReset the current branch HEAD to the specified commit path. If \\`soft\\` is not True, it will be a hard reset, meaning reset to that commit in the backend and newer commit will be wipped out. If \\`soft\\` is True, the client will only reference to that commit and can be reset to the newest commit when done.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ncommit\n\nstring\n\nCommit id or path to the commit (if use\\_path is True), for instance '234980523ffaf93' or 'admin/database/local/commit/234980523ffaf93'. If not provided, it will reset to the newest commit (useful when need to go back after a soft reset).\n\nsoft\n\nbool\n\nFlag indicating if the reset if soft, that is referencing to a previous commit instead of resetting to a previous commit in the backend and wipping newer commits.\n\nuse\\_path\n\nbool\n\nWheather or not the commit given is an id or path. Default using id and use\\_path is False.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.reset('234980523ffaf93')\n>>> client.reset('admin/database/local/commit/234980523ffaf93', use_path=True)\n```\n\n#### rollback()\n\nCurently not implementated. Please check back later.\n\n#### set\\_db(dbid, team)\n\nSet the connection to another database. This will reset the connection.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndbid\n\nstr\n\nDatabase identifer to set in the config.\n\nteam\n\nstr\n\nTeam identifer to set in the config. If not passed in, it will use the current one.\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.set_db(\"database1\")\n'database1'\n```\n\n#### squash(message, author, reset)\n\nSquash the current branch HEAD into a commit\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\nmessage\n\nstring\n\nMessage for the newly created squash commit\n\nauthor\n\nstring\n\nAuthor of the commit\n\nreset\n\nbool\n\nPerform reset after squash\n\n##### Examples\n\n```\n>>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> client.squash('This is a squash commit message!')\n```\n\n#### update\\_document(document, graph\\_type, commit\\_msg, last\\_data\\_version, compress)\n\nUpdates the specified document(s). Add the document if not existed.\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ndocument\n\ndict or list of dict\n\nDocument(s) to be updated.\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\ncommit\\_msg\n\nstr\n\nCommit message.\n\nlast\\_data\\_version\n\nstr\n\nLast version before the update, used to check if the document has been changed unknowingly\n\ncompress\n\nstr or int\n\nIf it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is \\`never\\` it will never compress the data.\n\n#### update\\_triples(graph\\_type, content, commit\\_msg)\n\nUpdates the contents of the specified graph with the triples encoded in turtle format. Replaces the entire graph contents\n\n##### Parameters\n\n**Name**\n\n**Type**\n\n**Description**\n\ngraph\\_type\n\nGraphType\n\nGraph type, either GraphType.INSTANCE or GraphType.SCHEMA.\n\ncontent\n\nValid set of triples in Turtle or Trig format.\n\ncommit\\_msg\n\nstr\n\nCommit message."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB Python Client reference guide",
      "description": "TerminusDB Python Client reference guide",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "GraphQL Query Reference Guide"
    },
    "slug": "graphql-query-reference",
    "body": {
      "@type": "Body",
      "value": "GraphQL queries are composed of:\n\n*   Queries\n*   Arguments\n*   Fields\n\nEach Class in TerminusDB automatically generates a top-level Query. Each property of the class automatically generates both arguments and fields.\n\nThe names of the types of arguments and fields are generated automatically [subject to name mapping](/docs/graphql-naming-conventions-reference/).\n\nIn turn, each property which is an edge leading to a new object of a class will have its own field with arguments.\n\nEach concrete data query will be terminal and will generate a specific field parameter for search.\n\n## Example\n\nFor example, using the following TerminusDB schema:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"name\" : \"xsd:string\",\n  \"dob\" : \"xsd:dateTime\",\n  \"friend\" : {\"@type\" : \"Set\", \"@class\" : \"Person\" }}\n```\n\nTerminusDB will generate the following GraphQL class.\n\n```\ntype Query {\n  Person(\n    id: ID\n    \"\"\"skip N elements\"\"\"\n    offset: Int\n    \"\"\"limit results to N elements\"\"\"\n    limit: Int\n    filter: Person_Filter\n    \"\"\"order by the given fields\"\"\"\n    orderBy: Person_Ordering\n  ): [Person!]!\n}\ntype Person {\n  dob: DateTime!\n  friend(\n    id: ID\n    \"\"\"skip N elements\"\"\"\n    offset: Int\n    \"\"\"limit results to N elements\"\"\"\n    limit: Int\n    filter: Person_Filter\n    \"\"\"order by the given fields\"\"\"\n    orderBy: Person_Ordering\n  ): [Person!]!\n  name: String!\n  id: ID!\n}\n```\n\nThe `Person` query, allows you to query for a person at the top level, along with a number of arguments, including: a `filter` (for search), a `limit` for reducing to a defined length of results, an `offset`, for obtaining results starting from some offset (for use in _paging_) and an `orderBy` to obtain the results in a defined order.\n\nIn addition, we have the various _fields_ of a `Person` object, each of which may have arguments if they are objects or simple data types for terminal fields.\n\nOne can use such a query by using the [GraphQL endpoint](/docs/connecting-to-graphql-reference/).\n\n## Arguments\n\nArguments are restrictions or meta-fields about the query. These can be used to limit results, or filter to specific results, as well as perform ordering.\n\n### `id`\n\nThe id of an object can be directly supplied, in order to ensure that we only obtain the specific object of interest.\n\nA person might be retrieved by supplying the id as a variable in the following way:\n\n```\nquery Person(id:$id){\n  name\n}\n```\n\n### `offset`\n\nGraphQL will retrieve all objects in the database for a given class type, unless `offset` and `limit` are supplied. `offset` will start a query from a given result offset, allowing the query user to _page_ results.\n\n```\nquery Person(limit: 3 offset: 3){\n  name\n    Person(\n    id: ID\n    \"\"\"skip N elements\"\"\"\n    offset: Int\n    \"\"\"limit results to N elements\"\"\"\n    limit: Int\n    filter: Person_Filter\n    \"\"\"order by the given fields\"\"\"\n    orderBy: Person_Ordering\n  ): [Person!]!\n}\n```\n\nThis query retrieves the second page of a 3-object page of persons.\n\n### `limit`\n\nGraphQL will retrieve all objects in the database for a given class type, unless `offset` and `limit` are supplied. `limit` will only find the limit-number of results, allowing the query user to _page_ results.\n\n```\nquery Person(limit: 3 offset: 3){\n  name\n}\n```\n\nThis query retrieves the second page of a 3-object page of persons.\n\n### `orderBy`\n\nThe orderBy filter allows the user to order results according to some data in the object. For instance, to create an ordering on people, we might write:\n\n```\nquery Person(limit: 3 offset: 3, orderBy: { dob: DESC, name: ASC}){\n  name\n  dob\n}\n```\n\nThis will yield Persons from youngest to oldest, ordering by name in the event of a \"tie\" on date of birth.\n\n## `filter`\n\nFilters allow you to restrict to specific results by reducing the set to those objects which match the filter fields.\n\nEach filter is an input object, defined for the specific class and generated automatically by TerminusDB. The `Person` object defined above gets the input objects:\n\n```\ninput Person_Filter {\n  dob: DateTimeFilterInputObject\n  friend: Person_Collection_Filter\n  name: StringFilterInputObject\n  _and: [Person_Filter!]\n  _or: [Person_Filter!]\n  _not: Person_Filter\n}\ninput Person_Collection_Filter {\n  someHave: Person_Filter\n  allHave: Person_Filter\n}\ninput StringFilterInputObject {\n  eq: String\n  ne: String\n  lt: String\n  le: String\n  gt: String\n  ge: String\n  regex: String\n  startsWith: String\n  allOfTerms: [String!]\n  anyOfTerms: [String!]\n}\ninput DateTimeFilterInputObject {\n  eq: DateTime\n  ne: DateTime\n  lt: DateTime\n  le: DateTime\n  gt: DateTime\n  ge: DateTime\n}\n```\n\nFilters can apply to immediate values, such as the `dob` (date of birth), which can be restricted using a time comparison, or they can be filters on linked objects, such as the `Person_Collection_Filter` which allows us to compare with our friends.\n\nIn GraphQL we might write a simple query over people as:\n\n```\nquery Person(orderBy: { name: ASC},\n             filter: { name: {regex: \"(Joe|Joseph)\"},\n                       _and: [{friend:\n                                 {someHave:\n                                    {name: {regex: \"(Jim|James)\"}}}}]}){\n  name\n  dob\n}\n```\n\nThis finds name and date of birth of all people who have a name which contains \"Joe\" or \"Joesph\" and who are friends with someone named \"Jim\" or \"James\", in order of ascending name.\n\n## Filter Builtin Types\n\nFilters have to work with all of the GraphQL base types, along with the extensions which TerminusDB currently supports (`DateTime`, and `BigInt`).\n\n### BigIntFilterInputObject\n\nBig integers use the widely available `BigInt` type extension to GraphQL.\n\nThe Filters available for BigInt are:\n\n*   `eq`: Equality\n*   `ne`: disequality\n*   `lt`: Less than\n*   `le`: Less than or equal\n*   `gt`: Greater than\n*   `ge`: Greater than or equal\n\nWhen a field of an object refers to a `BigInt`, we can filter it by writing a query along the following lines:\n\n```\nquery {\n   Event(filter : { years_since_big_bang : { ge : \"8000000000\"}}){\n     event_name\n     years_since_big_bang\n   }\n}\n```\n\n### DateTimeFilterInputObject\n\nDate time objects use the widely available `DateTime` type extension to GraphQL.\n\nThe Filters available for BigInt are:\n\n*   `eq`: Equality\n*   `ne`: disequality\n*   `lt`: Less than\n*   `le`: Less than or equal\n*   `gt`: Greater than\n*   `ge`: Greater than or equal\n\n```\nquery {\n   Event(filter : { date_of_event : { ge : \"2000-01-01T00:00:00Z\"}}){\n     event_name\n     date_of_event\n   }\n}\n```\n\n### StringFilterInputObject\n\nStrings are native GraphQL types. TerminusDB exposes the following filter options for strings:\n\n*   `eq`: Equality\n*   `ne`: Disequality\n*   `lt`: Less than\n*   `le`: Less than or equal\n*   `gt`: Greater than\n*   `ge`: Greater than or equal\n*   `regex`: Matches regex\n*   `startsWith`: Matches the string prefix\n*   `allOfTerms`: Contains all terms in the list of terms\n*   `anyOfTerms`: Contains any of the terms in the list of terms\n\nA query filter using strings could be written as follows:\n\n```\nquery {\n   Event(filter : { event_name : { regex : \"[Cc]elstial [Ee]vent\"}}){\n     event_name\n   }\n}\n```\n\n### BooleanFilterInputObject\n\nBooleans are native GraphQL types. TerminusDB exposes the following filter options:\n\n*   `eq`: Equality\n*   `ne`: Disequality\n\nA query filter using booleans could be written as follows:\n\n```\nquery {\n   Event(filter : { is_super_nova : { eq : true}}){\n     event_name\n   }\n}\n```\n\n### SmallIntegerFilterInputObject\n\nIntegers (signed, 32-bit integers) are native GraphQL types. TerminusDB exposes the following filter options:\n\n*   `eq`: Equality\n*   `ne`: disequality\n*   `lt`: Less than\n*   `le`: Less than or equal\n*   `gt`: Greater than\n*   `ge`: Greater than or equal\n\nA query filter using booleans could be written as follows:\n\n```\nquery {\n   Civilization(filter : { kardashev_scale : { ge : 3}}){\n     name\n     kardashev_scale\n   }\n}\n```\n\n### `_and`\n\nThe `_and` filter combinator allows us to chain constraints. It takes two filter objects relevant at the current level.\n\nWe can find all civilizations of a high Kardashev scale using a query such as:\n\n```\nquery {\n   Civilization(filter : {_and : [{ kardashev_scale : { le : 5}}\n                                  { kardashev_scale : { ge : 3}}]){\n     name\n     kardashev_scale\n   }\n}\n```\n\n### `_or`\n\nThe `_or` filter combinator allows us to make choices of constraints. It takes two filter objects relevant at the current level. It is implicitly combined as if with `_and`, with any filters at the current level. We can find all civilizations of a high Kardashev scale, which is also a galactic civilisation using a query such as:\n\n```\nquery {\n   Civilization(filter : { galactic_scale : {eq : true},\n                           _or : [{ kardashev_scale : { eq : 2}}\n                                  { kardashev_scale : { eq : 3}}]){\n     name\n     kardashev_scale\n   }\n}\n```\n\n### `_not`\n\nThe `_not` operator allows us to combine other constraints with _dis-constraints_, which remove any elements which match its sub-filter. We can ask for galactic civilizations which have not mastered energy acquisition at level 3 on the Kardashev scale.\n\n```\nquery {\n   Civilization(filter : { galactic_scale : {eq : true},\n                           _not : { kardashev_scale : { eq : 3}}}){\n     name\n     kardashev_scale\n   }\n}\n```\n\n## Fields\n\nEach TerminusDB class has associated with it, some number of fields. These fields include each field that is defined in the class. For instance, given the TerminusDB class:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"name\" : \"xsd:string\",\n  \"dob\" : \"xsd:dateTime\",\n  \"friend\" : {\"@type\" : \"Set\", \"@class\" : \"Person\" }}\n```\n\nWe have a query field for each of `name`, `dob` and `friend`. However we also have the following specially defined fields:\n\n### `_id`\n\nThis returns the fully qualified URI of the given instance of the `Person` class being returned.\n\n### `_type`\n\nThis returns the class at which this instance is instantiated. This is useful when a super-class is queried, as we can obtain what concrete subclass it corresponds to.\n\n### Backlinks\n\n`_PROPERTY_of_CLASS`\n\nThe _backlink_ is a way to find all instances that _point_ to a given class. The backlink is generated automatically for every edge which terminates at the current class. For example, with the Person class:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"name\" : \"xsd:string\",\n  \"dob\" : \"xsd:dateTime\",\n  \"friend\" : {\"@type\" : \"Set\", \"@class\" : \"Person\" }}\n```\n\nWe automatically get the backlink `_friend_of_Person` that says which people view us as their friends. For instance, we can construct the following query:\n\n```\n{\n  Person{\n    name\n    _friend_of_Person{\n      name\n    }\n  }\n}\n```\n\nThis will find the name of every person who views the top level `Person` us as their friend (i.e. has a `friend` link to the current person).\n\n### Path Queries\n\n`_path_to_CLASS`\n\nA path query allows us to use regular graph expressions to follow links from the current object to another object of `CLASS`. Using the `Person` example:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"name\" : \"xsd:string\",\n  \"dob\" : \"xsd:dateTime\",\n  \"friend\" : {\"@type\" : \"Set\", \"@class\" : \"Person\" }}\n```\n\nWe can find everyone within 2-degrees of separation with the following path query:\n\n```\n{\n  Person{\n    name\n    _path_to_Person(path: \"friend{1,3}\"){\n      name\n    }\n  }\n}\n```\n\nSee the [complete syntax for path queries](/docs/path-query-reference-guide/) for more details on the semantics of the path argument."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "GraphQL Query Reference Guide",
      "description": "A GraphQL query reference guide explaining the workings of GraphQL queries with TerminusDB and TerminusCMS",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Connecting to GraphQL Reference Guide"
    },
    "slug": "connecting-to-graphql-reference",
    "body": {
      "@type": "Body",
      "value": "TerminusDB hosts a GraphQL endpoint at:\n\n```\nSERVERNAME/api/graphql/ORG/DATAPRODUCT\n```\n\nFor instance, with a data product named `admin/people`, and a locally installed TerminusDB, you can query it at:\n\n```\nhttp://127.0.0.1:6363/api/graphql/admin/people\n```\n\nFor TerminusCMS you can use the following URL:\n\n```\nhttps://cloud.terminusdb.com/ORG/api/graphql/ORG/DATA_PRODUCT\n```\n\nWhere `ORG` is your organization, and `DATA_PRODUCT` is the name of your data product.\n\n## Authentication\n\nSince TerminusDB requires authentication to access data products, you will need to use the authentication method that has been configured for your server.\n\n### Basic Auth\n\nUsing Basic Auth, the default method in locally installed TerminusDBs, you can supply the Authorization header, with your basic auth. (To generate a Basic Auth string, see [Basic Auth Generator](https://www.blitter.se/utils/basic-authentication-header-generator/)).\n\nFor example, if you would like to connect to `admin/people` with the apollo client to download the associated GraphQL schema, simply use:\n\n```\nnpx apollo client:download-schema --endpoint=http://127.0.0.1:6363/api/graphql/admin/people schema.graphql --header='Authorization: Basic YWRtaW46cm9vdA=='\n```\n\n### TerminusCMS\n\nIn TerminusCMS you can use an API key with the following header.\n\nFor instance, with the apollo client, you can download your schema as follows:\n\n```\nnpx apollo client:download-schema --endpoint=https://cloud.terminusdb.com/TEAM/api/graphql/TEAM/people schema.graphql --header=\"Authorization: Token $(cat ~/my_token_file)\"\n```\n\nWhere `my_token_file` contains an API token for TerminusCMS.\n\n## GraphiQL\n\n![GraphiQL interface screen shot](https://assets.terminusdb.com/docs/how-to-query-graphql.png)\n\nTerminusDB ships with a GraphiQL graphical GraphQL query interface and schema browser. This is a quick way to get acquainted with GraphQL in TerminusDB.\n\nYou can reach this browser at:\n\n```\nhttp://127.0.0.1:6363/api/graphiql/admin/people\n```\n\nYou will also need to set your Authorization header in the Header dialog box at the bottom center.\n\nFor instance, in the default install, as:\n\n```\n{\n  \"Authorization\": \"Basic YWRtaW46cm9vdA==\"\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Connecting to GraphQL Reference Guide",
      "description": "A reference guide detailing connecting to GraphQL with TerminusDB and TerminusCMS.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "GraphiQL interface screen shot",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "GraphiQL interface screen shot"
        },
        "value": "https://assets.terminusdb.com/docs/how-to-query-graphql.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "GraphQL Naming Conventions Reference Guide"
    },
    "slug": "graphql-naming-conventions-reference",
    "body": {
      "@type": "Body",
      "value": "TerminusDB has its own flexible schema language which is designed to be compatible with RDF. The RDF world identifies resources with IRIs which are flexible, and use a relatively large space of available characters.\n\nGraphQL, by contrast, has a very restrictive allowed character set for naming. Essentially only Alphanumeric characters using un-accented Latin. That is, it is essentially restricted to `[A-Z][a-z][0-9][_]`.\n\nBecause of this, we have some naming conventions to translate automatically from TerminusDB classes and properties to GraphQL named classes and properties. While we have endevoured to do so in a way that is unlikely to create naming collisions, these are never-the-less possible.\n\nTerminusDB generates GraphQL schema automatically as a mapping from TerminusDB. TerminusDB's definition language is a strict super-set of GraphQL and so is able to faithfully represent GraphQL features.\n\nFor each class in TerminusDB, there is a range of classes that are defined automatically by TerminusDB in the associated GraphQL schema.\n\n## Underscore as reserved\n\nWhen names are likely to create conflicts with user-defined names, TerminusDB will typically use an `_` at the beginning to avoid naming conflicts. This is done on filter fields that share the same object level with user-defined properties for instance: `_and`, `_or` and `_not`.\n\n## Translation\n\nAll names of GraphQL classes in TerminusDB and all properties of TerminusDB classes, as well as all enums, are translated to viable GraphQL names. This is done by replacing each non-representable character with an `_`. In addition, underscores at the beginning of a class name or property are disallowed. This is to ensure there are no collisions with TerminusDB's own auto-generated properties and classes.\n\nShould a collision arise, TerminusDB should give a GraphQL error on retrieval of the schema. In future, we will allow this check to occur at schema submission time, and will also allow explicit renaming in TerminusDB classes.\n\nFor instance, the TerminusDB class is defined as:\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Galactic-Civilisation\",\n  \"name\" : \"xsd:string\",\n  \"kardashev-scale\" : \"xsd:integer\" }\n```\n\nwill be translated to:\n\n```\ntype Query {\n  Galatic_Civilisation(\n    id: ID\n    \"\"\"skip N elements\"\"\"\n    offset: Int\n    \"\"\"limit results to N elements\"\"\"\n    limit: Int\n    filter: Galactic_Civilisation_Filter\n    \"\"\"order by the given fields\"\"\"\n    orderBy: Galactic_Civilisation_Ordering\n    ): [GalaticCivilsiation!]!\n    name : String!\n    kardashev_scale: BigInt!\n}\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "GraphQL Naming Conventions Reference Guide",
      "description": "A reference guide detail the GraphQL naming conventions in TerminusDB and TerminusCMS.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "System Graph Interface to GraphQL"
    },
    "slug": "system-graph-graphql-interface-reference",
    "body": {
      "@type": "Body",
      "value": "TerminusDB also exposes its internal working graphs, the system graph, the meta graph, and the commit-graph. These three graphs can be queried with a self-documenting GraphQL interface by going to the appropriate API for a data product.\n\n## System Graph\n\nFor instance, to get _only_ system graph access, you can use the following endpoint:\n\n```\nhttp://127.0.0.1:6363/api/graphql/_system\n```\n\n## Meta Graph\n\nTo get the System Graph and Meta graph which belongs to a specific data product you can use the following endpoint:\n\n```\nhttp://127.0.0.1:6363/api/graphql/ORG/DATA_PRODUCT/_meta\n```\n\n## Commit Graph\n\nTo get access to branches, commits, commit logs, as well as the meta and system graph, you can use the following endpoint:\n\n```\nhttp://127.0.0.1:6363/api/graphql/ORG/DATA_PRODUCT/local/_commits\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "System Graph Interface to GraphQL",
      "description": "TerminusCMS and TerminusDB technical documentation - System Graph Interface to GraphQL",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Connect with Apollo Client"
    },
    "slug": "connect-with-apollo-client",
    "body": {
      "@type": "Body",
      "value": "1.  Install dependencies\n\n```\n    npm install @apollo/client graphql\n```\n\n2.  Initialize ApolloClient and Connect with TerminusDB\n\nImport the required dependencies needed -\n\n```python\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql,HttpLink,ApolloLink } from '@apollo/client';\n```\n\nOr\n\n```javascript\nconst Apollo =  require( '@apollo/client');\n\nconst { ApolloClient, InMemoryCache, concat, gql,HttpLink,ApolloLink } = Apollo\n```\n\nInitialize ApolloClient by passing its constructor with a configuration object with the TerminusDB server endpoint, user credentials and cache fields.\n\n> Extra information about the Apollo client cache can be found on their [website](https://www.apollographql.com/docs/react/caching/overview)\n\n### Connect with TerminusDB Local\n\n```javascript\nconst orgName = \"myOrganizationName\"\nconst dbName = \"myDBname\"\nconst myBranch = \"main\"\n\nconst user = \"admin\"\nconst password = \"mypass\"\nconst userPassEnc = btoa(`${user}:${password}`)\n\nconst terminusdbURL = `http://127.0.0.1:6363/api/graphql/${orgName}/${dbName}/local/branch/${myBranch}/`\n\nconst httpLink = new HttpLink({ uri: terminusdbURL });\nconst authMiddleware = new ApolloLink((operation, forward) => {\n    // add the authorization to the headers\n    operation.setContext(({ headers = {} }) => ({\n    headers: {\n        ...headers,\n        authorization: `Basic ${userPassEnc}`}\n    }));\n    return forward(operation);\n})\n\nconst cache = new InMemoryCache({\n    addTypename: false\n});\n\nconst value = concat(authMiddleware, httpLink)\n\nconst apolloClient = new ApolloClient({\n    cache:cache,\n    link: value,       \n});\n\n// Query your database\n\napolloClient\n  .query({\n    query: gql`\n     query{\n        Person{\n        _id\n        name\n        }\n    }\n    `,\n  })\n  .then((result) => console.log(result.data))\n  .catch(err =>console.log(err.message));\n```\n\n### Connect with TerminusCMS\n\n> You will need to [get your API key](/docs/how-to-connect-terminuscms/) to connect with terminusCMS\n\n```javascript\nconst orgName = \"myOrganizationName\"\nconst dbName = \"myDBname\"\nconst myBranch = \"main\"\n\nconst myAPIToken = 'replaceYourToken'\n\nconst terminusdbURL = `https://cloud.terminusdb.com/${orgName}/api/graphql/${orgName}/${dbName}/local/branch/${myBranch}/`\n\nconst httpLink = new HttpLink({ uri: terminusdbURL });\nconst authMiddleware = new ApolloLink((operation, forward) => {\n    // add the authorization to the headers\n    operation.setContext(({ headers = {} }) => ({\n    headers: {\n        ...headers,\n        authorization: `Token ${myAPIToken}`}\n    }));\n    return forward(operation);\n})\n\nconst cache = new InMemoryCache({\n    addTypename: false\n});\n\nconst value = concat(authMiddleware, httpLink)\n\nconst apolloClient = new ApolloClient({\n    cache:cache,\n    link: value,       \n});\n\n// Query your database\n\napolloClient\n  .query({\n    query: gql`\n     query{\n        Person{\n        _id\n        name\n        }\n    }\n    `,\n  })\n  .then((result) => console.log(result.data))\n  .catch(err =>console.log(err.message));\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Connect with Apollo Client to use GraphQL with TerminusCMS",
      "description": "A reference guide to get you up and running with TerminusDB & TerminusCMS  using GraphQL and Apollo Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "OpenAPI spec"
    },
    "slug": "openapi",
    "body": {
      "@type": "Body",
      "value": ""
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS/DB documentation",
      "description": "The documentation of TerminusCMS and TerminusDB"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Access Control Reference Guide"
    },
    "slug": "js-access-control",
    "body": {
      "@type": "Body",
      "value": "**License**: Apache Version 2\n\n## new AccessControl()\n\nAccessControl is a driver to work with the TerminusDB and TerminusCMS access control API.\n\nFor credentials, you can use a JWT token, an API token or basic authentication with username and password.\n\n**Example**\n\n```javascript\n//connect with the API token\n//(to request a token create an account in  https://terminusdb.com/)\nconst accessContol = new AccessControl(\"https://servername.com\",\n{organization:\"my_team_name\",\ntoken:\"dGVybWludXNkYjovLy9kYXRhL2tleXNfYXB........\"})\naccessControl.getOrgUsers().then(result=>{\n     console.log(result)\n})\n\n//connect with the jwt token this type of connection is only for the dashboard\n//or for application integrate with our login workflow\nconst accessContol = new AccessControl(\"https://servername.com\",\n{organization:\"my_team_name\",\njwt:\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYyeTFORUd........\"})\naccessControl.getOrgUsers().then(result=>{\n     console.log(result)\n})\n\n//if the jwt is expired you can change it with\naccessControl.setJwtToken(\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYy\neTFORUd.......\")\n\n//connect with the base authentication this type of connection is only for the local installation\nconst accessContol = new AccessControl(\"http://localhost:6363\",\n{organization:\"my_team_name\", user:\"admin\"\nkey:\"mykey\"})\naccessControl.getOrgUsers().then(result=>{\n    console.log(result)\n})\n```\n\n## getDefaultOrganization\n\n##### accessControl.getDefaultOrganization(params) ⇒ `string` | `undefined`\n\nGet a organization from parameters.\n\n**Returns**: `string` | `undefined` - - organization\n\nParam\n\nType\n\nDescription\n\nparams\n\n`object`\n\nThe parameters\n\n## setJwtToken\n\n##### accessControl.setJwtToken(jwt)\n\nSets the Jwt token for the object\n\nParam\n\nType\n\nDescription\n\njwt\n\n`string`\n\nThe jwt api token to use\n\n## setApiToken\n\n##### accessControl.setApiToken(atokenpi)\n\nSets the API token for the object. Create a TerminusCMS account to [get your API token](/docs/how-to-connect-terminuscms/).\n\nParam\n\nType\n\nDescription\n\natokenpi\n\n`string`\n\nThe API token to use to connect with TerminusCMS\n\n## setApiKey\n\n##### accessControl.setApiKey(atokenpi)\n\nSets the API token for the object, to request a token create an account in https://terminusdb.com/\n\nParam\n\nType\n\nDescription\n\natokenpi\n\n`string`\n\nThe API token to use to connect with TerminusCMS\n\n## getAPIUrl\n\n##### accessControl.getAPIUrl(cloudAPIUrl) ⇒ `string`\n\nGet a API url from cloudAPIUrl\n\n**Returns**: `string` - apiUrl\n\nParam\n\nType\n\nDescription\n\ncloudAPIUrl\n\n`string`\n\nThe base url for cloud\n\n## customHeaders\n\n##### accessControl.customHeaders(customHeaders) ⇒ `object`\n\nadd extra headers to your request\n\nParam\n\nType\n\ncustomHeaders\n\n`object`\n\n## getOrganization\n\n##### accessControl.getOrganization(organization) ⇒ `object`\n\n\\-- TerminusDB API --- Get an organization from the TerminusDB API.\n\n**Returns**: `object` - - organization\n\nParam\n\nType\n\nDescription\n\norganization\n\n`string`\n\nThe organization\n\n## getAllOrganizations\n\n##### accessControl.getAllOrganizations() ⇒ `Promise`\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Get list of organizations\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\n## createOrganization\n\n##### accessControl.createOrganization(orgName) ⇒ `Promise`\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Create an organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to create\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## deleteOrganization\n\n##### accessControl.deleteOrganization(orgName) ⇒ `Promise`\n\n\\-- TerminusDB API --- Delete an Organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to delete\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## createRole\n\n##### accessControl.createRole(\\[name\\], \\[actions\\]) ⇒ `Promise`\n\n\\--TerminusDB API --- basic authentication, admin user. Create a new role in the system database.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[name\\]\n\n`string`\n\nThe role name.\n\n\\[actions\\]\n\n`typedef.RolesActions`\n\nA list of actions\n\n**Example**\n\n```\naccessControl.createRole(\"Reader\",[ACTIONS.INSTANCE_READ_ACCESS]).then(result=>{\n console.log(result)\n})\n```\n\n## deleteRole\n\n##### accessControl.deleteRole(\\[name\\]) ⇒ `Promise`\n\n\\-- TerminusDB API --- basic Authentication, admin user. Delete role in the system database, (this api is enabled only in the local installation)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[name\\]\n\n`string`\n\nThe role name.\n\n**Example**\n\n```\naccessControl.deleteRole(\"Reader\").then(result=>{\n console.log(result)\n})\n```\n\n## getAllUsers\n\n##### accessControl.getAllUsers() ⇒ `Promise`\n\n\\-- TerminusDB API --- basic Authentication, admin user. Return the list of all the users (this api is enabled only in the local installation)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.  \n**Example**\n\n```\naccessControl.getAllUsers().then(result=>{\n console.log(result)\n})\n```\n\n## createUser\n\n##### accessControl.createUser(name, \\[password\\]) ⇒ `Promise`\n\n\\-- TerminusDB API --- basic Authentication, admin user. Add the user into the system database\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nname\n\n`string`\n\nthe user name\n\n\\[password\\]\n\n`string`\n\nyou need the password for basic authentication\n\n**Example**\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n## deleteUser\n\n##### accessControl.deleteUser(userId) ⇒ `Promise`\n\n\\-- TerminusDB API --- basic Authentication, admin user. Remove the user from the system database.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nthe document user id\n\n**Example**\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n## manageCapability\n\n##### accessControl.manageCapability(userName, resourceName, rolesArr, operation, scopeType) ⇒ `Promise`\n\n\\-- TerminusDB API --- Grant/Revoke Capability\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserName\n\n`string`\n\nthe document user id\n\nresourceName\n\n`string`\n\nthe name of a (database or team)\n\nrolesArr\n\n`array`\n\nthe roles name list\n\noperation\n\n`typedef.CapabilityCommand`\n\ngrant/revoke operation\n\nscopeType\n\n`typedef.ScopeType`\n\nthe resource type (database or organization)\n\n**Example**\n\n```\n//we add an user to an organization and manage users' access\n//the user myUser can  access the Organization and all the database under the organization with \"reader\" Role\nclient.manageCapability(myUser,myteam,[reader],\"grant\",\"organization\").then(result=>{\n consol.log(result)\n})\n\n//the user myUser can  access the database db__001 under the organization myteam\n//with \"writer\" Role\nclient.manageCapability(myUser,myteam/db__001,[writer],\"grant\",\"database\").then(result=>{\n consol.log(result)\n})\n```\n\n## getAccessRoles\n\n##### accessControl.getAccessRoles() ⇒ `Promise`\n\n\\--TerminusCMS and TerminusDB API --- Get all the system database roles types.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\n## getOrgUsers\n\n##### accessControl.getOrgUsers(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS and TerminusDB API -- Get all the organization's users and roles,\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\naccessControl.getOrgUsers().then(result=>{\n console.log(result)\n})\n\n//this function will return an array of capabilities with users and roles\n//-- TerminusCMS --  response array example\n//[{capability: \"Capability/3ea26e1d698821c570afe9cb4fe81a3......\"\n//     email: {@type: \"xsd:string\", @value: \"user@terminusdb.com\"}\n//     picture: {@type: \"xsd:string\",…}\n//     role: \"Role/dataReader\"\n//     scope: \"Organization/my_org_name\"\n//     user: \"User/auth0%7C613f5dnndjdjkTTT\"}]\n//\n//\n// -- Local Installation -- response array example\n//[{ \"@id\":\"User/auth0%7C615462f8ab33f4006a6bee0c\",\n//  \"capability\": [{\n//   \"@id\":\"Capability/c52af34b71f6f8916ac0115ecb5fe0e31248ead8b1e3d100852015...\",\n//   \"@type\":\"Capability\",\n//  \"role\": [{\n//    \"@id\":\"Role/admin\",\n//    \"@type\":\"Role\",\n//    \"action\": [\"instance_read_access\"],\n//     \"name\":\"Admin Role\"\n//     }],\n//  \"scope\":\"Organization/@team\"}]]\n```\n\n## getTeamUserRoles\n\n##### accessControl.getTeamUserRoles(\\[userName\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS and TerminusDB API -- Get the user roles for a given organization or the default organization,\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[userName\\]\n\n`string`\n\nThe organization name.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getTeamUserRole(\"myUser\").then(result=>{\n console.log(result)\n})\n\n//response object example\n{\n \"@id\": \"User/myUser\",\n  \"capability\": [\n        {\n          \"@id\":\"Capability/server_access\",\n          \"@type\":\"Capability\",\n          \"role\": [{\n             \"@id\":\"Role/reader\",\n              \"@type\":\"Role\",\n             \"action\": [\n                \"instance_read_access\",\n             ],\n              \"name\":\"reader\"\n            }],\n          \"scope\":\"Organization/myteam\"\n        }\n      ],\n  \"name\": \"myUser\"\n}\n```\n\n## ifOrganizationExists\n\n##### accessControl.ifOrganizationExists(orgName) ⇒ `Promise`\n\n\\-- TerminusCMS API --- Check if the organization exists. it is a Head call . IMPORTANT This does not work with the API-TOKEN.\n\n**Returns**: `Promise` - A promise that returns the call status object, 200: if the organization exists and 404: if the organization does not exist\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to check if exists.\n\n## createOrganizationRemote\n\n##### accessControl.createOrganizationRemote(orgName) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nIMPORTANT This does not work with the API-TOKEN. Create an organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to create\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## getPendingOrgInvites\n\n##### accessControl.getPendingOrgInvites(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nGet the pending invitations list.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst invitationList = accessControl.getPendingOrgInvites().then(result=>{\n   console.log(invitationList)\n\n})\n//this will return an array of invitations object like this\n//[{@id: \"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc2ac51161ef5ba\ncb0988d992c4bce82b3fa5d25\"\n//      @type: \"Invitation\"\n//      creation_date: \"2021-10-22T11:13:28.762Z\"\n//      email_to: \"new_user@terminusdb.com\"\n//      invited_by: \"User/auth0%7C6162f8ab33567406a6bee0c\"\n//      role: \"Role/dataReader\"\n//      status: \"needs_invite\"}]\n```\n\n## sendOrgInvite\n\n##### accessControl.sendOrgInvite(userEmail, role, \\[note\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nSend a new invitation\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserEmail\n\n`string`\n\nThe email of user.\n\nrole\n\n`string`\n\nThe role for user. (the document @id role like Role/collaborator)\n\n\\[note\\]\n\n`string`\n\nThe note to send with the invitation.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.sendOrgInvite(\"new_user@terminusdb.com\",\"Role/admin\",\n\"please join myteam\").then(result=>{\n   console.log(result)\n})\n```\n\n## getOrgInvite\n\n##### accessControl.getOrgInvite(inviteId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --- Get the invitation info\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to retrieve.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc\n2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.getOrgInvite(fullInviteId).then(result=>{\n console.log(result)\n})\n```\n\n## deleteOrgInvite\n\n##### accessControl.deleteOrgInvite(inviteId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nDelete an invitation\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to delete.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.deleteOrgInvite(fullInviteId).then(result=>{\n     console.log(result)\n})\n```\n\n## updateOrgInviteStatus\n\n##### accessControl.updateOrgInviteStatus(inviteId, accepted, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nAccept /Reject invitation. if the invitation has been accepted we add the current user to the organization.\n\nThe only user that can accept this invitation is the user registered with the invitation email, we indentify the user with the JWT token\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to updated.\n\naccepted\n\n`boolean`\n\nThe status of the invitation.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.updateOrgInviteStatus(fullInviteId,true).then(result=>{\n  console.log(result)\n})\n```\n\n## getTeamUserRole\n\n##### accessControl.getTeamUserRole(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API ---\n\nGet the user role for a given organization or the default organization The user is identified by the jwt or the access token\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getTeamUserRole().then(result=>{\n console.log(result)\n})\n\n//response object example\n{\"userRole\":\"Role/admin\"}\n```\n\n## removeUserFromOrg\n\n##### accessControl.removeUserFromOrg(userId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API -- Remove an user from an organization, only an admin user can remove an user from an organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe id of the user to be removed. (this is the document user's @id)\n\n\\[orgName\\]\n\n`string`\n\nThe organization name in which the user is to be removed.\n\n**Example**\n\n```\naccessControl.removeUserFromOrg(\"User/auth0%7C613f5dnndjdjkTTT\",\"my_org_name\").then(result=>{\n console.log(result)\n})\n```\n\n## getDatabaseRolesOfUser\n\n##### accessControl.getDatabaseRolesOfUser(userId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nGet the user's role for every databases under the organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getDatabaseRolesOfUser('User/auth0%7C61790e366377Yu6596a').then(result=>{\n     console.log(result)\n})\n\n//this is a capabilities list of databases and roles\n//[ {capability: \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\n//if there is an id we have a user specific capabality for this database\n   // name: {@type: \"xsd:string\", @value: \"profiles_test\"}\n   // role: \"Role/dataUpdater\"\n   // scope: \"UserDatabase/7ebdfae5a02bc7e8f6d79sjjjsa4e179b1df9d4576a3b1d2e5ff3b4859\"\n   // user: \"User/auth0%7C61790e11a3966d006906596a\"},\n\n//{ capability: null\n// if the capability id is null the user level of access for this database is the\nsame of the team\n  //name: {@type: \"xsd:string\", @value: \"Collab002\"}\n  //role: \"Role/dataReader\"\n  // scope: \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\n  //user: \"User/auth0%7C61790e11a3966d006906596a\"}]\n```\n\n## createUserRole\n\n##### accessControl.createUserRole(userId, scope, role, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nCreate a user's a role for a resource (organization/database)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\nscope\n\n`string`\n\nThe resource name/id.\n\nrole\n\n`string`\n\nThe user role to be assigned.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\naccessControl.assignUserRole('User/auth0%7C61790e11a3966d006906596a',dbId,\n\"Role/collaborator\").then(result=>{\n     console.log(result)\n\n})\n```\n\n## updateUserRole\n\n##### accessControl.updateUserRole(userId, capabilityId, scope, role, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nUpdate user's a role for a resource (organization/database), (this api works only in TerminusCMS)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\ncapabilityId\n\n`string`\n\nThe capability id.\n\nscope\n\n`string`\n\nThe resource name/id.\n\nrole\n\n`string`\n\nThe user role to be updated.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\nconst capId= \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\naccessControl.updateUserRole('User/auth0%7C61790e11a3966d006906596a',capId,dbId,\n\"Role/dataUpdater\").then(result=>{\n     console.log(result)\n\n})\n```\n\n## accessRequestsList\n\n##### accessControl.accessRequestsList(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nGet all the access request list for a specify organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.accessRequestsList().then(result=>{\n console.log(result)\n})\n```\n\n## sendAccessRequest\n\n##### accessControl.sendAccessRequest(\\[email\\], \\[affiliation\\], \\[note\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nGet all the access request list for a specify organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[email\\]\n\n`string`\n\nthe user email.\n\n\\[affiliation\\]\n\n`string`\n\nthe user affiliation, company, university etc..\n\n\\[note\\]\n\n`string`\n\nthe message for the team admin\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.sendAccessRequest(\"myemail@terminusdb.com\",\n \"my_company\",\n \"please add me to your team\"\n).then(result=>{\n console.log(result)\n})\n```\n\n## deleteAccessRequest\n\n##### accessControl.deleteAccessRequest(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusCMS API --\n\nDelete an access request to join your team, only an admin user can delete it\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.deleteAccessRequest(\"djjdshhsuuwewueueuiHYHYYW.......\").then(result=>{\n console.log(result)\n})\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Access Control Reference Guide",
      "description": "A driver to manage access control with the JS Client ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusCMS Data Types"
    },
    "slug": "terminuscms-data-types",
    "body": {
      "@type": "Body",
      "value": "**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:string`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#string)\n\nCharacter strings (but not all Unicode character strings)\n\n`xsd:boolean`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#boolean)\n\ntrue, false\n\n`xsd:decimal`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#decimal)\n\nEquivalent to `xsd:double`\n\n`xsd:integer`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#integer)\n\nArbitrary-size integer numbers\n\n## IEEE floating-point numbers\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:double`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#double)\n\n64-bit floating point numbers incl. ∓Inf, ∓0, NaN\n\n`xsd:float`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#float)\n\n32-bit floating point numbers incl. ∓Inf, ∓0, NaN\n\n## Time and date\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:date`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#date)\n\nDates (yyyy-mm-dd) with or without timezone\n\n`xsd:time`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#time)\n\nTimes (`hh:mm:ss.sss`) with or without timezone\n\n`xsd:dateTime`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#dateTime)\n\nDate and time with or without timezone\n\n`xsd:dateTimeStamp`\n\n\\-\n\nDate and time with required timezone\n\n## Recurring and partial dates\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:gYear`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#gYear)\n\nGregorian calendar year\n\n`xsd:gMonth`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#gMonth)\n\nGregorian calendar month\n\n`xsd:gDay`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#gDay)\n\nGregorian calendar day of the month\n\n`xsd:gYearMonth`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#gYearMonth)\n\nGregorian calendar year and month\n\n`xsd:gMonthDay`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#gMonthDay)\n\nGregorian calendar month and day\n\n`xsd:duration`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#duration)\n\nDuration of time\n\n`xsd:yearMonthDuration`\n\n\\-\n\nDuration of time (months and years only)\n\n`xsd:dayTimeDuration`\n\n\\-\n\nDuration of time (days, hours, minutes, seconds only)\n\n## Limited-range integer numbers\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:byte`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#byte)\n\n\\-128…+127 (8 bit)\n\n`xsd:short`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#short)\n\n\\-32768…+32767 (16 bit)\n\n`xsd:int`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#int)\n\n\\-2147483648…+2147483647 (32 bit)\n\n`xsd:long`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#long)\n\n\\-9223372036854775808…+9223372036854775807 (64 bit)\n\n`xsd:unsignedByte`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#unsignedByte)\n\n0…255 (8 bit)\n\n`xsd:unsignedShort`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#unsignedShort)\n\n0…65535 (16 bit)\n\n`xsd:unsignedInt`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#unsignedInt)\n\n0…4294967295 (32 bit)\n\n`xsd:unsignedLong`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#unsignedLong)\n\n0…18446744073709551615 (64 bit)\n\n`xsd:positiveInteger`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#positiveInteger)\n\nInteger numbers >0\n\n`xsd:nonNegativeInteger`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#nonNegativeInteger)\n\nInteger numbers ≥0\n\n`xsd:negativeInteger`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#negativeInteger)\n\nInteger numbers <0\n\n`xsd:nonPositiveInteger`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#nonPositiveInteger)\n\nInteger numbers ≤0\n\n## Encoded binary data\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:hexBinary`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#hexBinary)\n\nHex-encoded binary data\n\n`xsd:base64Binary`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#base64Binary)\n\nBase64-encoded binary data\n\n## Miscellaneous XSD types\n\n**Type**\n\n**W3C spec**\n\n**Description**\n\n`xsd:anyURI`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#anyURI)\n\nAbsolute or relative URIs and IRIs\n\n`xsd:language`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#language)\n\nLanguage tags per [BCP47](https://en.wikipedia.org/wiki/IETF_language_tag)\n\n`xsd:normalizedString`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#normalizedString)\n\nWhitespace-normalized strings\n\n`xsd:token`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#token)\n\nTokenized strings\n\n`xsd:NMTOKEN`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#NMTOKEN)\n\nXML NMTOKENs\n\n`xsd:Name`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#Name)\n\nXML Names\n\n`xsd:NCName`\n\n[W3C](https://www.w3.org/TR/xmlschema-2/#NCName)\n\nXML NCNames"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS and TerminusDB Data Types",
      "description": "The core data types for TerminusDB and TerminusCMS.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Document Insertion Reference Guide"
    },
    "slug": "document-insertion",
    "body": {
      "@type": "Body",
      "value": "The document interface consists of two endpoints. The first endpoint, `document`, is how we get documents into and out of TerminusDB. Since schemas consist of documents too, this is also how you'd update the schema.\n\nThe second endpoint, `schema`, is how we can easily get schema information out of TerminusDB. While technically it is possible to get all schema information through the document interface, the schema interface is more convenient for this purpose, as it takes class inheritance into account to give a complete image of all the properties that are usable on a certain class.\n\n## The document endpoint\n\n### Getting documents\n\nAll document retrieval is done through GET requests on the following endpoint:\n\n```\nGET /api/document/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `_system` for the system graph, or `admin/foo/_meta` for the metadata graph of the foo database, etc.\n\nBy default, this will return a stream of all documents to be found at this location. What exactly is returned can be modified using parameters, which are to be provided as query parameters.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\ngraph\\_type\n\neither instance or schema. Used to switch between getting documents from the instance or the schema graph.\n\ntype\n\nIf given, only documents of the given type are returned.\n\nid\n\nIf given, only the document with the given ID is returned.\n\nprefixed\n\ntrue\n\nIf true (the default), return IRIs using a prefixed notation wherever possible. If false, full IRIs are used.\n\nminimized\n\nfalse\n\nIf true, forego pretty printing, and return the documents with very little whitespace. Each json document will be on its own line.\n\nunfold\n\ntrue\n\nIf true (the default), any subdocuments contained in the returned document are returned too. If false, these are referred to by their ID instead.\n\nskip\n\n0\n\nHow many results to skip\n\ncount\n\nHow many results to return. If this option is absent, all results are returned.\n\nas\\_list\n\nfalse\n\nIf true, don't return a stream of json objects, but a list. This makes parsing the json easier in some environments.\n\n#### Alternate query mechanism\n\nThe above table shows parameters that are supposed to be provided as query parameters. There's however another mechanism, where instead, the parameters are passed in as a posted JSON document. In this calling style, an additional parameter is allowed, `\"query\"`, by which the returned documents are filtered by matching against some template.\n\nThe alternative method uses a POST rather than a get, specifies the header `X-HTTP-Method-Override: GET`, and posts a JSON document with the various query parameters instead:\n\n```\n{\n    \"@rdf:type\": \"Person\",\n    \"count\": 10,\n    \"query\": { \"age\": 42 },\n}\n```\n\nThe above example would find the first 10 documents of class `Person`, whose age is 42.\n\nThis may provide a more convenient style for querying from a library, especially when a (large) query document has to be provided for filtering purposes. However, unlike a pure GET request with query parameters, a POST with a method override does not result in a page that can be bookmarked in a browser. If that is desirable, the GET style is better.\n\n### Posting documents\n\nAll new document submission is done through POST requests on the following endpoint:\n\n```\nPOST /api/document/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `_system` for the system graph, or `admin/foo/_meta` for the metadata graph of the foo database, etc.\n\nThe documents to be submitted are given as post data. Multiple documents can be specified at once, either as a stream of JSON objects or as a JSON list containing the documents to be inserted. If a document is specified that already exists, and overwrite is false (the default), an error is returned.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\nauthor\n\nThe commit author\n\nmessage\n\nThe commit message\n\ngraph\\_type\n\ninstance\n\neither instance or schema. Used to switch between submitting to the instance or the schema graph.\n\nfull\\_replace\n\nfalse\n\nIf true, all existing documents are deleted before inserting the posted documents. This allows the full replacement of the contents of a database. This is especially useful for replacing the schema.\n\nraw\\_json\n\nfalse\n\nIf true, the input documents are treated as raw JSON , inserted as type `sys:JSONDocument` and are not subject to schema restrictions.\n\n#### Result\n\nAfter a successful post, the result will be a list of ids of the newly added documents.\n\n### Replacing documents\n\nExisting documents can be replaced through a PUT request on the following endpoint:\n\n```\nPUT /api/document/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `_system` for the system graph, or `admin/foo/_meta` for the metadata graph of the foo database, etc.\n\nThe documents to be submitted are given as post data. Multiple documents can be specified at once, either as a stream of JSON objects or as a JSON list containing the documents to be replaced. If a document is specified that does not exist in the database, an error is returned unless `create` is set to `true` in which case it is inserted.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\nauthor\n\nThe commit author\n\nmessage\n\nThe commit message\n\ngraph\\_type\n\ninstance\n\neither instance or schema. Used to switch between submitting to the instance or the schema graph.\n\ncreate\n\nfalse\n\ninsert if the document was not already in the database.\n\nraw\\_json\n\nfalse\n\nIf true, the replaced documents are treated as raw JSON , they must be replacing a document of type `sys:JSONDocument` and they are not subject to schema restrictions.\n\n### Deleting documents\n\nExisting documents can be deleted through a DELETE request on the following endpoint:\n\n```\nDELETE /api/document/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `_system` for the system graph, or `admin/foo/_meta` for the metadata graph of the foo database, etc.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\nauthor\n\nThe commit author\n\nmessage\n\nThe commit message\n\ngraph\\_type\n\ninstance\n\neither instance or schema. Used to switch between submitting to the instance or the schema graph.\n\nid\n\nIf given, the document to delete. If not given, it is expected that the post data will contain a list of ids to delete.\n\nnuke\n\nfalse\n\nIf true, delete everything at this resource location (dangerous!).\n\n#### Specifying what documents to delete\n\nAs shown above, deleting a single document can be done through query parameters alone. If multiple documents are to be deleted at once, a document has to be posted of the following format:\n\n```\n[ \"..id 1..\",\n  \"..id 2..\",\n  ...\n]\n```\n\nIn other words, a JSON list of document IDs.\n\n### ID Capture for Doc Insert & Replace\n\nWhen inserting or replacing several documents at once, it may occur that some of these documents need to refer to each other. However, at insertion time, you may not know what the IDs of the new documents are going to be. This is especially the case for document types that generate their identifier randomly, but even for non-random key types, it may be convenient to rely on the server's ID generation algorithm, rather than trying to predict what IDs will get generated. Therefore, in order to support cross-references between newly inserted documents, the document interface allows you to capture newly generated document IDs in a variable, and then refer to that variable later in other documents.\n\n#### Capturing an identifier into a variable\n\nWhen inserting or replacing a document that we want to refer to in another document inserted in the same operation, you can use a `@capture` key in the document to associate the newly generated identifier with a variable. For example,\n\n```\n{ \"@type\": \"Person\",\n  \"@capture\": \"Id_Tom\",\n  \"name\": \"Tom\"\n}\n```\n\nThis will store the newly generated ID in a variable called `ID_Tom` for the duration of the document insert/replace operation.\n\nIt is allowed to capture an ID and then never actually refer to it.\n\nIt is an error to capture the same variable twice. Doing so will result in a `api:CaptureIdAlreadyBound` error with the following shape:\n\n```\n{\"@type\": \"api:CaptureIdAlreadyBound\",\n \"api:capture\": \"..capture id..\",\n \"api:document\": {..document where previously captured variable was captured again..}\n```\n\n#### Referring to an identifier using a variable\n\nWhen inserting or replacing a document that needs to refer to another document inserted in the same operation, you can use a json dictionary of the form `{\"@ref\": \"..id..\"}` in place of an ordinary id. For example,\n\n```\n{ \"@type\": \"Person\",\n  \"name\": \"Jerry\",\n  \"rival\": {\"@ref\": \"Id_Tom\"}\n}\n```\n\nIt is an error to refer to a variable that is never captured. Doing so will result in a `api:NotAllCapturesFound` error of the following shape:\n\n```\n{ \"@type\": \"api:NotAllCapturesFound\",\n  \"api:captures\": [..list of capture ids that were referenced but not found..]\n}\n```\n\n#### Ordering of documents\n\nID captures and ID references can be done in any order. That means that when you are submitting several documents, you're allowed to refer to a captured ID in an earlier document. This also allows you to do cross-references, where two documents refer to each other:\n\n```\n{ \"@type\": \"Person\",\n  \"@capture\": \"Id_Tom\",\n  \"name\": \"Tom\",\n  \"rival\": {\"@ref\": \"Id_Jerry\"}\n}\n{ \"@type\": \"Person\",\n  \"@capture\": \"Id_Jerry\",\n  \"name\": \"Jerry\",\n  \"rival\": {\"@ref\": \"Id_Tom\"}\n}\n```\n\nIn this example, Tom refers to Jerry, even though at that point in the submitted document stream, Jerry has not yet been processed. This is not a problem - both Tom and Jerry will get inserted referring to each other.\n\n#### Self-reference\n\nUsing ID capture, it is possible to create a document that refers to itself:\n\n```\n{ \"@type\": \"Person\",\n  \"@capture\": \"Captured_Id\",\n  \"name\": \"Elmo\",\n  \"friend\": {\"@ref\": \"Captured_Id\"}\n}\n```\n\nThis will make Elmo be his own friend.\n\n#### ID capture only works within a single operation\n\nIt is important to keep in mind that the ID capture mechanism only works within a single call to the document api. It is not possible to capture an ID in one operation, and then refer to it in a second operation. The `@capture` and `@ref` instructions do not get saved into the database. They are processed immediately and are then forgotten.\n\nIf you need to refer to a document already in the database, the only way to do so is by referring to its ID.\n\n## The schema endpoint\n\nThe schema endpoint can be used to query information about classes in a resource. These queries happen through a GET on the following endpoint:\n\n```\nGET /api/schema/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `_system` for the system graph, or `admin/foo/_meta` for the metadata graph of the foo database, etc.\n\nThe purpose of this endpoint is to quickly discover the supported fields of a particular type. The primary envisioned use case for this is the automatic generation of forms and other UI elements, as well as client code generation.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\ntype\n\nIf given, the type to get information for. If omitted, information for all types is returned.\n\n#### Result\n\nThe result of this GET is a stream of documents describing all the types in a particular resource.\n\n### Schema-checking and schemaless mode\n\nThe schema endpoint can also be used to switch between schema checking and schemaless mode.\n\nSwitching between checking or not checking does not delete the schema itself. After disabling schema checking it is still possible to update the schema or to query it through the schema endpoint. However, when disabled, it is possible to submit documents that do not match the schema. Re-enabling schema checking is only possible if all the documents in the given resource match the current schema.\n\n```\nPOST /api/schema/<resource path>\n```\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\nauthor\n\nThe commit author\n\nmessage\n\nThe commit message\n\nschema\\_checking\n\nValue should be either enabled or disabled\n\n## The apply endpoint\n\nThe schema endpoint can be used to query information about classes in a resource. These queries happen through a GET on the following endpoint:\n\n```\nPOST /api/schema/<resource path>\n```\n\nWhere resource path is the usual strings like `admin/foo` for database foo, or `admin/foo/local/branch/dev` for the `dev` branch of `admin/foo`.\n\nThe purpose of this endpoint is to take the difference between any two commits and apply them to a branch.\n\n#### Parameters\n\nparameter\n\ndefault\n\nexplanation\n\nbefore\\_commit\n\nThe first commit to compare in order to produce a diff\n\nafter\\_commit\n\nThe last commit to compare in order to produce a diff\n\ncommit\\_info\n\nA JSON document with author and message\n\nmatch\\_final\\_state\n\ntrue\n\nIgnores conflicts if the final state would remain the same\n\ntype\n\nsquash\n\nWhat type of application to perform - currently can only be squash\n\n#### Result\n\nThe result of this POST request is either an updated branch with a successful application of the difference between two commits, or an error giving the reason for an unresolvable conflict.\n\n## Further Reading\n\n**\\*_[](/docs/documents-explanation/)_**_[Documents in a knowledge graph and how to use them](/docs/documents-explanation/)_[\\*](/docs/documents-explanation/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS/DB Document Insertion Reference Guide",
      "description": "A reference guide for the TerminusCMS/DB document interface."
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusCMS Dashboard Reference Guide"
    },
    "slug": "terminuscms-dashboard-reference",
    "body": {
      "@type": "Body",
      "value": "## Overview\n\nThe TerminusCMS dashboard is a place to -\n\n*   Manage your teams and collaborators\n*   Manage your data products/projects\n*   Model schema or edit in code\n*   Manual data and content curation\n*   Test and build queries\n*   Collaborate on other user's TerminusCMS projects\n*   Manage, review, and accept or reject change requests.\n\nFor details about how to achieve any of the list above, please take a look at the [product tour](/docs/product-tour/).\n\nTerminusCMS is structured in such a way -\n\n![How teams, users and projects are structured.](https://assets.terminusdb.com/docs/teams-users-and-projects2.png)\n\nWhen you sign up for TerminusCMS is automatically generates a team for you based on your login credentials. You can create other teams too. You will be an admin user for any of your teams.\n\nYou can then invite collaborators to your team. The permissions you grant them for the team will be applied to all projects within that team.\n\nProjects/data products created within that team will be available to you and any collaborators invited.\n\nYou can have several teams with different projects and collaborators.\n\n## Managing Teams & Collaborators\n\n### Teams\n\nTeams are a way to group your projects and team members. For example you may have different teams in your organization looking after different functions, so you could have teams for Personnel, Marketing, Finance, and Operations for example. These teams would include the relevant people and projects.\n\n[Learn how to create a team here](/docs/create-a-team-with-terminuscms/).\n\n### Collaborators/Users\n\nCollaborators are invited by the team admin to work with the projects within that team. Invites are sent via email. The email contains a link that takes that user to the dashboard sign up page. Upon signing up or logging in, the user can accept or reject the invitation. Once accepted that user will be able to work with the project in the team with the permissions granted by the admin.\n\n### Permissions\n\nThere are [five permission levels](/docs/invite-users-using-terminuscms/) for users ranging from admin down to info reader. The team permissions for a user are inherited by the projects within that team.\n\nIndividual project permissions can be granted in the team management section. Project-specific permissions can only be higher than team permissions. For example, if you want a user to be a collaborator for one project, set their team privilege to a lower permission level such as info-reader or data-reader.\n\n## Managing Projects/Data Products\n\nWhen you select a team you can create new projects or manage existing ones by selecting a project from the list on the left. Once a project is created or selected you will be directed to the project/data product management screen. Here you can clone, branch, reset and squash main or any branches, and delete the project.\n\n## Model Schema\n\nThe second icon with three circles on the left takes you to the screen to model and build the project schemas. The screen has two tabs, one for building the schema with a UI, the other for constructing it in JSON.\n\nFor more informaiton about schema modeling, visit the [how-to model schema guide](/docs/model-schema/).\n\n## Manual Data Entry & Content Curation\n\nThe third icon, the document with a tick, takes you to the document curation section. On the left and in the main section of the screen it will list all of the documents within the project schema. Here you can click through to view, sort, and filter existing documents. Or add, edit, and delete documents.\n\nTerminusCMS automatically constructs document frames from the schema. These frames are rendered as forms in the dashboard and all users to add and edit data and content directly into the backend.\n\nTerminusCMS comes with change requests workflows for data and content curation.\n\n### TerminusCMS Change Request Workflows\n\nChange request workflows in TerminusCMS are an automated process. When a user tries to edit, delete, or add a document they are prompted to create a change request by giving it a name and description. The change request creates a new branch of the data where the user can make changes away from main. They can exit the change request and pick it up later, or submit it for review. A review can accept and merge the change request, or reject and delete it.\n\nTo ensure that other changes don't get stamped the change request workflows check the database to see if it has changed since the branch was created, and if so, update the change request with the latest changes prior to it being reviewed and merged.\n\n## Query Playgrounds\n\nThe TerminusCMS dashboards come with WOQL and GraphQL query playgrounds.\n\n### WOQL Query Playground\n\nWOQL is a Datalog query language. More information about WOQL can be found in the [WOQL how-to guide](/docs/woql-basics/). The query language is based on two rules, tripples and unification. This blog post explains [WOQL's methodology](https://terminusdb.com/blog/the-power-of-web-object-query-language/).\n\nThe playground features query panels to write your schema. You can have several panels open to tweak your query. To aid you in building your query, listed on the left are the documents within the schema, you can select one which expands to show the properties of each document. Clicking on one will add create a new query panel with a WOQL query for that document property.\n\n### GraphQL Query Playground\n\nGraphQL is typically an API language, but TerminusCMS has incorporated some of WOQLs features to allow you to perform graph queries using GraphQL. The playground features a query input area and a results panel. The playground is tab based and you can have many tabs open to experiment and tweak queries.\n\nTerminusCMS automatically generates the GraphQL schema from the project's schema. This enables features such as autofill and a dropdown of classes and properties.\n\nFor more information about querying with GraphQL, visit the [GraphQL Query how-to guide](/docs/graphql-basics/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Dashboard Reference Guide",
      "description": "A conceptual overview of the TerminusCMS dashboard describing its features and their purpose.",
      "og_image": "https://assets.terminusdb.com/docs/document-explorer-home.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "How teams, users and projects are structured.",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "How teams, users and projects are structured."
        },
        "value": "https://assets.terminusdb.com/docs/teams-users-and-projects2.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "JSON Diff and Patch with TerminusDB and TerminusCMS"
    },
    "slug": "json-diff-and-patch",
    "body": {
      "@type": "Body",
      "value": "JSON objects are a common way of representing data for software development. The serialization of JSON is simple and facilitates communication via networks and storage in databases. Almost all modern programming languages support JSON objects natively.\n\nWhen objects are modified in distributed systems, it is useful to compare versions of an object to see what has changed. This is where **diff** and **patch** come in.\n\n#### Diff\n\nA **diff** takes two JSON objects and presents any differences between them. Diff has several uses. A key use is displaying a clear summary of differences between large objects, enhancing the visibility of changes. This enables manual, user-interface assisted, or client actions to resolve differences. Actions include:\n\n*   Retain the original object.\n*   Change to the new (or latest) version of the object.\n*   Create a new version of the object.\n\n#### Patch\n\nA **patch** applies a diff to two objects to obtain a new object with any differences highlighted. A patch is applied individually or in bulk to a patch endpoint that will apply the patch to the specified data product.\n\n## Public Endpoint\n\nUse our public endpoints for each operation:\n\n**JSON Diff**\n\n```\nhttps://cloud.terminusdb.com/jsondiff\n```\n\n**JSON Patch**\n\n```\nhttps://cloud.terminusdb.com/jsonpatch\n```\n\nSee [Diff and Patch Endpoints](#diffandpatchendpoints) for more information, and examples of [diff](#diffexamplesusingcurl) and [patch](#patchexamplesusingcurl) using curl.\n\n## Diff & Patch with Client\n\nUse JSON Diff and Patch with a TerminusDB JavaScript or Python client to find and handle changes in TerminusDB schemas and documents, JSON schemas, and other document databases such as MongoDB.\n\n### Requirements\n\nInstall a [JavaScript](/docs/install-terminusdb-js-client/) or [Python](/docs/install-the-python-client/) TerminusDB client.\n\n### Get started\n\nGet started with the simple steps below.\n\n> If using **TerminusCMS with Python**, connect to your TerminusCMS cloud instance first - see [Connect with the Python Client](/docs/connect-with-python-client/) for instructions if required.\n\n1.  [Create an endpoint](#createanendpoint)\n    \n2.  [Apply a diff to obtain a patch](#applyadifftoobtainapatch)\n    \n3.  [Review the patch](#reviewthepatch)\n    \n4.  [Apply the patch](#applythepatch)\n    \n\n### Create an endpoint\n\nCreate a client endpoint with `WOQLClient`.\n\n#### Create an endpoint with the JavaScript Client\n\n```javascript\nconst TerminusClient = require(\"@terminusdb/terminusdb-client\");\n\nvar client = new TerminusClient.WOQLClient(\"http://127.0.0.1:6363\")\n```\n\n#### Create an endpoint with the Python Client\n\n```python\nfrom terminusdb_client import WOQLClient\n\nclient = WOQLClient(\"http://localhost:6363/\")\n```\n\n### Apply a diff to obtain a patch\n\nGet the difference/s between two hypothetical documents - `Doc1` and `Doc2`.\n\n#### Apply Diff - JS\n\nUse `getDiff`\n\n```javascript\nlet result_patch = await client.getDiff(Doc1, Doc2)\n```\n\n#### Apply Diff - Python\n\nUse`diff`\n\n```\nresult_patch = client.diff(Doc1, Doc2)\n```\n\n### Review the patch\n\nPrint the contents of a patch.\n\n#### Review - JS\n\n```\nconsole.log(result_patch)\n```\n\n#### Review - Python\n\nExample uses`pprint` (`from pprint import pprint`)\n\n```\npprint(result_patch.content)\n```\n\n### Apply the patch\n\nApply the patch to `Doc1`.\n\n#### Apply - JS\n\n```javascript\nlet after_patch = await client.patch(Doc1, result_patch);\n```\n\n#### Apply - Python\n\n```\nafter_patch = client.patch(Doc1, result_patch)\n```\n\n## JSON Diff and Patch Operations\n\nThe available JSON Diff and Patch operations with some examples using `curl`.\n\nDiff can take the paramters `keep` which specifies a document describing which fields _must_ be copied in the final object, and a `copy_value` boolean flag, which specifies whether to specify the exact value in a copy operation.\n\n### Copy Diff\n\nCopy is implicit. All properties which are not specifically mentioned will be considered part of an implicit copy. This will make patches more compressed and easier to specify by hand.\n\n### Mandatory Diff\n\n`@before`/`@after` instructions contain objects specified as tightly as required to obtain ids, or as ids.\n\n```\n{ '@id' : \"Person/jim\",\n  'date_of_birth' : { '@op' : 'SwapValue',\n                      '@before' : \"1928-03-05\",\n                      '@after' : \"1938-03-05\"\n                    }}\n```\n\n### Optional Diff\n\nOptional diffs also contain `@before`/`@after` designations, but potentially `null` fields to describe missing elements.\n\n```\n{ '@id' : \"Object/my_object\",\n  'name' : { '@op' : 'SwapValue',\n             '@before' : null,\n             '@after' : \"Jim\" }}\n```\n\n### Set Diff / Cardinality Diff\n\nSet requires the ability to explicitly remove or add elements - we can do this by maintaining a `@before`/`@after` with a list of those which exist _only_ on the left, and _only_ on the right.\n\n### List Diff\n\nThe list diff requires swaps at a position. We use, `@copy`, `@swap` and `@keep`.\n\n#### Copy List\n\nCopy the previous list from `From_Position` to `To_Position`.\n\n```\n{ \"@op\" : \"CopyList\",\n  \"@to\" : To_Position,\n  \"@rest\" : Diff }\n```\n\n#### Swap List\n\nSwap out the list starting from the current point from `Previous` to `Next`. This can be used to extend, or drop elements as well as do full replacement.\n\n```\n{ \"@op\" : \"SwapList\",\n  \"@before\" : Previous,\n  \"@after\" : Next,\n  \"@rest\" : Diff }\n```\n\n#### Patch List\n\nPatch the list starting from the current point with the patch list in `\"@patch\"`. The patch must be less than or equal to the length of the list.\n\n```\n{ \"@op\" : \"PatchList\",\n  \"@patch\" : Patch,\n  \"@rest\" : Diff }\n```\n\n#### Example:\n\n```\nvar Patch =\n{ '@id' : \"TaskList/my_tasks\",\n  'tasks' : { '@op' : \"CopyList\",                      % Replace List\n              '@to' : 2,\n              '@rest' : { '@op' : \"PatchList\",\n                          '@patch' : [{ '@op' : \"SwapValue\",\n                                        '@before' : \"Task/shopping\",\n                                        '@after' : \"Task/climbing\"},\n                                      { '@op' : \"SwapValue\",\n                                        '@before' : \"Task/cleaning\",\n                                        '@after' : \"Task/dining\"},\n                                      { '@op' : \"SwapValue\",\n                                        '@before' : \"Task/fishing\",\n                                        '@after' : \"Task/travelling\"}],\n                          '@rest' : { '@op' : \"KeepList\" } } }}\nvar Before =\n{ '@id' : \"TaskList/my_tasks\",\n  'tasks' : [\"Task/driving\", \"Task/reading\", \"Task/shopping\",\n             \"Task/cleaning\",\"Task/fishing\", \"Task/arguing\"] }\nvar After =\n{ '@id' : \"TaskList/my_tasks\",\n  'tasks' : [\"Task/driving\", \"Task/reading\", \"Task/climbing\",\n             \"Task/dining\", \"Task/travelling\", \"Task/arguing\"] }\n```\n\n### Array Diff\n\nArrays will allow index swapping or \"shrink\" and \"grow\".\n\n### Force Diff\n\nA \"Force Diff\" will set the value of a location regardless of the current read-state. This is a potentially unsafe operation as there is no guarantee we are seeing the object state version we think we are.\n\n```\n{ '@id' : \"Employee/012\" ,\n  'name' : { '@op' : 'ForceValue',\n             '@after' : \"Jake\" }}\n```\n\n### Table Diff\n\nA Table diff specifies the differences and similarities between the two tables. These tables _need not_ have the same dimensions. In order to describe these differences, we use a `ModifyTable` patch. The `ModifyTable` patch is comprised of `copies`, `deletes`, `inserts` and `moves`.\n\n`copies` give the sections of the table which can be copied verbatim. `deletes` gives all segments which are to be removed from the original. `inserts` gives all segments which are to be inserted into the new table.\n\n`moves` specifies segments that are the same in both tables, but have moved location. This is particularly useful as moving rows and columns is a typical operation in a table (such as a CSV or Excel document).\n\n#### Example Table\n\nGiven the following table:\n\n```\n[['Job Title','Company','Location','Company Size','Company Industry'],\n ['Sr. Mgt.','Boeing','USA','Large','Aerospace'],\n ['Data Architect','Airbus','France','Large','Aerospace'],\n ['Founder','Ellie Tech','Sweden','Startup','AI'],\n ['Platform Engineer','Adidas','Germany','Large','Apparel']]\n```\n\nAnd a sorted version of the same (sorting on the first column):\n\n```\n[['Job Title','Company','Location','Company Size','Company Industry'],\n ['Data Architect','Airbus','France','Large','Aerospace'],\n ['Founder','Ellie Tech','Sweden','Startup','AI'],\n ['Platform Engineer','Adidas','Germany','Large','Apparel'],\n ['Sr. Mgt.','Boeing','USA','Large','Aerospace']]\n```\n\nWe have the following patch resulting from the diff:\n\n```\n{'@op':\"ModifyTable\",\n dimensions:{'@after':[5,5],'@before':[5,5]},\n deletes:[],\n inserts:[],\n copies:[{'@at':{'@height':1,'@width':5,'@x':0,'@y':0},'@value':[['Job Title','Company','Location','Company Size','Company Industry']]}],\n moves:[{'@from':{'@height':1,'@width':5,'@x':0,'@y':1},\n         '@to':{'@height':1,'@width':5,'@x':0,'@y':4},\n         '@value':[['Sr. Mgt.','Boeing','USA','Large','Aerospace']]},\n        {'@from':{'@height':1,'@width':5,'@x':0,'@y':2},\n         '@to':{'@height':1,'@width':5,'@x':0,'@y':1},\n         '@value':[['Data Architect','Airbus','France','Large','Aerospace']]},\n        {'@from':{'@height':1,'@width':5,'@x':0,'@y':3},\n         '@to':{'@height':1,'@width':5,'@x':0,'@y':2},\n         '@value':[['Founder','Ellie Tech','Sweden','Startup','AI']]},\n        {'@from':{'@height':1,'@width':5,'@x':0,'@y':4},\n         '@to':{'@height':1,'@width':5,'@x':0,'@y':3},\n         '@value':[['Platform Engineer','Adidas','Germany','Large','Apparel']]}]}\n```\n\n## Diff and Patch Endpoints\n\nThe Patch and Diff endpoints expose endpoints to obtain diffs or patches of data. Use our public endpoint for each operation:\n\n**JSON Diff**\n\n```\nhttps://cloud.terminusdb.com/jsondiff\n```\n\n**JSON Patch**\n\n```\nhttps://cloud.terminusdb.com/jsonpatch\n```\n\n### Diff\n\nThe diff endpoint takes a POST of two JSON documents, _before_, and _after_. This endpoint then returns a 200 and a patch which takes _before_ to _after_ if applied using the patch interface.\n\nThe payload is structured as a JSON document with one of the following forms:\n\n*   With `\"before\"` and `\"after\"`, pointing to the documents you would like to diff.\n*   With `\"before_data_version\"`, `\"after\"` and `\"document_id\"`, specifying the data version or commit ID with which to compare the given _after_ document.\n*   With `\"before_data_version\"`, `\"after_data_version\"` and `\"document_id\"` specifying the data version or commit ID with which to compare the document given by `\"document_id\"`\n*   With `\"before_data_version\"`, `\"after_data_version\"`, meaning that we would like to get a diff for _all_ documents between the two specified data versions.\n\nThere are also two options:\n\n*   `keep`: A dictionary which has keys which need to be copied\n*   `copy_value`: Which specifies that we should make _explicit_ which values existed during a list copy.\n\nAn example of the payload:\n\n```\n{ \"before\" : { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"},\n  \"after\" :  { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"}}\n```\n\nWhich would result in the following patch:\n\n```\n{ \"name\" : { \"@op\" : \"SwapValue\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}\n```\n\nAn example of a payload comparing commits or dataversions:\n\n```\n{ \"before_data_version\" : \"branch:s7dde27gyj8ezat3itw5nr3peu1lymh\"\n  \"document_id\" : \"terminusdb:///data/test/665df8a9c3a58be6db622be4b37a76bea46c3e5e3cd2db923e708e574d1566be\",\n  \"after\" :  { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"}}\n```\n\nAn example of a payload comparing only dataversions:\n\n```\n{ \"before_data_version\" : \"branch:s7dde27gyj8ezat3itw5nr3peu1lymh\"\n  \"after_data_version\" : \"branch:jb81rgx9lzow35r3pkrsvdf5l75kaq\"\n  \"document_id\" : \"terminusdb:///data/test/665df8a9c3a58be6db622be4b37a76bea46c3e5e3cd2db923e708e574d1566be\"}\n```\n\n#### Diff examples using curl\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsondiff' -d \\\n  '{ \"before\" : { \"asdf\" : \"foo\", \"fdsa\" : \"bar\"}, \"after\" : { \"asdf\" : \"bar\", \"fdsa\" : \"bar\"}, \"keep\" : { \"fdsa\" : true}}'\n# Output: {\n  \"asdf\": {\"@after\":\"bar\", \"@before\":\"foo\", \"@op\":\"SwapValue\"},\n  \"fdsa\":\"bar\"\n}\n```\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsondiff' -d \\\n  '{ \"before\" : [{ \"asdf\" : \"foo\"}], \"after\" : [{ \"asdf\" : \"bar\"}]}'\n# Output: [ {\"asdf\": {\"@after\":\"bar\", \"@before\":\"foo\", \"@op\":\"SwapValue\"}} ]\n```\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsondiff' -d \\\n  '{ \"before\" : [0,1,2], \"after\" : [0,1,2,3]}'\n\n# Output:\n{\n  \"@op\":\"CopyList\",\n  \"@rest\": {\n    \"@after\": [3 ],\n    \"@before\": [],\n    \"@op\":\"SwapList\",\n    \"@rest\": {\"@op\":\"KeepList\"}\n  },\n  \"@to\":3\n}\n```\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsondiff' -d \\\n  '{ \"before\" : [0,1,2], \"after\" : [0,1,2,3], \"copy_value\" : true}'\n\n# Output:\n{\n  \"@op\":\"CopyList\",\n  \"@rest\": {\n    \"@after\": [3 ],\n    \"@before\": [],\n    \"@op\":\"SwapList\",\n    \"@rest\": {\"@op\":\"KeepList\", \"@value\": []}\n  },\n  \"@to\":3,\n  \"@value\": [0, 1, 2 ]\n}\n```\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsondiff' -d \\\n  '{ \"before\" : { \"asdf\" : { \"fdsa\" : \"quux\"}}, \"after\" : { \"asdf\" : { \"fdsa\" : \"quuz\" }}}'\n\n# Output:\n{\n  \"asdf\": {\"fdsa\": {\"@after\":\"quuz\", \"@before\":\"quux\", \"@op\":\"SwapValue\"}}\n}\n```\n\n### Patch\n\nPatch takes a POST with a _before_ document and a _patch_ and produces an _after_ document.\n\n```\n{ \"before\" : { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"}\n  \"patch\" : {\"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}}\n```\n\nResulting in the following document:\n\n```\n{ \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"}\n```\n\n#### Patch examples using curl\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsonpatch' -d \\\n   '{ \"before\" : { \"alpha\" : 1, \"asdf\" : { \"fdsa\" : \"quux\"}}, \"patch\" : {\n      \"asdf\": {\"fdsa\": {\"@after\":\"quuz\", \"@before\":\"quux\", \"@op\":\"SwapValue\"}}\n}}'\n# Output: {\"alpha\":1, \"asdf\": {\"fdsa\":\"quuz\"}}\n```\n\n```\n$ curl -X POST -H \"Content-Type: application/json\" 'https://cloud.terminusdb.com/jsonpatch' -d '\n{ \"before\" : [0,1,2], \"patch\" : {\n  \"@op\":\"CopyList\",\n  \"@rest\": {\n    \"@after\": [3 ],\n    \"@before\": [],\n    \"@op\":\"SwapList\",\n    \"@rest\": {\"@op\":\"KeepList\"}\n  },\n  \"@to\":3\n}}'\n#Output: [0, 1, 2, 3 ]\n```\n\n## Further Reading\n\nJavaScript client [diff](/docs/javascript/#getjsondiffbeforeafteroptions) and [patch](/docs/javascript/#patchbeforepatch).\n\nPython client [diff](/docs/python/#diff) and [patch](/docs/python/#patchbeforepatch)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "JSON Diff and Patch with TerminusCMS and TerminusDB",
      "description": "JSON Diff and Patch reference guide to compare JSON documents.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusCMS Path Query Reference Guide"
    },
    "slug": "path-query-reference-guide",
    "body": {
      "@type": "Body",
      "value": "TerminusDB & TerminusCMS allows _path regular expressions_ as a way to describe multi-hop searches in a concise fashion. When you need to follow a link repeatedly for shortest path queries or to find all linked documents meeting some specification you can often use a _path query_.\n\n> For guidance on back-links and path queries using GraphQL visit the [GraphQL reference guide](/docs/graphql-query-reference/#backlinks)\n\nThe syntax of path expressions, for expressions `A`, `B` and fields `F` is as follows:\n\nExpression\n\nExample\n\nName\n\nDescription\n\n`A,B`\n\n`friend,name`\n\nSequence\n\nFirst follow expression `A`, then from that node expression `B`\n\n`A|B`\n\n`friend|foe`\n\nChoice\n\nFollow expression `A` or expression `B`\n\n`F+`\n\n`friend+`\n\nPlus\n\nFollow the field `F` any number of times, but at least once\n\n`F*`\n\n`friend*`\n\nStar\n\nFollow the field `F` any number of times, including zero\n\n`.`\n\n`.`\n\nAny\n\nFollow any field `F` regardless of name\n\n`F`\n\n`friend`\n\nField\n\nFollow the field `F`\n\n`F{n,m}`\n\n`friend{1,3}`\n\nTimes\n\nFollow the field `F` between `n` and `m` times\n\n`(A)`\n\n`(friend|foe)`\n\nGroup\n\nGroup the expression for inclusion in a larger expression\n\n`F>`\n\n`friend>`\n\nForward\n\nFollow the field `F` forward. This is the same as `F`.\n\n`<F`\n\n`<friend`\n\nBackward\n\nFollow the field `F` backward (who is linked to this node by `F`\n\n### Example: Ancestry\n\nTo understand the use of Path expressions we will use a family tree to exhibit the above operations and their meanings.\n\n#### Data Ingestion\n\nFirst we will use the following schema which has exactly one class, `Person`. We will add a `father` and `mother` field which are optional (as we will have to truncate our tree at some point, the non-existence is therefore an end of our knowledge rather than a statement that these do not exist).\n\n```\n{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"@key\" : {\"@type\" : \"Lexical\", \"@fields\" : [\"name\"]},\n  \"name\" : \"xsd:string\",\n  \"mother\" : {\"@type\" : \"Optional\", \"@class\" : \"Person\" },\n  \"father\" : {\"@type\" : \"Optional\", \"@class\" : \"Person\" }}\n```\n\nUsing the CLI we can create and add this schema as follows:\n\n```\nterminusdb db create admin/ancestor\necho '{ \"@type\" : \"Class\",\n  \"@id\" : \"Person\",\n  \"@key\" : {\"@type\" : \"Lexical\", \"@fields\" : [\"name\"]},\n  \"name\" : \"xsd:string\",\n  \"mother\" : {\"@type\" : \"Optional\", \"@class\" : \"Person\" },\n  \"father\" : {\"@type\" : \"Optional\", \"@class\" : \"Person\" }}' | terminusdb doc insert admin/ancestor -g schema\n```\n\nNext, we need to add some people. The following three generations of family tree is enough to be illustrative. We will add it to a file named `family.json` and import it on the command line.\n\n```\n{ \"@capture\" : \"Charles II of Spain\",\n  \"name\" : \"Charles II of Spain\",\n  \"mother\" : { \"@ref\" : \"Mariana of Austria\" },\n  \"father\" : { \"@ref\" : \"Philip IV of Spain\" } }\n{ \"@capture\" : \"Philip IV of Spain\",\n  \"name\" : \"Philip IV of Spain\",\n  \"mother\" : { \"@ref\" : \"Margarita of Austria\" },\n  \"father\" : { \"@ref\" : \"Philip III of Spain\" } }\n{ \"@capture\" : \"Mariana of Austria\",\n  \"name\" : \"Mariana of Austria\",\n  \"mother\" : { \"@ref\" : \"Maria Anna of Spain\" },\n  \"father\" : { \"@ref\" : \"Ferdinand III, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Maria Anna of Spain\",\n  \"name\" : \"Maria Anna of Spain\",\n  \"mother\" : { \"@ref\" : \"Margarita of Austria\" },\n  \"father\" : { \"@ref\" : \"Philip III of Spain\" } }\n{ \"@capture\" : \"Ferdinand III, Holy Roman Emperor\",\n  \"name\" : \"Ferdinand III, Holy Roman Emperor\",\n  \"mother\" : { \"@ref\" : \"Maria Anna of Bavaria (1574)\" },\n  \"father\" : { \"@ref\" : \"Ferdinand II, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Philip III of Spain\",\n  \"name\" : \"Philip III of Spain\",\n  \"mother\" : { \"@ref\" : \"Anne of Austria\" },\n  \"father\" : { \"@ref\" : \"Philip II of Spain\" } }\n{ \"@capture\" : \"Margarita of Austria\",\n  \"name\" : \"Margarita of Austria\",\n  \"mother\" : { \"@ref\" : \"Maria Anna of Bavaria (1551)\" },\n  \"father\" : { \"@ref\" : \"Charles II of Austria\" } }\n{ \"@capture\" : \"Ferdinand II, Holy Roman Emperor\",\n  \"name\" : \"Ferdinand II, Holy Roman Emperor\",\n  \"mother\" : { \"@ref\" : \"Maria Anna of Bavaria (1551)\" },\n  \"father\" : { \"@ref\" : \"Ferdinand II, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Maria Anna of Bavaria (1574)\",\n  \"name\" : \"Maria Anna of Bavaria (1574)\",\n  \"mother\" : { \"@ref\" : \"Renata of Lorraine\" },\n  \"father\" : { \"@ref\" : \"William V, Duke of Bavaria\" } }\n{ \"@capture\" : \"Philip II of Spain\",\n  \"name\" : \"Philip II of Spain\",\n  \"mother\" : { \"@ref\" : \"Isabella of Portugal\" },\n  \"father\" : { \"@ref\" : \"Charles V, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Anne of Austria\",\n  \"name\" : \"Anne of Austria\",\n  \"mother\" : { \"@ref\" : \"Maria of Spain\" },\n  \"father\" : { \"@ref\" : \"Maximilian II, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Maria Anna of Bavaria (1551)\",\n  \"name\" : \"Maria Anna of Bavaria (1551)\",\n  \"mother\" : { \"@ref\" : \"Anne of Habsburg\" },\n  \"father\" : { \"@ref\" : \"Albert V, Duke of Bavaria\" } }\n{ \"@capture\" : \"William V, Duke of Bavaria\",\n  \"name\" : \"William V, Duke of Bavaria\",\n  \"mother\" : { \"@ref\" : \"Anne of Habsburg\" },\n  \"father\" : { \"@ref\" : \"Albert V, Duke of Bavaria\" } }\n{ \"@capture\" : \"Renata of Lorraine\",\n  \"name\" : \"Renata of Lorraine\",\n  \"mother\" : { \"@ref\" : \"Christina of Denmark\" },\n  \"father\" : { \"@ref\" : \"Francis I, Duke of Lorraine\" } }\n{ \"@capture\" : \"Maria of Spain\",\n  \"name\" : \"Maria of Spain\",\n  \"mother\" : { \"@ref\" : \"Isabella of Portugal\" },\n  \"father\" : { \"@ref\" : \"Charles V, Holy Roman Emperor\" } }\n{ \"@capture\" : \"Maximilian II, Holy Roman Emperor\",\n  \"name\" : \"Maximilian II, Holy Roman Emperor\",\n  \"mother\" : { \"@ref\" : \"Ferdinand I, Holy Roman Emperor\" },\n  \"father\" : { \"@ref\" : \"Anna of Bohemia and Hungary\" } }\n{ \"@capture\" : \"Charles II of Austria\",\n  \"name\" : \"Charles II of Austria\",\n  \"mother\" : { \"@ref\" : \"Ferdinand I, Holy Roman Emperor\" },\n  \"father\" : { \"@ref\" : \"Anna of Bohemia and Hungary\" } }\n{ \"@capture\" : \"Anne of Habsburg\",\n  \"name\" : \"Anne of Habsburg\",\n  \"mother\" : { \"@ref\" : \"Ferdinand I, Holy Roman Emperor\" },\n  \"father\" : { \"@ref\" : \"Anna of Bohemia and Hungary\" } }\n{ \"@capture\" : \"Albert V, Duke of Bavaria\",\n  \"name\" : \"Albert V, Duke of Bavaria\" }\n{ \"@capture\" : \"Christina of Denmark\",\n  \"name\" : \"Christina of Denmark\",\n  \"mother\" : { \"@ref\" : \"Isabella of Burgundy\" },\n  \"father\" : { \"@ref\" : \"Christian II of Denmark\" } }\n{ \"@capture\" : \"Francis I, Duke of Lorraine\",\n  \"name\" : \"Francis I, Duke of Lorraine\" }\n{ \"@capture\" : \"Isabella of Portugal\",\n  \"name\" : \"Isabella of Portugal\" }\n{ \"@capture\" : \"Charles V, Holy Roman Emperor\",\n  \"name\" : \"Charles V, Holy Roman Emperor\",\n  \"mother\" : { \"@ref\" : \"Philip of Castile\" },\n  \"father\" : { \"@ref\" : \"Joanna of Castile\" } }\n{ \"@capture\" : \"Ferdinand I, Holy Roman Emperor\",\n  \"name\" : \"Ferdinand I, Holy Roman Emperor\",\n  \"mother\" : { \"@ref\" : \"Philip of Castile\" },\n  \"father\" : { \"@ref\" : \"Joanna of Castile\" } }\n{ \"@capture\" : \"Anna of Bohemia and Hungary\",\n  \"name\" : \"Anna of Bohemia and Hungary\" }\n{ \"@capture\" : \"Isabella of Burgundy\",\n  \"name\" : \"Isabella of Burgundy\",\n  \"mother\" : { \"@ref\" : \"Philip of Castile\" },\n  \"father\" : { \"@ref\" : \"Joanna of Castile\" } }\n{ \"@capture\" : \"Christian II of Denmark\",\n  \"name\" : \"Christian II of Denmark\" }\n{ \"@capture\" : \"Philip of Castile\",\n  \"name\" : \"Philip of Castile\" }\n{ \"@capture\" : \"Joanna of Castile\",\n  \"name\" : \"Joanna of Castile\" }\n```\n\n#### Path Query\n\nUsing the `Product explorer` dashboard, we can issue queries using path queries to find answers to various questions.\n\n**All ancestors**\n\nTo see the names of _all_ ancestors of Charles II of Spain, we can write the following:\n\n```\nand(triple(\"v:Person\", \"name\", string(\"Charles II of Spain\")),\n           path(\"v:Person\", \"(mother|father)*,name\", \"v:Name\"))\n```\n\nThis asks for the name of anyone who is a mother or father, any number of times, including Charles himself.\n\n**All inbred ancestors**\n\nAny distinct ancestors who have an ancestor reachable through _both_ the mother and the father.\n\n```\ndistinct(\"v:Ancestor\",\n  and(\n    triple(\"v:Person\", \"name\", string(\"Charles II of Spain\")),\n    path(\"v:Person\", \"(mother|father)*\", \"v:Ancestor\"),\n    path(\"v:Ancestor\", \"mother,(mother|father)*\", \"v:Shared_Ancestor\"),\n    path(\"v:Ancestor\", \"father,(mother|father)*\", \"v:Shared_Ancestor\"),\n    triple(\"v:Ancestor\", \"name\", \"v:Name\")\n  )\n)\n```\n\n**All those whose parents are nieces or nephews of each other**\n\nThe following query finds all distinct ancestors of Charles II whose parents have an uncle-niece relationship to each other. The query specifically asks, is there an ancestor (someone related by `(mother|father)*`) who has their father's father, as the father of their mother's mother. We walk up the tree to the father's father, and down the tree through the mother backwards to arrive at the same individual.\n\n```\ndistinct(\"v:Ancestor\",\n  and(\n    triple(\"v:Person\", \"name\", string(\"Charles II of Spain\")),\n    path(\"v:Person\", \"(mother|father)*\", \"v:Ancestor\"),\n    path(\"v:Ancestor\", \"(father,father,<father,<mother,<mother)\", \"v:Ancestor\"),\n    triple(\"v:Ancestor\", \"name\", \"v:Name\")\n  )\n)\n```\n\nThis will yield: Charles II of Spain, Margarita of Austria, and Philip III of Spain."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Path Query Reference Guide",
      "description": "A reference guide to path queries in TerminusCMS and TerminusDB.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Schema Migration Reference Guide"
    },
    "slug": "schema-migration-reference-guide",
    "body": {
      "@type": "Body",
      "value": "Schema migration allows us to move schema and instance data together automatically in a replayable fashion. This is essential for allowing flexible schemas to co-exist nicely with change-requests and merges.\n\nThe schema operations can be performed directly on the branch of interest, or you can _target_ the schema of a given branch in another branch, allowing the migrations to be re-performed such that a new common schema is obtained.\n\nIn addition, schema migrations can be _inferred_ in some cases, and TerminusCMS will attempt to silently infer migrations which will not impact instance data.\n\nHowever, some schema operations require instance data to change, and such alterations must be asked for explicitly.\n\n## Schema Migration Operations\n\nThere are a number of schema operations which can be performed which will change one schema into another. These are specified by passing an ordered list of operations. The operations are sometimes order dependent so different operations orders can lead to different changes to the instance data.\n\nSome operations are known as [weakening](/docs/what-is-schema-weakening/) operations, as they can always be performed without altering the existing instance data. These are essentially _backward compatible_ operations. This includes changing a range to a less specific or optional range, adding new optional fields, or adding new classes.\n\n## DeleteClass\n\nThe `DeleteClass` operation will remove a class from a schema. This does not change the _range_ of properties, so these properties must first be dropped before deleting a class is possible.\n\nDue to the fact that existing instance data of this class will be deleted, this is not a _weakening_ operation.\n\n```\n{ \"@type\" : \"DeleteClass\",\n  \"class\" : <ClassName> }\n```\n\nAn example of the operation would be:\n\n```\n{ \"@type\" : \"DeleteClass\",\n  \"class\" : \"Person\" }\n```\n\nWhich would take the schema:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\" }\n```\n\nto:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n```\n\n## CreateClass\n\nThe `CreateClass` operation specifies the entire class to be created. This operation is always a _weakening_ operation.\n\n```\n{ \"@type\" : \"CreateClass\",\n  \"class_document\" : <ClassDocument> }\n```\n\n### Example\n\nThe migration:\n\n```\n{ \"@type\" : \"CreateClass\",\n  \"class_document\" :\n  { \"@id\" : \"Person\",\n    \"@type\" : \"Class\",\n    \"name\" : \"xsd:string\" } }\n```\n\nWould take the schema:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\" }\n```\n\nto:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\" }\n```\n\n## MoveClass\n\nThe `MoveClass` operation renames a class and all of the URIs of instance data associated with that class. Due to the side-effects on instance data, this is not a _weakening_ operation.\n\n```\n{ \"@type\" : \"MoveClass\",\n  \"from\" : <FromClassName>,\n  \"to\" : <ToClassName> }\n```\n\n### Example\n\n```\n{ \"@type\" : \"MoveClass\",\n  \"from\" : \"Person\",\n  \"to\" : \"Dog\" }\n```\n\nWould take the schema:\n\n```\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n```\n\nto:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n```\n\n## ReplaceClassMetadata\n\nThe `ReplaceClassMetadata` operation replaces the metadata on a class (if it exists). This operation is always a _weakening_ operation and has no effect on instance data.\n\n```\n{ \"@type\" : \"ReplaceClassMetadata\",\n  \"class\" : <ClassName>\n  \"metadata\" : <Metadata> }\n```\n\n### Example\n\nThe operation:\n\n```\n{ \"@type\" : \"ReplaceClassMetadata\",\n  \"class\" : \"Person\",\n  \"metadata\" : { \"ui_preferences\" : { \"colour\" : \"blue\" } } }\n```\n\nWould take the schema:\n\n```\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"@metadata\" : { \"ui_preferences\" : { \"colour\" : \"red\" } },\n  \"name\" : \"xsd:string\"}\n```\n\nto:\n\n```\n{ \"@id\" : \"Dog\",\n  \"@type\" : \"Class\",\n  \"@metadata\" : { \"ui_preferences\" : { \"colour\" : \"blue\" } },\n  \"name\" : \"xsd:string\" }\n```\n\n## ReplaceClassDocumentation\n\nThe `ReplaceClassDocumentation` operation replaces the documentation on a class (if it exists). This operation is always a _weakening_ operation and has no effect on instance data.\n\n```\n{ \"@type\" : \"ReplaceClassDocumentation\",\n  \"class\" : <ClassName>\n  \"documentation\" : <Documentation> }\n```\n\n### Example\n\nThe operation:\n\n```\n{ \"@type\" : \"ReplaceClassDocumentation\",\n  \"class\" : \"Person\",\n  \"documentation\" : { \"@comment\" : \"This is a person class\",\n                      \"@properties\" : { \"name\" : { \"@comment\" : \"The name of a person\",\n                                                    \"@label\" : \"name\" } },\n                      \"@label\" : \"Person\" } }\n```\n\nWould take the schema:\n\n```\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"@documentation\" : { \"@comment\" : \"A Person\",\n                       \"@properties\" : { \"name\" : { \"@comment\" : \"Name of a person\",\n                                                    \"@label\" : \"name\" } },\n                       \"@label\" : \"Person\" },\n  \"name\" : \"xsd:string\"}\n```\n\nto:\n\n```\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"@documentation\" : { \"@comment\" : \"This is a person class\",\n                      \"@properties\" : { \"name\" : { \"@comment\" : \"The name of a person\",\n                                                   \"@label\" : \"name\" } },\n                      \"@label\" : \"Person\" },\n  \"name\" : \"xsd:string\"}\n```\n\n## ReplaceContext\n\nThe `ReplaceContext` operation will update the context object, which will change how URIs are compressed when returning data.\n\nThis operation is a _weakening_ operation only when prefixes other than `@base` and `@schema` are changed. Otherwise, all data in the database will be moved to the new `@base` and `@schema` designations.\n\n```\n{ \"@type\" : \"ReplaceContext\",\n  \"context\" : <Context> }\n```\n\n## ExpandEnum\n\nThe `ExpandEnum` operation will allow new fields to be added to an `Enum`. This operation is always a weakening operation.\n\n```\n{ \"@type\" : \"ExpandEnum\",\n  \"enum\" : <EnumName>,\n  \"values\" : [<Value0>, ... <ValueN>] }\n```\n\n### Example\n\nThe command\n\n```\n{ \"@type\" : \"ReplaceContext\",\n  \"context\" : { \"@type\" : \"@context\",\n                \"@base\" : \"iri://terminusdb.com/data\",\n                \"@schema\" : \"iri://terminusdb.com/schema#\" } }\n```\n\nWill take a schema:\n\n```\n{ \"@type\" : \"@context\",\n  \"@base\" : \"http://example.com/data\",\n  \"@schema\" : \"http://example.com/schema#\" }\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n```\n\nTo the schema:\n\n```\n{ \"@type\" : \"@context\",\n  \"@base\" : \"iri://terminusdb.com/data\",\n  \"@schema\" : \"iri://terminusdb.com/schema#\" }\n{ \"@id\" : \"Person\",\n  \"@type\" : \"Class\",\n  \"name\" : \"xsd:string\"}\n```\n\n## DeleteClassProperty\n\nThe `DeleteClassProperty` command removes a property from the schema and deletes all associated data points in the instance graph. This is not a _weakening_ operation.\n\n```\n{ \"@type\" : \"DeleteClassProperty\",\n  \"class\" : <ClassName>\n  \"property\" : <PropertyName> }\n```\n\n## CreateClassProperty\n\nThe `CreateClassProperty` command creates a new property of a given name and type. It is a weakening operation only if the type is within a type family which includes:\n\n*   Cardinality including zero\n*   A Set\n*   An Optional\n*   An Array\n\nNotably this excludes lists and required properties. With lists it will require the addition of the empty list resulting in a _strengthening_. The operation is impossible with a required property unless a default is specified.\n\n```\n{ \"@type\" : \"CreateClassProperty\",\n  \"class\" : <ClassName>,\n  \"property\" : <PropertyName>,\n  \"type\" : <Type> }\n```\n\nOr\n\n```\n{ \"@type\" : \"CreateClassProperty\",\n  \"class\" : <ClassName>,\n  \"property\" : <PropertyName>,\n  \"type\" : <Type>,\n  \"default\" : <DefaultValue> }\n```\n\n## MoveClassProperty\n\nThe `MoveClassProperty` command will move the name of a property from one name to another.\n\n```\n{ \"@type\" : \"MoveClassProperty\",\n  \"class\" : <ClassName>,\n  \"from\" : <PropertyName>,\n  \"to\" : <PropertyName> }\n```\n\nThis operation is never a weakening.\n\n## UpcastClassProperty\n\nThe `UpcastClassProperty` command will weaken a type to another type which is a supertype or inclusive type family (such as moving a required or Optional to Set).\n\nThis operation is always a weakening.\n\n```\n{ \"@type\" : \"UpcastClassProperty\",\n  \"class\" : <ClassName>\n  \"property\" : <PropertyName>,\n  \"type\" : <TypeSpecification> }\n```\n\n## CastClassProperty\n\nThe `CastClassProperty` command will attempt to cast a property type to another type (such as a string to a date). This operation is never a weakening operation as it requires changing the type layout of data.\n\n```\n{ \"@type\" : \"CastClassProperty\",\n  \"class\" : <ClassName>\n  \"property\" : <PropertyName>,\n  \"type\" : <TypeSpecification>,\n  \"default\" : <DefaultOrError> }\n```\n\nThe \\`DefaultOrError document is of the form:\n\n```\n{ \"@type\" : \"Error\" }\n```\n\nWhich will result in an error if casting is impossible, or:\n\n```\n{ \"@type\" : \"Default\",\n  \"value\" : <Value> }\n```\n\nWhere `Value` is the value within type `TypeSpecification` which will be used if casting is impossible.\n\n## ChangeKey (unimplemented)\n\n## ChangeParents (unimplemented)\n\n## ChangeCollection (unimplemented)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Schema Migration Reference Guide",
      "description": "A reference guide explaining the schema migration capabilities of TerminusCMS and TerminusDB",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "WOQL Class Reference Guide"
    },
    "slug": "woql-class-reference-guide",
    "body": {
      "@type": "Body",
      "value": "## WOQL Schema\n\nThis is the WOQL schema. It gives a complete specification of the syntax of the WOQL query language. This allows WOQL queries to be checked for syntactic correctness, helps to prevent errors and detect conflicts in merge of queries, and allows the storage and retrieval of queries so that queries can be associated with data products.\n\n**Authored by:** Gavin Mendel-Gleason\n\n> Syntax is listed in alphabetical order.\n\n#### AddData\n\nAdd a (terminal) edge with a data value.\n\n**Class:** `AddData`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`DataValue`\n\nA datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### AddLink\n\nAdd an edge which links between nodes in the graph.\n\n**Class:** `AddLink`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`NodeValue`\n\nA URI or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### AddTriple\n\nSpecify an edge to add to the graph.\n\n**Class:** `AddTriple`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`Value`\n\nA URI, datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### AddedData\n\nSpecify an edge pattern with data value which was added in \\*this\\* commit\\*.\n\n**Class:** `AddedData`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`DataValue`\n\nA datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### AddedLink\n\nSpecify an edge pattern which links between nodes at \\*this\\* commit.\n\n**Class:** `AddedLink`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`NodeValue`\n\nA URI or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### AddedTriple\n\nSpecify an edge pattern which was \\*added\\* at \\*this commit\\*.\n\n**Class:** `AddedTriple`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`Value`\n\nA URI, datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### And\n\nA conjunction of queries which must all have a solution.\n\n**Class:** `And`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`and`\n\n`Query`\n\nList of queries which must hold.\n\n* * *\n\n#### ArithmeticExpression\n\nAn abstract class specifying the AST super-class of all arithemtic expressions. It is a subdocument\n\n**Class:** `ArithmeticExpression`\n\n* * *\n\n#### ArithmeticValue\n\nA variable or node. It is a subdocument\n\n**Class:** `ArithmeticValue`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`data`\n\n`xsd:anySimpleType`\n\nAn xsd data type value.\n\n`variable`\n\n`xsd:string`\n\nA variable.\n\n* * *\n\n#### Column\n\nDescription pending.\n\n**Class:** `Column`\n\n* * *\n\n#### Concatenate\n\nConcatenate a list of strings.\n\n**Class:** `Concatenate`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`list`\n\n`DataValue`\n\nThe list to concatenate.\n\n`result`\n\n`DataValue`\n\nThe result string.\n\n* * *\n\n#### Count\n\nCounts the number of solutions of a query.\n\n**Class:** `Count`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query from which to obtain the count.\n\n`count`\n\n`DataValue`\n\nThe count of the number of solutions.\n\n* * *\n\n#### Data\n\nSpecify an edge pattern which is terminal, and provides a data value association.\n\n**Class:** `Data`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`DataValue`\n\nA data type or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### DataValue\n\nA variable or node. It is a subdocument\n\n**Class:** `DataValue`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`data`\n\n`xsd:anySimpleType`\n\nAn xsd data type value.\n\n`variable`\n\n`xsd:string`\n\nA variable.\n\n`list`\n\n`DataValue`\n\nA list of datavalues\n\n* * *\n\n#### DeleteDocument\n\nDelete a document from the graph.\n\n**Class:** `DeleteDocument`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`identifier`\n\n`NodeValue`\n\nAn identifier specifying the documentation location to delete.\n\n* * *\n\n#### DeleteLink\n\nDelete an edge linking nodes.\n\n**Class:** `DeleteLink`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge. The variable must be bound.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge. The variable must be bound.\n\n`object`\n\n`NodeValue`\n\nA URI or variable which is the target or object of the graph edge. The variable must be bound.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### DeleteTriple\n\nSpecify an edge pattern to remove from the graph.\n\n**Class:** `DeleteTriple`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`Value`\n\nA URI, datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### DeletedLink\n\nAn edge pattern specifying a link beween nodes deleted \\*at this commit\\*.\n\n**Class:** `DeletedLink`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`NodeValue`\n\nA URI or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### DeletedTriple\n\nSpecify an edge pattern which was \\*deleted\\* at \\*this commit\\*.\n\n**Class:** `DeletedTriple`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`Value`\n\nA URI, datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### Distinct\n\nEnsure variables listed result in distinct solutions.\n\n**Class:** `Distinct`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`variables`\n\n`xsd:string`\n\nThe variables which must be distinct from the query.\n\n`query`\n\n`Query`\n\nThe query which will be run prior to selection.\n\n* * *\n\n#### Div\n\nInteger divide two numbers.\n\n**Class:** `Div`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`ArithmeticExpression`\n\nFirst operand of div.\n\n`right`\n\n`ArithmeticExpression`\n\nSecond operand of div.\n\n* * *\n\n#### Divide\n\nDivide two numbers.\n\n**Class:** `Divide`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`ArithmeticExpression`\n\nFirst operand of divide.\n\n`right`\n\n`ArithmeticExpression`\n\nSecond operand of divide.\n\n* * *\n\n#### Dot\n\nExtract the value of a key in a bound document.\n\n**Class:** `Dot`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`star`\n\n`undefined`\n\nA path patterns.\n\n* * *\n\n#### Equals\n\nTrue whenever 'left' is the same as 'right'. Performs unification.\n\n**Class:** `Equals`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`child`\n\n`undefined`\n\nA URI, data value or variable.\n\n`parent`\n\n`undefined`\n\nA URI, data value or variable.\n\n* * *\n\n#### Eval\n\nEvaluate an arithmetic expression to obtain a result.\n\n**Class:** `Eval`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`expression`\n\n`ArithmeticExpression`\n\nThe expression to be evaluated.\n\n`result`\n\n`ArithmeticValue`\n\nThe numeric result.\n\n* * *\n\n#### Exp\n\nExponentiate a number.\n\n**Class:** `Exp`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`ArithmeticExpression`\n\nThe base.\n\n`right`\n\n`ArithmeticExpression`\n\nThe exponent.\n\n* * *\n\n#### Floor\n\nFind the integral part of a number.\n\n**Class:** `Floor`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`argument`\n\n`ArithmeticExpression`\n\nThe number to floor.\n\n* * *\n\n#### FormatType\n\nDescription pending.\n\n**Class:** `FormatType`\n\n* * *\n\n#### From\n\nChange the default read graph (between instance/schema).\n\n**Class:** `From`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe subquery with a new default graph.\n\n`graph_filter`\n\n`xsd:string`\n\nThe graph filter: 'schema' or 'instance' or '\\*'.\n\n* * *\n\n#### Get\n\nDescription pending.\n\n**Class:** `Get`\n\n**Super class:** `Query`\n\n* * *\n\n#### Greater\n\nPredicate determining if one thing is greater than another according to natural ordering.\n\n**Class:** `Greater`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`DataValue`\n\nThe greater element.\n\n`right`\n\n`DataValue`\n\nThe lesser element.\n\n* * *\n\n#### GroupBy\n\nGroup a query into a list with each element of the list specified by 'template' using a given variable set for the group.\n\n**Class:** `GroupBy`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`template`\n\n`xsd:string`\n\nThe template of elements in the result list.\n\n`group_by`\n\n`xsd:string`\n\nThe variables which should be grouped into like solutions.\n\n`query`\n\n`Query`\n\nThe subquery providing the solutions for the grouping.\n\n`grouped`\n\n`Value`\n\nThe final list of templated solutions.\n\n* * *\n\n#### HashKey\n\nGenerates a key identical to those generated automatically by 'HashKey' specifications.\n\n**Class:** `HashKey`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`base`\n\n`DataValue`\n\nThe URI base to the left of the key.\n\n`key_list`\n\n`DataValue`\n\nList of data elements required to generate the key.\n\n`uri`\n\n`NodeValue`\n\nThe resulting URI.\n\n* * *\n\n#### If\n\nA conditional which runs the then clause for every success from the test clause, otherwise runs the else clause.\n\n**Class:** `If`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`test`\n\n`Query`\n\nA query which will provide bindings for the then clause.\n\n`then`\n\n`Query`\n\nA query which will run for every solution of test with associated bindings.\n\n`else`\n\n`Query`\n\nA query which runs whenever test fails.\n\n* * *\n\n#### Immediately\n\nAttempts to perform all side-effecting operations immediately. Can have strange non-backtracking effects but can also increase performance. Use at your own risk.\n\n**Class:** `Immediately`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query from which to obtain the side-effects.\n\n* * *\n\n#### Indicator\n\nDescription pending.\n\n**Class:** `Indicator`\n\n* * *\n\n#### Into\n\nChange the default write graph (between instance/schema).\n\n**Class:** `Into`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe subquery with a new default write graph.\n\n`graph`\n\n`xsd:string`\n\nThe graph filter: schema or instance.\n\n* * *\n\n#### InversePathPredicate\n\nA predicate to traverse \\*backwards\\*.\n\n**Class:** `InversePathPredicate`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`predicate`\n\n`xsd:string`\n\nThe predicate to use in reverse direction in the pattern traversal.\n\n* * *\n\n#### IsA\n\nTest (or generate) the type of an element.\n\n**Class:** `IsA`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`element`\n\n`NodeValue`\n\nThe element to test.\n\n`type`\n\n`NodeValue`\n\nThe type of the element.\n\n* * *\n\n#### Join\n\nJoin a list of strings using 'separator'.\n\n**Class:** `Join`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`list`\n\n`DataValue`\n\nThe list to concatenate.\n\n`separator`\n\n`DataValue`\n\nThe separator between each joined string\n\n`result`\n\n`DataValue`\n\nThe result string.\n\n* * *\n\n#### Length\n\nThe length of a list.\n\n**Class:** `Length`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`list`\n\n`DataValue`\n\nThe list of which to find the length.\n\n`length`\n\n`DataValue`\n\nThe length of the list.\n\n* * *\n\n#### Less\n\nPredicate determining if one thing is less than another according to natural ordering.\n\n**Class:** `Less`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`DataValue`\n\nThe lesser element.\n\n`right`\n\n`DataValue`\n\nThe greater element.\n\n* * *\n\n#### LexicalKey\n\nGenerates a key identical to those generated automatically by 'LexicalKey' specifications.\n\n**Class:** `LexicalKey`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`base`\n\n`DataValue`\n\nThe URI base to the left of the key.\n\n`key_list`\n\n`DataValue`\n\nList of data elements required to generate the key.\n\n`uri`\n\n`NodeValue`\n\nThe resulting URI.\n\n* * *\n\n#### Like\n\nDistance between strings, similar to a Levenstein distance.\n\n**Class:** `Like`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`DataValue`\n\nThe first string.\n\n`right`\n\n`DataValue`\n\nThe second string.\n\n`similarity`\n\n`DataValue`\n\nNumber between -1 and 1 which gives a scale for similarity.\n\n* * *\n\n#### Limit\n\nLimit a query to a particular maximum number of solutions specified by 'limit'. Can be used with start to perform paging.\n\n**Class:** `Limit`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query to perform.\n\n`limit`\n\n`xsd:nonNegativeInteger`\n\nMaximum number of solutions.\n\n* * *\n\n#### Link\n\nSpecify an edge pattern which is not terminal, but a link between objects.\n\n**Class:** `Link`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`NodeValue`\n\nA URI or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### Lower\n\nLowercase a string.\n\n**Class:** `Lower`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`mixed`\n\n`DataValue`\n\nThe mixed case string.\n\n`uppser`\n\n`undefined`\n\nThe lower case string.\n\n* * *\n\n#### Member\n\nGenerate or test every element of a list.\n\n**Class:** `Member`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`member`\n\n`DataValue`\n\nThe element to test for membership or to supply as generated.\n\n`list`\n\n`DataValue`\n\nThe list of elements against which to generate or test.\n\n* * *\n\n#### Minus\n\nSubtract two numbers.\n\n**Class:** `Minus`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`ArithmeticExpression`\n\nFirst operand of minus.\n\n`right`\n\n`ArithmeticExpression`\n\nSecond operand of minus.\n\n* * *\n\n#### NamedParametricQuery\n\nA named parametric query which names a specific query for later retrieval and re-use and allows the specification of bindings for a specific set of variables in the query.\n\n**Class:** `NamedParametricQuery`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`name`\n\n`xsd:string`\n\nThe name of the NamedParametricQuery to be retrieved.\n\n`parameters`\n\n`xsd:string`\n\nVariable name list for auxilliary bindings.\n\n`query`\n\n`Query`\n\nThe query AST as WOQL JSON.\n\n* * *\n\n#### NamedQuery\n\nA named query names a specific query for later retrieval and re-use.\n\n**Class:** `NamedQuery`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`name`\n\n`xsd:string`\n\nThe name of the NamedQuery to be retrieved\n\n`query`\n\n`Query`\n\nThe query AST as WOQL JSON\n\n* * *\n\n#### NodeValue\n\nA variable or node. It is a subdocument\n\n**Class:** `NodeValue`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`node`\n\n`xsd:string`\n\nA URI representing a resource.\n\n`variable`\n\n`xsd:string`\n\nA variable.\n\n* * *\n\n#### Not\n\nThe negation of a query. Provides no solution bindings, but will succeed if its sub-query fails.\n\n**Class:** `Not`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query which must not hold.\n\n* * *\n\n#### Once\n\nObtains exactly one solution from a query. Simliar to a limit of 1.\n\n**Class:** `Once`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query from which to obtain a solution.\n\n* * *\n\n#### Optional\n\nA query which will succeed (without bindings) even in the case of failure.\n\n**Class:** `Optional`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query to run.\n\n* * *\n\n#### Or\n\nA disjunction of queries any of which can provide a solution.\n\n**Class:** `Or`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`or`\n\n`Query`\n\nList of queries which may hold.\n\n* * *\n\n#### Order\n\nDescription pending.\n\n**Class:** `Order`\n\n* * *\n\n#### OrderBy\n\nOrders query results according to an ordering specification.\n\n**Class:** `OrderBy`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe base query giving the solutions to order.\n\n`ordering`\n\n`OrderTemplate`\n\nA specification of the ordering of solutions.\n\n* * *\n\n#### OrderTemplate\n\nThe order template, consisting of the variable and ordering direction. It is a subdocument\n\n**Class:** `OrderTemplate`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`order`\n\n`Order`\n\nAn enum either 'asc' or 'desc'.\n\n`variable`\n\n`xsd:string`\n\nThe variable to order.\n\n* * *\n\n#### Pad\n\nPad a string.\n\n**Class:** `Pad`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`string`\n\n`DataValue`\n\nThe starting string.\n\n`char`\n\n`DataValue`\n\nThe padding character.\n\n`times`\n\n`DataValue`\n\nThe number of times to repeat the padding character.\n\n`result`\n\n`DataValue`\n\nThe result of the padding as a string.\n\n* * *\n\n#### Path\n\nFind a path through the graph according to 'pattern'. This 'pattern' is a regular graph expression which avoids cycles.\n\n**Class:** `Path`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`Value`\n\nThe starting node.\n\n`pattern`\n\n`PathPattern`\n\nThe pattern which describes how to traverse edges.\n\n`object`\n\n`Value`\n\nThe ending node.\n\n`path`\n\n`Value`\n\nAn optional list of edges traversed.\n\n* * *\n\n#### PathOr\n\nA set of patterns in which each of the patterns can result in objects starting from our current subject set.\n\n**Class:** `PathOr`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`or`\n\n`PathPattern`\n\nA disjunction of path patterns.\n\n* * *\n\n#### PathPattern\n\nDescription pending.\n\n**Class:** `PathPattern`\n\n* * *\n\n#### PathPlus\n\nThe path pattern specified by 'plus' must hold one or more times in succession.\n\n**Class:** `PathPlus`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`plus`\n\n`PathPattern`\n\nA path patterns.\n\n* * *\n\n#### PathPredicate\n\nA predicate to traverse.\n\n**Class:** `PathPredicate`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`predicate`\n\n`xsd:string`\n\nThe predicate to use in the pattern traversal.\n\n* * *\n\n#### PathSequence\n\nA sequence of patterns in which each of the patterns in the list must result in objects which are subjects of the next pattern in the list.\n\n**Class:** `PathSequence`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`sequence`\n\n`PathPattern`\n\nA sequence of path patterns.\n\n* * *\n\n#### PathStar\n\nThe path pattern specified by 'star' may hold zero or more times in succession.\n\n**Class:** `PathStar`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`star`\n\n`PathPattern`\n\nA path patterns.\n\n* * *\n\n#### PathTimes\n\nThe path pattern specified by 'times' may hold 'from' to 'to' times in succession.\n\n**Class:** `PathTimes`\n\n**Super class:** `PathPattern`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`star`\n\n`undefined`\n\nA path patterns.\n\n* * *\n\n#### Plus\n\nAdd two numbers.\n\n**Class:** `Plus`\n\n**Super class:** `ArithmeticExpression`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`left`\n\n`ArithmeticExpression`\n\nFirst operand of add.\n\n`right`\n\n`ArithmeticExpression`\n\nSecond operand of add.\n\n* * *\n\n#### Put\n\nDescription pending.\n\n**Class:** `Put`\n\n**Super class:** `Query`\n\n* * *\n\n#### Query\n\nAn abstract class which represents an arbitrary query AST. It is a subdocument\n\n**Class:** `Query`\n\n* * *\n\n#### QueryResource\n\nDescription pending.\n\n**Class:** `QueryResource`\n\n* * *\n\n#### RandomKey\n\nGenerates a key identical to those generated automatically by 'RandomKey' specifications.\n\n**Class:** `RandomKey`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`base`\n\n`DataValue`\n\nThe URI base to the left of the key.\n\n`uri`\n\n`NodeValue`\n\nThe resulting URI.\n\n* * *\n\n#### ReadDocument\n\nRead a full document from an identifier.\n\n**Class:** `ReadDocument`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`document`\n\n`DataValue`\n\nVariable which will be bound to the document.\n\n`identifier`\n\n`NodeValue`\n\nThe URI of the document to load.\n\n* * *\n\n#### Regexp\n\nTest a string against a PCRE style regex pattern.\n\n**Class:** `Regexp`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`pattern`\n\n`DataValue`\n\nThe PCRE style pattern.\n\n`string`\n\n`DataValue`\n\nThe string to test.\n\n`result`\n\n`DataValue`\n\nAn optional result list of matches.\n\n* * *\n\n#### Select\n\nSelect specific variables from a query to return.\n\n**Class:** `Select`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`variables`\n\n`xsd:string`\n\nThe variables to select from the query.\n\n`query`\n\n`Query`\n\nThe query which will be run prior to selection.\n\n* * *\n\n#### Size\n\nSize of a database in magic units (bytes?).\n\n**Class:** `Size`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`resource`\n\n`xsd:string`\n\nThe resource to obtain the size of.\n\n`size`\n\n`DataValue`\n\nThe size.\n\n* * *\n\n#### Source\n\nDescription pending.\n\n**Class:** `Source`\n\n* * *\n\n#### Split\n\nSplit a string.\n\n**Class:** `Split`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`string`\n\n`DataValue`\n\nThe starting string.\n\n`pattern`\n\n`DataValue`\n\nThe splitting pattern.\n\n`list`\n\n`DataValue`\n\nThe result list of strings.\n\n* * *\n\n#### Start\n\nStart a query at the nth solution specified by 'start'. Allows resumption and paging of queries.\n\n**Class:** `Start`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`query`\n\n`Query`\n\nThe query to perform.\n\n`start`\n\n`xsd:nonNegativeInteger`\n\nThe numbered solution to start at.\n\n* * *\n\n#### Substring\n\nFinds the boundaries of a substring in a string.\n\n**Class:** `Substring`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`string`\n\n`DataValue`\n\nThe super-string as data or variable.\n\n`substring`\n\n`DataValue`\n\nThe super-string as data or variable.\n\n`length`\n\n`DataValue`\n\nThe length of the string as an integer or variable.\n\n`before`\n\n`DataValue`\n\nThe count of characters before substring as an integer or variable.\n\n`after`\n\n`DataValue`\n\nThe count of characters after substring as an integer or variable.\n\n* * *\n\n#### Subsumption\n\nProvides class subsumption (the inheritance model) according to the schema design. True whenver 'child' is a child of 'parent'. Can be used as a generator or a check.\n\n**Class:** `Subsumption`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`child`\n\n`NodeValue`\n\nThe child class as a URI or variable.\n\n`parent`\n\n`NodeValue`\n\nThe parent class as a URI or variable\n\n* * *\n\n#### Sum\n\nSum a list of strings.\n\n**Class:** `Sum`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`list`\n\n`DataValue`\n\nThe list of numbers to sum.\n\n`result`\n\n`DataValue`\n\nThe result of the sum as a number.\n\n* * *\n\n#### Trim\n\nTrims whitespace from 'untrimmed'.\n\n**Class:** `Trim`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`untrimmed`\n\n`DataValue`\n\nThe untrimmed string.\n\n`trimmed`\n\n`DataValue`\n\nThe string to be trimmed.\n\n* * *\n\n#### Triple\n\nSpecify an edge pattern in the graph.\n\n**Class:** `Triple`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`subject`\n\n`NodeValue`\n\nA URI or variable which is the source or subject of the graph edge.\n\n`predicate`\n\n`NodeValue`\n\nA URI or variable which is the edge-label or predicate of the graph edge.\n\n`object`\n\n`Value`\n\nA URI, datatype or variable which is the target or object of the graph edge.\n\n`graph`\n\n`xsd:string`\n\nAn optional graph (either 'instance' or 'schema')\n\n* * *\n\n#### TripleCount\n\nThe number of edges in a database.\n\n**Class:** `TripleCount`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`resource`\n\n`xsd:string`\n\nThe resource to obtain the edges from.\n\n`count`\n\n`DataValue`\n\nThe count of edges.\n\n* * *\n\n#### True\n\nThe query which is always true.\n\n**Class:** `True`\n\n**Super class:** `Query`\n\n* * *\n\n#### Typecast\n\nCasts one type as another if possible.\n\n**Class:** `Typecast`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`value`\n\n`Value`\n\nThe value to cast.\n\n`type`\n\n`NodeValue`\n\nThe type to which to cast.\n\n`result`\n\n`Value`\n\nThe resulting value after cast.\n\n* * *\n\n#### UpdateDocument\n\nUpdate a document in the graph.\n\n**Class:** `UpdateDocument`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`document`\n\n`DataValue`\n\nThe document to update. Must either have an '@id' or have a class specified key.\n\n`identifier`\n\n`NodeValue`\n\nAn optional returned identifier specifying the documentation location.\n\n* * *\n\n#### Upper\n\nUppercase a string.\n\n**Class:** `Upper`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`mixed`\n\n`DataValue`\n\nThe mixed case string.\n\n`uppser`\n\n`undefined`\n\nThe upper case string.\n\n* * *\n\n#### Using\n\nSelect a specific collection for query.\n\n**Class:** `Using`\n\n**Super class:** `Query`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`collection`\n\n`xsd:string`\n\nThe resource over which to run the query.\n\n`query`\n\n`Query`\n\nThe query which will be run on the selected collection.\n\n* * *\n\n#### Value\n\nA variable, node or data point. It is a subdocument\n\n**Class:** `Value`\n\n**Properties:**\n\nProperty\n\nRange\n\nDesc\n\n`node`\n\n`xsd:string`\n\nA URI representing a resource.\n\n`variable`\n\n`xsd:string`\n\nA variable.\n\n`list`\n\n`Value`\n\nA list of datavalues\n\n`data`\n\n`xsd:anySimpleType`\n\nAn xsd data type value."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "WOQL Class Reference Guide",
      "description": "The JSON-LD definition of the WOQL language",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "How to Use the Document UI SDK"
    },
    "slug": "document-ui-sdk",
    "body": {
      "@type": "Body",
      "value": "Use the TerminusDB documents User Interface (UI) utility `terminusdb-documents-ui` to automatically generate user interfaces for the document definitions in your TerminusDB schema. The utility takes frames as input and outputs forms in HTML format. A frame is the JSON structure of a JSON document, including the document's inherited properties and IRIs.\n\n### Install and import\n\nInstall the utility from `npm`:\n\n```\nnpm install @terminusdb/terminusdb-documents-ui --save\n```\n\nImport the `FrameViewer` component into your code:\n\n```python\nimport {FrameViewer} from '@terminusdb/terminusdb-documents-ui'\n```\n\nImport the `FrameViewer` css into your code:\n\nFor dark mode include the below css\n\n```python\nimport '@terminusdb/terminusdb-documents-ui/dist/css/terminusdb__darkly.css'\n```\n\nlight mode\n\n```python\nimport '@terminusdb/terminusdb-documents-ui/dist/css/terminusdb__light.css'\n```\n\n### The FrameViewer object\n\nUse the `FrameViewer` object of `terminusdb-documents-ui` to configure and display your forms. `FrameViewer` supports several parameters and functions.\n\n#### FrameViewer parameters\n\n**Parameter**\n\n**Description**\n\n`frame`\n\nThe JSON frame structure of a TerminusDB schema.\n\n`mode`\n\nForm modes - `Create`, `Edit`, or `View`.\n\n`formData`\n\nThe data entered into or provided for a form. Specify `formData` in `Edit` and `View` modes to display data.\n\n`type`\n\ndocument type of interest to be displayed in form.\n\n`language`\n\nlanguage code parameters to support a wide variety of languages in UI as defined in schema\n\n#### FrameViewer functions\n\n**Function**\n\n**Description**\n\n`onSubmit`\n\nA customizable JavaScrpt (JS) callback function to process data submitted via a form.\n\n`onSelect`\n\nJS callback function to retrieve the selected values from a `Select` component.\n\n`onTraverse`\n\nReturn the ID of a document on a click event. Useful for binding an `onClick` event with a document.\n\n#### FrameViewer Mandatory props\n\nprops\n\nMandatory\n\nframe\n\ntrue\n\ntype\n\ntrue\n\nmode\n\ntrue\n\nformData\n\nformData has to be mandatory in Edit or View mode. If nothing to display then pass empty json {}\n\n### FrameViewer common usage\n\nA common use of `terminusdb-documents-ui` is as follows:\n\n1.  Set up a Webpack.\n2.  Use the [TerminusDB JavaScript client](/docs/javascript/).\n3.  Use the client function `getSchemaFrame` to retrieve frame data from a TerminusDB database.\n4.  Set custom values and behaviour for `FrameViewer` parameters and functions as required.\n5.  Call `FrameViewer` to display frame data in the specified form.\n\n### Get schema frame data from a database\n\nA basic example below to get started with a TerminusDB JavaScript client.\n\n```python\nconst TerminusDBClient = require(\"@terminusdb/terminusdb-client\");\nimport '@terminusdb/terminusdb-documents-ui/dist/css/terminusdb__darkly.css'\nimport {FrameViewer} from '@terminusdb/terminusdb-documents-ui'\n\ntry {\n    let type = \"Person\" // type is the a document class of interest\n    let frames = await woqlClient.getSchemaFrame(type, woqlClient.db())\n    console.log(`Frames generated from ${woqlClient.db()}`, frames)\n} catch(err) {\n    console.log(\"Error fetching frames\", err)\n}\n```\n\n### FrameViewer usage step-by-step\n\nUse three simple steps - input, configure, and output:\n\n[Step 1. Create frame data](#step1createframedata)\n\n[Step 2. Configure properties and functions](#step2configurepropertiesandfunctions)\n\n[Step 3. Generate the form](#step3generatetheform)\n\n#### Step 1. Create frame data\n\nFor simplicity, all examples use the `frames` definition below consisting of one document `Person`.\n\n```javascript\nlet frames = {\n   \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n   },\n   \"Person\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"DOB\": \"xsd:dateTime\",\n        \"active\": \"xsd:boolean\",\n        \"age\": \"xsd:decimal\",\n        \"name\": \"xsd:string\"\n    }\n}\n\n// The document to display the frame for. \n\nlet type = \"Person\"\n```\n\n#### Step 2. Configure properties and functions\n\nThe example below generates an empty frame for the attributes of the `Person` document. The callback function `handleSubmit` displays any user-entered form data. Add functionality to `handleSubmit` to suit your requirements.\n\n```javascript\n// Mode \"Create\" displays an empty frame.\n\nlet mode = \"Create\"\n\n// Callback to display form data.\n\nfunction handleSubmit(data) {\n    console.log(\"Form data: \", data)\n}\n```\n\n#### Step 3. Generate the form\n\nGenerate the form using the properties and functions defined in the previous step.\n\n```\n// Generate the form.\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}\n    onSubmit = {handleSubmit}/>\n```\n\n### FrameViewer modes\n\nThe `FrameViewer` object supports three modes:\n\n*   [Create](#createmode)\n*   [Edit](#editmode)\n*   [View](#viewmode)\n\n#### Create mode\n\nThe `Create` mode displays an empty frame as demonstrated in the previous example.\n\n#### Edit mode\n\nThe `Edit` mode displays populated and empty frames. This mode requires the `formData` parameter.\n\n```javascript\n// Mode \"Edit\" displays a frame with editable data.\n\nlet mode = \"Edit\"\n\n// Add form data to populate the frame.\n\nlet formData = {\n    \"@id\": \"Person/John%20Doe\",\n    \"@type\": \"Person\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    age: \"17\",\n    active: true,\n    DOB: \"2022-03-31T10:01:11.000Z\"\n}\n\n// Callback to display form data.\n\nfunction handleSubmit(data) {\n    console.log(\"Form data: \", data)\n}\n\n// Generate the form with formData paramter.\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}\n    formData = {formData}\n    onSubmit = {handleSubmit}/>\n```\n\n#### View Mode\n\nThe `View` mode displays populated frames for view-only - the **Submit** button is automatically hidden. If the `formData` parameter is omitted, an empty form is displayed.\n\n```javascript\n// Mode \"View\" displays populated frames.\n\nlet mode = \"View\"\n\n// Add form data to populate the frame.\n\nlet formData = {\n    \"@id\": \"Person/John%20Doe\",\n    \"@type\": \"Person\",\n    first_name: \"John\",\n    last_name: \"Doe\",\n    age: \"17\",\n    active: true,\n    DOB: \"2022-03-31T10:01:11.000Z\"\n}\n\n// Callback to display form data.\n\nfunction handleSubmit(data) {\n    console.log(\"Form data: \", data)\n}\n\n// Generate the form with formData paramter.\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}\n    formData = {formData}\n    onSubmit = {handleSubmit}/>\n```\n\n## Document UI SDK Examples\n\n[Document UI SDK Playground](https://documents-ui-playground.terminusdb.com/) - An interactive example of document properties in add, edit, and view modes with example schema and code.\n\n[Lego Data Product UI CodeSandbox Example](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-examples/lego-dataproduct-npm)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "How to use the TerminusCMS Document UI SDK",
      "description": "How to use the TerminusCMS Document UI SDK",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Documents UI SDK Data Types"
    },
    "slug": "document-ui-sdk-data-types",
    "body": {
      "@type": "Body",
      "value": "The TerminusDB documents user interface generates forms representing the properties or fields of document/s in your schema. For data entry, each field is one of several data types and is mandatory by default. Schema definitions enable the linking of documents and the specification of sets.\n\n[**Click here to find out how to get started with the Document UI SDK**](/docs/document-ui-sdk/)\n\n## Demo\n\nTake a look at the [**Document UI SDK Playground**](https://documents-ui-playground.terminusdb.com) to view the `<FrameViewier/>` demo in Create, edit or view mode.\n\n## Data types\n\n### Basic data types\n\nThe table below lists the basic data types supported and their specifications.\n\n**Data type**\n\n**Declaration**\n\n**Example**\n\nBoolean\n\n`\"xsd:boolean\"`\n\n`\"active\": \"xsd:boolean\"`\n\nDecimal\n\n`\"xsd:decimal\"`\n\n`\"age\": \"xsd:decimal\"`\n\nEnum\n\n`\"@type: \"Enum\"`\n\n`\"@values\": [\"red\", \"blue\", \"yellow\", \"green\"]`\n\nInteger\n\n`\"xsd:integer\"`\n\n`\"age\": \"xsd:integer\"`\n\nDecimal\n\n`\"xsd:decimal\"`\n\n`\"age\": \"xsd:decimal\"`\n\nString\n\n`\"xsd:string\"`\n\n`\"name\": \"xsd:string\"`\n\nTemporal\n\n`\"xsd:dateTime\"`\n\n`\"DOB\": \"xsd:dateTime\"`\n\n### Data value optionality\n\nIf a property in the Form is displayed with a (Required) tab, that means the property is mandatory & has to be filled in order to submit the form. To define a property as optional, use the `\"@type\": \"Optional\"` declaration meaning the property is optional.\n\nA property can also be defined as an array in the following ways -\n\n`\"@type\": \"Set\"` - property can hold multiple values in an unordered fashion & can be optional\n\n`\"@type\": \"List\"` - property can hold multiple values in an ordered fashion & requires at least one entry\n\n### An example of all basic types\n\n**Enum**\n\nThe `\"Enum\"` data type in the example below specifies the colors a person likes - `\"@id\": \"Colors`, `\"Person\"`, `\"likes\"`. This is rendered as a dropdown menu with the colors specified in the `\"@values\"` list.\n\n**Optional**\n\nThe `\"age\"` of a `\"Person\"` is declared `\"Optional\"`\n\n```javascript\nlet frames =  {\n    \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    \"Person\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"DOB\": \"xsd:dateTime\",\n        \"active\": \"xsd:boolean\",\n        \"age\": {\n            \"@class\": \"xsd:decimal\",\n            \"@type\": \"Optional\"\n        },\n        \"name\": \"xsd:string\",\n        \"likes\": {\n            \"@id\": \"Colors\",\n            \"@type\": \"Enum\",\n            \"@values\": [\n                \"red\",\n                \"blue\",\n                \"yellow\",\n                \"green\"\n            ]\n        }\n    }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\n## Link Properties\n\nLink properties enable links to other document or subdocument classes and are displayed as `Select` components.\n\n### Link Properties Example\n\nThe example below demonstrates:\n\n*   The property `work_as` linked to document class `Job`\n*   The property `lives_in` linked to a subdocument class `Address`\n\n```javascript\nlet frames = {\n   \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"@context\"\n   },\n   \"Person\": {\n        \"@key\": {\n        \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"works_as\": \"Job\", // Link to subdocument Job\n        \"lives_in\": \"Address\" // Link to subdocument Address\n    },\n    \"Job\": {\n        \"@key\": {\n        \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"title\": \"xsd:string\"\n    },\n    \"Address\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@subdocument\": [],\n        \"@type\": \"Class\",\n        \"Address Line 1\": \"xsd:string\",\n        \"Code\": \"xsd:decimal\",\n        \"Country\": \"xsd:string\"\n    }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\n## Set properties\n\nA set specifies an **unordered set** of values of a class or data type.\n\n### Set property example\n\nIn the example below, the document `Person` consists of several nicknames - property `\"nickName\"` of `\"@type\": \"Set\"`. A set consists of zero, one or multiple items.\n\n```javascript\nlet frames = {\n    \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    \"Person\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"name\": \"xsd:string\",\n        \"nickName\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Set\"\n        }\n    }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\n### Document Class Set Example\n\nIn the example below, a `Person` has a property `works_as` defined as a set that links to the document `Job`, representing a person with multiple jobs.\n\n```javascript\nlet frames = {\n    \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    \"Person\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"name\": \"xsd:string\",\n        \"works_as\": {\n            \"@class\": \"Job\",\n            \"@type\": \"Set\"\n        }\n   },\n   \"Job\": {\n       \"@key\": {\n          \"@type\": \"Random\"\n       },\n       \"@type\": \"Class\",\n       \"title\": \"xsd:string\"\n    }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\n### Subdocument Class Set Example\n\nIn the example below, a `Person` has a property `lived` defined as a set that links to the subdocument `Address`, representing a person's address history.\n\n```javascript\nlet frames = {\n    \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    \"Person\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"name\": \"xsd:string\",\n        \"lived\": {\n            \"@class\": {\n                \"@class\": \"Address\",\n                \"@subdocument\": []\n            },\n            \"@type\": \"Set\"\n        }\n    },\n    \"Address\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@subdocument\": [],\n        \"@type\": \"Class\",\n        \"Address Line 1\": \"xsd:string\",\n        \"Code\": \"xsd:decimal\",\n        \"Country\": \"xsd:string\"\n     }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\n## List Properties\n\nA list specifies an **ordered collection** of values of a class or data type. An ordered collection means values are displayed in the order they are entered in the form.\n\n### List property example\n\nIn the example below, a `Person` has two properties, `ordered_property` (a string data type) and `has_task` (a subdocument of type `\"List\"`.)\n\n```javascript\nlet frames = {\n    \"@context\": {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    \"Person\": {\n        \"@key\": {\n        \"@type\": \"Random\"\n        },\n        \"@type\": \"Class\",\n        \"ordered_property\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"List\"\n        },\n        \"has_task\": {\n            \"@class\": \"Tasks\",\n            \"@type\": \"List\"\n        }\n    },\n    \"Tasks\": {\n        \"@key\": {\n            \"@type\": \"Random\"\n        },\n        \"@subdocument\": [],\n        \"@type\": \"Class\",\n        \"Address Line 1\": \"xsd:string\",\n        \"Code\": \"xsd:decimal\",\n        \"Country\": \"xsd:string\"\n    }\n}\n\nlet type = \"Person\"\nlet mode = \"Create\"\n\n// call FrameViewer\nreturn <FrameViewer\n    frame = {frames}\n    type = {type}\n    mode = {mode}/>\n```\n\nFor more information on data types, take a look at the individual types in more details:\n\n*   [Array](/docs/array/)\n*   [Choice Document](/docs/choice-document/)\n*   [Choice Sub Document](/docs/choice-subdocuments/)\n*   [List](/docs/list/)\n*   [Mandatory](/docs/mandatory/)\n*   [One Of](/docs/oneof/)\n*   [Optional](/docs/optional/)\n*   [Order By](/docs/orderby/)\n*   [Render As](/docs/render-as/)\n*   [Set](/docs/set/)\n*   [sysJSON](/docs/sysjson/)\n\n## Document UI SDK Examples\n\n[Document UI SDK Playground](https://documents-ui-playground.terminusdb.com/) - An interactive example of document properties in add, edit, and view modes with example schema and code.\n\n[Lego Data Product UI CodeSandbox Example](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-examples/lego-dataproduct-npm)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Documents UI SDK Data Types",
      "description": "Understand the different data types to build data driven user interfaces",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Array"
    },
    "slug": "array",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `ArrayExamplePerson` with array fields in Create/ Edit or View mode. If a field is described as array it means the field can have more than one value to it in an ordered fashion. The field can also be considered as an optional field meaning it can be empty or filled.\n\n## Demo\n\nTake a look at the **[](https://documents-ui-playground.terminusdb.com/Array)**[Demo](https://documents-ui-playground.terminusdb.com/Array) to view `<FrameViewier/>` with Array properties in Create, edit or view mode.\n\n## Frame\n\nThe below frame consists of an ArrayExamplePerson document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Address\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"An Address\",\n          \"@label\": \"Address\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"Address Line one\",\n              \"@label\": \"Address Line 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"A Country \",\n              \"@label\": \"Country\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"A valid Postal Code\",\n              \"@label\": \"Zip Code\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მისამართი\",\n          \"@label\": \"მისამართი\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"მისამართის ხაზი პირველი\",\n              \"@label\": \"მისამართის ხაზი 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"Ქვეყანა\",\n              \"@label\": \"ქვეყანა\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"მოქმედი საფოსტო კოდი\",\n              \"@label\": \"Ზიპ კოდი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"AddressLine1\": \"xsd:string\",\n      \"City\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Country\": \"xsd:string\",\n      \"postalCode\": \"xsd:string\"\n    },\n    \"ArrayExamplePerson\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"hangs_out_at\": {\n        \"@class\": {\n          \"@class\": \"Address\",\n          \"@subdocument\": []\n        },\n        \"@type\": \"List\"\n      },\n      \"likes_color\": {\n        \"@class\": {\n          \"@id\": \"Colors\",\n          \"@type\": \"Enum\",\n          \"@values\": [\n            \"Red\",\n            \"Blue\",\n            \"Yellow\",\n            \"Green\"\n          ]\n        },\n        \"@type\": \"List\"\n      },\n      \"to_do\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"List\"\n      }\n    }\n  }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"ArrayExamplePerson\"}/>           // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"ArrayExamplePerson/c92d269b0dce719299bf86fc19f2065937ec4ef82d8a2a53702867a326d6144b\",\n    \"@type\": \"OrderedPerson\",\n    \"hangs_out_at\" : [\n        {\n            \"@id\": \"ArrayExamplePerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/4f4fdae34ab4fa3b6297750917503a7137f75dc11589792de707e7a6d3502db3\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"anywhere\",\n            \"City\": \"Nice\", \n            \"Country\": \"France\",\n            \"postalCode\": \"FR27836\"\n        },\n        {\n            \"@id\": \"ArrayExamplePerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/7aaeeb6b983710a0adbc75de8f7d8104278df427124beadc6644b35b9d6c30af\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"somewhere\",\n            \"City\": \"Berlin\", \n            \"Country\": \"Germany\",\n            \"postalCode\": \"GER02398\"\n        }\n    ],\n    \"likes_color\": [\n        \"Blue\",\n        \"Green\",\n        \"Red\"\n    ],\n    \"to_do\": [\n        \"First Thing\",\n        \"Second Thing\",\n        \"Third Thing\"\n    ]\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"ArrayExamplePerson\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Array fields in the document UI",
      "description": "Examples of how array fields in the document UI ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Choice Document"
    },
    "slug": "choice-document",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `Guy` with choice document fields in Create/ Edit or View mode.\n\nIn this example `Guy` has a mandatory property called `favorite_group` with the choice of documents called Art, Dance or Music, an optional `\"second_favorite_group\"` property also with the choice Art, Dance or Music, a set `member_of` property with the same choices, and a list `attends_group_in_order` property with the above same choices, in an ordered fashion.\n\n## Demo\n\nTake a look at the **[](https://documents-ui-playground.terminusdb.com/Choice%20Documents)**[Demo Playground](https://documents-ui-playground.terminusdb.com/Choice%20Documents) to view `<FrameViewier/>` with Choice properties in Create, edit or view mode.\n\nThe below Frames show the definition of Art, Dance or Music which are other document classes.\n\n## Frame\n\nThe below Frame consists of the `Guy` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Guy\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\", \n      \"attends_group_in_order\": {\n        \"@class\": \"Group\",\n        \"@type\": \"Set\"\n      },\n      \"favorite_group\": \"Group\",\n      \"member_of\": {\n          \"@class\": \"Group\",\n          \"@type\": \"Set\"\n      },\n      \"second_favorite_group\": {\n          \"@class\": \"Group\",\n          \"@type\": \"Optional\"\n      }\n    },\n    \"Dance\": {\n      \"@documentation\": [\n        {\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"Max number of people in group\",\n              \"@label\": \"Capacity\"\n            },\n            \"name\": {\n              \"@comment\": \"Title of the group\",\n              \"@label\": \"Name\"\n            }\n          }\n        },\n        {\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"ადამიანების მაქსიმალური რაოდენობა ჯგუფში\",\n              \"@label\": \"ტევადობა\"\n            },\n            \"name\": {\n              \"@comment\": \"ჯგუფის სათაური\",\n              \"@label\": \"სახელი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@fields\": [\n          \"name\"\n        ],\n        \"@type\": \"Lexical\"\n      },\n      \"@type\": \"Class\",\n      \"capacity\": \"xsd:decimal\",\n      \"name\": \"xsd:string\"\n    },\n    \"Art\": {\n      \"@documentation\": [\n        {\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"Max number of people in group\",\n              \"@label\": \"Capacity\"\n            },\n            \"name\": {\n              \"@comment\": \"Title of the group\",\n              \"@label\": \"Name\"\n            }\n          }\n        },\n        {\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"ადამიანების მაქსიმალური რაოდენობა ჯგუფში\",\n              \"@label\": \"ტევადობა\"\n            },\n            \"name\": {\n              \"@comment\": \"ჯგუფის სათაური\",\n              \"@label\": \"სახელი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@fields\": [\n          \"name\"\n        ],\n        \"@type\": \"Lexical\"\n      },\n      \"@type\": \"Class\",\n      \"capacity\": \"xsd:decimal\",\n      \"name\": \"xsd:string\"\n    },\n    \"Music\": {\n      \"@documentation\": [\n        {\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"Max number of people in group\",\n              \"@label\": \"Capacity\"\n            },\n            \"name\": {\n              \"@comment\": \"Title of the group\",\n              \"@label\": \"Name\"\n            }\n          }\n        },\n        {\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"capacity\": {\n              \"@comment\": \"ადამიანების მაქსიმალური რაოდენობა ჯგუფში\",\n              \"@label\": \"ტევადობა\"\n            },\n            \"name\": {\n              \"@comment\": \"ჯგუფის სათაური\",\n              \"@label\": \"სახელი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@fields\": [\n          \"name\"\n        ],\n        \"@type\": \"Lexical\"\n      },\n      \"@type\": \"Class\",\n      \"capacity\": \"xsd:decimal\",\n      \"name\": \"xsd:string\"\n    }\n  }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"Guy\"}/>           // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"Guy/4489199036b83dbf79a6e7527a1594fbd416d11b9dde2f8a67fe6fa495dae433\",\n    \"@type\": \"Guy\",\n    \"favorite_group\": \"Art/Charcoal%20Art%20Group\",\n    \"attends_group_in_order\": [\n        \"Dance/Dance%20Everyday\",\n      \"Art/Pastel%20Art%20Group\",\n      \"Music/Music%2220Pop\"\n    ],\n    \"member_of\": [\n      \"Art/Pastel%20Art%20Group\",\n      \"Dance/Dance%20Everyday\"\n    ],\n    \"second_favorite_group\": \"Dance/Dance%20Everyday\",\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"Guy\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Choice Document in the Document UI",
      "description": "How document choice works in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Choice Sub-Documents"
    },
    "slug": "choice-subdocuments",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document called `Student` with choice subdocument fields in Create/ Edit or View mode.\n\n`Student` has a mandatory `favorite_subject` property with the choices of Zoology, Botony or Maths, an optional `\"second_favorite_subject\"` property with the same document choices, a set `studied` property with the above choices, and a list `study_time_table` property with the same choices in an ordered fashion.\n\n## Demo\n\nTake a look at the **[](https://documents-ui-playground.terminusdb.com/Choice%20SubDocuments)**[Demo](https://documents-ui-playground.terminusdb.com/Choice%20SubDocuments) to view `<FrameViewier/>` with Choice subdocuments in Create, edit or view mode.\n\nThe below Frames show the definition of Zoology, Botony or Maths which are subdocuments.\n\n## Frame\n\nThe frame below consists of a `Student` document -\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Student\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"favorite_subject\": [\n        {\n          \"@class\": \"Zoology\",\n          \"@subdocument\": []\n        },\n        {\n          \"@class\": \"Botony\",\n          \"@subdocument\": []\n        },\n        {\n          \"@class\": \"Maths\",\n          \"@subdocument\": []\n        }\n      ],\n      \"second_favorite_subject\": {\n        \"@class\": [\n          {\n            \"@class\": \"Zoology\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Botony\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Maths\",\n            \"@subdocument\": []\n          }\n        ],\n        \"@type\": \"Optional\"\n      },\n      \"studied\": {\n        \"@class\": [\n          {\n            \"@class\": \"Zoology\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Botony\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Maths\",\n            \"@subdocument\": []\n          }\n        ],\n        \"@type\": \"Set\"\n      },\n      \"study_time_table\": {\n        \"@class\": [\n          {\n            \"@class\": \"Zoology\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Botony\",\n            \"@subdocument\": []\n          },\n          {\n            \"@class\": \"Maths\",\n            \"@subdocument\": []\n          }\n        ],\n        \"@type\": \"List\"\n      }\n    },\n    \"Zoology\": {\n      \"@documentation\": [\n        {\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"Number of Classes Attended\",\n              \"@label\": \"Classes Attended\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"Course Start Date\",\n              \"@label\": \"Start Date\"\n            }\n          }\n        },\n        {\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"კლასების რაოდენობა\",\n              \"@label\": \"კლასები დაესწრო\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"კურსის დაწყების თარიღი\",\n              \"@label\": \"Დაწყების თარიღი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"Grade\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Notes\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Number_of_classes_attended\": {\n        \"@class\": \"xsd:integer\",\n        \"@type\": \"Optional\"\n      },\n      \"course_start_date\": {\n        \"@class\": \"xsd:dateTime\",\n        \"@type\": \"Optional\"\n      }\n    }\n    \"Botony\": {\n      \"@documentation\": [\n        {\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"Number of Classes Attended\",\n              \"@label\": \"Classes Attended\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"Course Start Date\",\n              \"@label\": \"Start Date\"\n            }\n          }\n        },\n        {\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"კლასების რაოდენობა\",\n              \"@label\": \"კლასები დაესწრო\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"კურსის დაწყების თარიღი\",\n              \"@label\": \"Დაწყების თარიღი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"Grade\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Number_of_classes_attended\": {\n        \"@class\": \"xsd:integer\",\n        \"@type\": \"Optional\"\n      },\n      \"course_start_date\": {\n        \"@class\": \"xsd:dateTime\",\n        \"@type\": \"Optional\"\n      },\n      \"number_of_assignments\": {\n        \"@class\": \"xsd:integer\",\n        \"@type\": \"Optional\"\n      }\n    },\n    \"Maths\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"Maths\",\n          \"@label\": \"Maths\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"Number of Classes Attended\",\n              \"@label\": \"Classes Attended\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"Course Start Date\",\n              \"@label\": \"Start Date\"\n            },\n            \"level\": {\n              \"@comment\": \"Math level\",\n              \"@label\": \"Level\"\n            },\n            \"love_maths\": {\n              \"@comment\": \"a choice to love maths\",\n              \"@label\": \"Do you like Maths?\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მათემატიკა\",\n          \"@label\": \"მათემატიკა\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"Number_of_classes_attended\": {\n              \"@comment\": \"კლასების რაოდენობა\",\n              \"@label\": \"კლასები დაესწრო\"\n            },\n            \"course_start_date\": {\n              \"@comment\": \"კურსის დაწყების თარიღი\",\n              \"@label\": \"Დაწყების თარიღი\"\n            },\n            \"level\": {\n              \"@comment\": \"მათემატიკის დონე\",\n              \"@label\": \"დონე\"\n            },\n            \"love_maths\": {\n              \"@comment\": \"არჩევანი გიყვარდეს მათემატიკა\",\n              \"@label\": \"მოგწონთ მათემატიკა?\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"Number_of_classes_attended\": {\n        \"@class\": \"xsd:integer\",\n        \"@type\": \"Optional\"\n      },\n      \"course_start_date\": {\n        \"@class\": \"xsd:dateTime\",\n        \"@type\": \"Optional\"\n      },\n      \"level\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"love_maths\": {\n        \"@class\": \"xsd:boolean\",\n        \"@type\": \"Optional\"\n      }\n    }\n  }\n```\n\n## Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"Student\"}/>           // type of document \n```\n\n## Edit & View\n\nNote - make sure the document is filled in View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51\",\n    \"@type\": \"Student\",\n    \"favorite_subject\": {\n        \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/favorite_subject/Botony/aef9f22fe04ece720d19f6630edcad27f85e546810a907e4724ee0b57aba4b52\",\n        \"@type\": \"Botony\",\n        \"Grade\": \"A\",\n        \"Number_of_classes_attended\": 4,\n        \"course_start_date\": \"2022-08-17T09:21:09Z\", \n        \"number_of_assignments\": 5\n    },\n    \"second_favorite_subject\": {\n        \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/second_favorite_subject/Zoology/2f0ab12e837a6d1bdbb15b41e556940b288167e7909061e1b32e56d91005431b\",\n        \"@type\": \"Zoology\",\n        \"Grade\": \"A\",\n        \"Notes\": \"loves zoology\",\n        \"Number_of_classes_attended\": 5,\n        \"course_start_date\": \"2022-08-17T09:21:20Z\"\n    },\n    \"studied\": [\n       {\n            \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/studied/Botony/cc7e311138c8244f9ba043ad5f96e846c6a0961d9190210ee3f297f96976fd00\",\n            \"@type\": \"Botony\",\n            \"Grade\": \"A\",\n            \"Number_of_classes_attended\": 67,\n            \"course_start_date\": \"2022-08-17T09:21:53Z\",\n            \"number_of_assignments\": 23\n       },\n       {\n            \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/studied/Maths/666ce31233a834b895f4c42e72b0b5250188ea4dcf2f2bb8bc0dc32e710ceb26\",\n            \"@type\": \"Maths\",\n            \"Number_of_classes_attended\": 45,\n            \"course_start_date\": \"2022-08-17T09:21:37Z\",\n            \"level\": \"Medium\",\n            \"love_maths\": true\n       }\n    ],\n    \"study_time_table\": [\n       {\n            \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/study_time_table/0/Zoology/d0cade9042e0baee8e0b91a8ed0e85ec09db40084d0ff56532d92a454ff67c57\",\n            \"@type\": \"Zoology\",\n            \"Grade\": \"A\",\n            \"Notes\": \"Best student\",\n            \"Number_of_classes_attended\": 5,\n            \"course_start_date\": \"2022-08-17T09:22:06Z\"\n       },\n       {\n            \"@id\": \"Student/6bf39891b3aaab89771cecdd88a7771dad8c613cfc0530d07bb79bdde6d55d51/study_time_table/1/Botony/be10b1f3c70c1fe28eb52ad3113352356ae53d3375436ae6719abe019dc28f76\",\n            \"@type\": \"Botony\",\n            \"Grade\": \"B\",\n            \"Number_of_classes_attended\": 54,\n            \"course_start_date\": \"2022-08-17T09:22:32Z\",\n            \"number_of_assignments\": 34\n       }\n    ]\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"Student\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB Document UI SDK - Using Choice Subdocuments",
      "description": "A guide showing how to use multiple choice subdocuments with the TerminusDB document UI SDK",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "List"
    },
    "slug": "list",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document called `OrderedPerson` with list fields in Create/ Edit and View mode. If a field is described as a List it means the field can have one or more values and is ordered. The field must have at least one entry.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/List) to view the `<FrameViewier/>` with list properties in Create, Edit and View mode.\n\n## Frame\n\nThe below frame consists of an `OrderedPerson` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Address\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"An Address\",\n          \"@label\": \"Address\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"Address Line one\",\n              \"@label\": \"Address Line 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"A Country \",\n              \"@label\": \"Country\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"A valid Postal Code\",\n              \"@label\": \"Zip Code\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მისამართი\",\n          \"@label\": \"მისამართი\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"მისამართის ხაზი პირველი\",\n              \"@label\": \"მისამართის ხაზი 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"Ქვეყანა\",\n              \"@label\": \"ქვეყანა\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"მოქმედი საფოსტო კოდი\",\n              \"@label\": \"Ზიპ კოდი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"AddressLine1\": \"xsd:string\",\n      \"City\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Country\": \"xsd:string\",\n      \"postalCode\": \"xsd:string\"\n    },\n    \"OrderedPerson\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"hangs_out_at\": {\n        \"@class\": {\n          \"@class\": \"Address\",\n          \"@subdocument\": []\n        },\n        \"@type\": \"List\"\n      },\n      \"likes_color\": {\n        \"@class\": {\n          \"@id\": \"Colors\",\n          \"@type\": \"Enum\",\n          \"@values\": [\n            \"Red\",\n            \"Blue\",\n            \"Yellow\",\n            \"Green\"\n          ]\n        },\n        \"@type\": \"List\"\n      },\n      \"to_do\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"List\"\n      }\n    }\n  }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"OrderedPerson\"}/>           // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"OrderedPerson/c92d269b0dce719299bf86fc19f2065937ec4ef82d8a2a53702867a326d6144b\",\n    \"@type\": \"OrderedPerson\",\n    \"hangs_out_at\" : [\n        {\n            \"@id\": \"OrderedPerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/4f4fdae34ab4fa3b6297750917503a7137f75dc11589792de707e7a6d3502db3\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"anywhere\",\n            \"City\": \"Nice\", \n            \"Country\": \"France\",\n            \"postalCode\": \"FR27836\"\n        },\n        {\n            \"@id\": \"OrderedPerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/7aaeeb6b983710a0adbc75de8f7d8104278df427124beadc6644b35b9d6c30af\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"somewhere\",\n            \"City\": \"Berlin\", \n            \"Country\": \"Germany\",\n            \"postalCode\": \"GER02398\"\n        }\n    ],\n    \"likes_color\": [\n        \"Blue\",\n        \"Green\",\n        \"Red\"\n    ],\n    \"to_do\": [\n        \"First Thing\",\n        \"Second Thing\",\n        \"Third Thing\"\n    ]\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"OrderedPerson\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "List Properties in the Document UI",
      "description": "How list properties work in the document UI software development kit.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Mandatory"
    },
    "slug": "mandatory",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document called `Person` with mandatory fields in Create/ Edit and View mode. A required tag will appear against every mandatory field.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/Mandatory) to view the `<FrameViewier/>` with mandatory properties in Create, Edit and View mode.\n\n## Frame\n\nThe below frame consists of a `Person` document with mandatory fields -\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Address\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"An Address\",\n          \"@label\": \"Address\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"Address Line one\",\n              \"@label\": \"Address Line 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"A Country \",\n              \"@label\": \"Country\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"A valid Postal Code\",\n              \"@label\": \"Zip Code\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მისამართი\",\n          \"@label\": \"მისამართი\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"მისამართის ხაზი პირველი\",\n              \"@label\": \"მისამართის ხაზი 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"Ქვეყანა\",\n              \"@label\": \"ქვეყანა\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"მოქმედი საფოსტო კოდი\",\n              \"@label\": \"Ზიპ კოდი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"AddressLine1\": \"xsd:string\",\n      \"City\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Country\": \"xsd:string\",\n      \"postalCode\": \"xsd:string\"\n    },\n    \"Person\": {\n      \"@documentation\": {\n        \"@comment\": \"\",\n        \"@properties\": {\n          \"above18\": \"18 plus\",\n          \"permanentAddress\": \"Permanent Address\"\n        }\n      },\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"Birthday\": \"xsd:dateTime\",\n      \"PhoneNumber\": \"xsd:decimal\",\n      \"Today\": \"xsd:dateTime\",\n      \"above18\": \"xsd:boolean\",\n      \"age\": \"xsd:decimal\",\n      \"email\": \"xsd:string\",\n      \"name\": \"xsd:string\",\n      \"permanentAddress\": {\n        \"@class\": \"Address\",\n        \"@subdocument\": []\n      },\n      \"website\": \"xsd:string\"\n    }\n    }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"Person\"}/>           // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\n  let data = {\n    \"@id\": \"Person/72a8a2778bafbc4290f59ca851e0307c6918f7205207d93ac1b2a1f796a94587\",\n    \"@type\": \"Person\",\n    \"Birthday\": \"2022-08-15T12:59:46Z\",\n    \"PhoneNumber\": 353912839283123140,\n    \"Today\": \"2022-08-15T12:59:50Z\",\n    \"above18\": true,\n    \"age\": 22,\n    \"email\": \"rack@gmail.com\",\n    \"name\": \"John Rock\",\n    \"permanentAddress\": {\n      \"@id\": \"Person/72a8a2778bafbc4290f59ca851e0307c6918f7205207d93ac1b2a1f796a94587/permanentAddress/Address/5879ec85b65bb0caaa03f48e99073a9d4302c31ec3c3a382889a12980899e95f\",\n      \"@type\": \"Address\",\n      \"AddressLine1\": \"somewhere in Europe\",\n      \"Country\": \"New Zeeland\",\n      \"City\": \"City\",\n      \"postalCode\": \"NZ29038\"\n    },\n    \"website\": \"rack@rocking.com\"\n  }\n\n  return <FrameViewer\n      frame={frame}\n      mode={\"View\"}\n      formData={data}\n      type={\"Person\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Mandatory Properties in the Document UI",
      "description": "How mandatory properties work in the document user interface.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "One Of"
    },
    "slug": "oneof",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document called `Graduate` with a one of field in Create/ Edit and View mode. The value of the @oneOf field is a set, so can be any number of documents all of which have mutually disjointed properties, but which can coexist.\n\nIn this example `Graduate` has a property `scored` that points to `Grades`. `Grades` is defined as @oneOf that is an array of documents which can take any choice within. In this example, `Grades` can take any choice from `grade`, `marks` or `report`.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/OneOfs) to view the `<FrameViewier/>` with the OneOfs properties in Create, Edit and View mode.\n\n## Frame\n\nThis frame consists of a Graduate document -\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Grades\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"Grades of a person\",\n          \"@label\": \"Grades\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"grade\": {\n              \"@comment\": \"Grades achieved\",\n              \"@label\": \"Grade\"\n            },\n            \"marks\": {\n              \"@comment\": \"Marks achieved\",\n              \"@label\": \"Marks\"\n            },\n            \"report\": {\n              \"@comment\": \"Report Card\",\n              \"@label\": \"Report\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"პიროვნების კლასები\",\n          \"@label\": \"შეფასებები\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"grade\": {\n              \"@comment\": \"მიღწეული ქულები\",\n              \"@label\": \"შეფასება\"\n            },\n            \"marks\": {\n              \"@comment\": \"მიღწეული ნიშნები\",\n              \"@label\": \"ნიშნები\"\n            },\n            \"report\": {\n              \"@comment\": \"მოსწრების ფურცელი\",\n              \"@label\": \"ანგარიში\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@oneOf\": [\n        {\n          \"grade\": \"xsd:string\",\n          \"marks\": \"xsd:decimal\",\n          \"report\": {\n            \"@class\": \"GradeReport\",\n            \"@subdocument\": []\n          }\n        }\n      ],\n      \"@subdocument\": [],\n      \"@type\": \"Class\"\n    },\n    \"Graduate\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"scored\": {\n        \"@class\": {\n          \"@class\": \"Grades\",\n          \"@subdocument\": []\n        },\n        \"@type\": \"Optional\"\n      }\n    }\n  }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"Graduate\"}/>           // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"Graduate/efb4f89c825dd2c6404b5998b0d170b1df9a250103d7556833c3017e2107da23\",\n    \"@type\": \"Graduate\",\n    \"scored\": {\n      \"@id\": \"Graduate/efb4f89c825dd2c6404b5998b0d170b1df9a250103d7556833c3017e2107da23/scored/Grades/8079b8089b18a97dab9d4af3bffd496f744841bf7b72caaa4a2a2f189fc496b7\",\n      \"@type\": \"Grades\",\n      \"report\": {\n        \"@id\": \"Graduate/efb4f89c825dd2c6404b5998b0d170b1df9a250103d7556833c3017e2107da23/scored/Graduate/efb4f89c825dd2c6404b5998b0d170b1df9a250103d7556833c3017e2107da23/scored/Grades/8079b8089b18a97dab9d4af3bffd496f744841bf7b72caaa4a2a2f189fc496b7/report/GradeReport/d947ef4e4a261ef6e469b9e24c944c58405e49952fe45b8f50852b650481aec1\",\n        \"@type\": \"GradeReport\",\n        \"comments\": \"Outstanding \",\n        \"score\": \"Outstanding\"\n      }\n    }\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"Graduate\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "One Of Documents in the Document UI",
      "description": "An example of how one of properties work in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Optional Properties"
    },
    "slug": "optional",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `Person_Optional` with optional fields in Create/ Edit and View mode.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/Optional)\\*\\* to view `<FrameViewier/>` with Optional properties in Create, Edit and View mode.\n\n## Frame\n\nThis frame consists of a `Person` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Address\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"An Address\",\n          \"@label\": \"Address\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"Address Line one\",\n              \"@label\": \"Address Line 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"A Country \",\n              \"@label\": \"Country\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"A valid Postal Code\",\n              \"@label\": \"Zip Code\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მისამართი\",\n          \"@label\": \"მისამართი\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"მისამართის ხაზი პირველი\",\n              \"@label\": \"მისამართის ხაზი 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"Ქვეყანა\",\n              \"@label\": \"ქვეყანა\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"მოქმედი საფოსტო კოდი\",\n              \"@label\": \"Ზიპ კოდი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"AddressLine1\": \"xsd:string\",\n      \"City\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Country\": \"xsd:string\",\n      \"postalCode\": \"xsd:string\"\n    },\n    \"Person_Optional\": {\n      \"@documentation\": {\n        \"@comment\": \"\",\n        \"@properties\": {\n          \"above18\": \"18 plus\",\n          \"permanentAddress\": \"Permanent Address\"\n        }\n      },\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"Birthday\": {\n        \"@class\": \"xsd:dateTime\",\n        \"@type\": \"Optional\"\n      },\n      \"PhoneNumber\": {\n        \"@class\": \"xsd:decimal\",\n        \"@type\": \"Optional\"\n      },\n      \"Today\": {\n        \"@class\": \"xsd:dateTime\",\n        \"@type\": \"Optional\"\n      },\n      \"above18\": {\n        \"@class\": \"xsd:boolean\",\n        \"@type\": \"Optional\"\n      },\n      \"age\": {\n        \"@class\": \"xsd:decimal\",\n        \"@type\": \"Optional\"\n      },\n      \"email\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"name\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"permanentAddress\": {\n        \"@class\": {\n          \"@class\": \"Address\",\n          \"@subdocument\": []\n        },\n        \"@type\": \"Optional\"\n      },\n      \"website\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      }\n    }\n  }\n```\n\n#### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"Person_Optional\"}/>           // type of document \n```\n\n#### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\n  let data = {\n    \"@id\": \"Person_Optional/72a8a2778bafbc4290f59ca851e0307c6918f7205207d93ac1b2a1f796a94587\",\n    \"@type\": \"Person_Optional\",\n    \"Birthday\": \"2022-08-15T12:59:46Z\",\n    \"PhoneNumber\": 353912839283123140,\n    \"Today\": \"2022-08-15T12:59:50Z\",\n    \"above18\": true,\n    \"age\": 22,\n    \"email\": \"rack@gmail.com\",\n    \"name\": \"John Rock\",\n    \"permanentAddress\": {\n      \"@id\": \"Person_Optional/72a8a2778bafbc4290f59ca851e0307c6918f7205207d93ac1b2a1f796a94587/permanentAddress/Address/5879ec85b65bb0caaa03f48e99073a9d4302c31ec3c3a382889a12980899e95f\",\n      \"@type\": \"Address\",\n      \"AddressLine1\": \"somewhere in Europe\",\n      \"Country\": \"New Zeeland\",\n      \"City\": \"City\",\n      \"postalCode\": \"NZ29038\"\n    },\n    \"website\": \"rack@rocking.com\"\n  }\n\n  return <FrameViewer\n      frame={frame}\n      mode={\"View\"}\n      formData={data}\n      type={\"Person_Optional\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Optional Properties - Document UI TerminusDB",
      "description": "How optional properties work in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Order By Using @metadata"
    },
    "slug": "orderby",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `OrderByExample` in Create/ Edit and View mode.\n\nThe Frame below to shows `@metadata` with an `order_by` tag which tells `<FrameViewier/>` to order fields according to the `order_by` array. Note there is a `@metadata` tag in the `SubBody` class definition which also tells `<FrameViewier/>` to order the subdocument's internal fields in the order included in the `@metadata` `order_by` array.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/Order%20By) to view `<FrameViewier/>` with properties where order\\_by is defined in the `@metadata` tag - in Create, Edit and view mode.\n\n## Frame\n\nThis frame consists of an `OrderByExample` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n        \"OrderByExample\": {\n            \"@key\": {\n                \"@fields\": [\n                    \"title\"\n                ],\n                \"@type\": \"Lexical\",\n            },\n            \"@type\": \"Class\",\n            \"@metadata\": {\n                \"order_by\": [ \"num_lines\", \"paragh\", \"body\", \"title\" ] \n            },\n            \"paragh\": \"xsd:string\",\n            \"title\": \"xsd:string\",\n            \"num_lines\": \"xsd:decimal\",\n            \"body\": {\n                \"@class\": \"SubBody\",\n                \"@subdocument\": []\n            }\n        },\n        \"SubBody\": {\n            \"@key\": {\n                \"@type\": \"Random\"\n            },\n            \"@metadata\": {\n                \"order_by\": [ \"section\", \"url\", \"text\" ]\n            },\n            \"@subdocument\": [],\n            \"@type\": \"Class\",\n            \"text\": \"xsd:string\",\n            \"section\": \"xsd:string\",\n            \"url\": \"xsd:url\"\n        }\n    }   \n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"OrderByExample\"}/> // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"OrderByExample/431b3406a64d99714b57133019408a16a6a514755fb229aff01419b4b423cb62\",\n    \"@type\": \"OrderByExample\",\n    \"paragh\": \"An example showing field ordered\",\n    \"title\": \"ordering example\",\n    \"num_lines\": \"23\",\n    \"body\": {\n        \"@id\": \"SubBody/72a8a2778bafbc4290f59ca851e0307c6918f7205207d93ac1b2a1f796a94587/body/SubBody/5879ec85b65bb0caaa03f48e99073a9d4302c31ec3c3a382889a12980899e95f\",\n        \"@type\": \"SubBody\",\n        \"text\": \"sample text\",\n    \"section\": \"a section\",\n    \"url\": \"https://terminusdb.com/\"\n    },\n}\n\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"OrderByExample\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Order By Using @metadata",
      "description": "How to order properties in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Render As Markdown Using @metadata"
    },
    "slug": "render-as",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `metaDataExample` with the fields `body` & `title` in Create/ Edit or View mode. The Frame below shows `@metadata` with the `render_as` tag included that tells `<FrameViewier/>` to render field `body` as Markdown.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/Render%20As) to view `<FrameViewier/>` with properties where render\\_as is defined in @metadata tag - in Create, Edit or View mode.\n\n## Frame\n\nThis frame consists of an `metaDataExample` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"metaDataExample\": {\n            \"@key\": {\n                \"@fields\": [\n                    \"title\"\n                ],\n                \"@type\": \"Lexical\",\n            },\n            \"@type\": \"Class\",\n            \"@metadata\": {\n                \"render_as\": {\n                    \"body\": \"markdown\"\n                }\n            },\n            \"body\": \"xsd:string\",\n            \"title\": \"xsd:string\"\n      }\n    }   \n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"metaDataExample\"}/> // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"metaDataExample/431b3406a64d99714b57133019408a16a6a514755fb229aff01419b4b423cb62\",\n    \"@type\": \"metaDataExample\",\n    \"title\": \"Example\",\n    \"body\": \"---\\ndescription: >-\\n  This page provides an overview of the TerminusCMS dashboard to help you\\n  navigate its features.\\n---\\n\\n# Product Tour\\n\\nTerminusCMS includes many features to build content infrastructures for complex environments. This product tour aims to provide you with an understanding of how to navigate the product and get started on your projects.&#x20;\\n\\n* [Creating projects, managing them, and designing your schema](projects-data-products.md)\\n* [Content and data curation](content-and-data-curation.md)\\n* [Change request workflows for collaborative content management](change-request-workflows.md)\\n* [Managing teams and users](manage-teams-and-users.md)\\n* [GraphQL and WOQL playgrounds to build and test queries](graphql-and-woql-playgrounds.md)\\n\\n### Sign Up and Try Out a Demo Project&#x20;\\n\\nSign up for TerminusCMS for free at: [https://dashboard.terminusdb.com](https://dashboard.terminusdb.com).\\n\\nVerify your email address by clicking on the link emailed to you and logging in.\\n\\nClick get started on the Community Package and then select the automatically generated team.&#x20;\\n\\nFrom here, clone one of the demo projects to play around with -\\n\\n<figure><img src=\\\"../../.gitbook/assets/terminuscms-demos.png\\\" alt=\\\"\\\"><figcaption></figcaption></figure>\"\n}\n\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"metaDataExample\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Render As Markdown Using @metadata",
      "description": "How to render properties as markdown in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Set Properties in the Document UI"
    },
    "slug": "set",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `UnorderedPerson` with set fields in Create/ Edit or View mode. If a field is described as a Set it means the field can have more than one value to it in any unordered fashion. The field can also be considered optional, meaning it can be empty.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/Set) to view `<FrameViewier/>` with set properties in Create, Edit or View mode.\n\n## Frame\n\nThis frame consists of an `UnorderedPerson` document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"Address\": {\n      \"@documentation\": [\n        {\n          \"@comment\": \"An Address\",\n          \"@label\": \"Address\",\n          \"@language\": \"en\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"Address Line one\",\n              \"@label\": \"Address Line 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"A Country \",\n              \"@label\": \"Country\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"A valid Postal Code\",\n              \"@label\": \"Zip Code\"\n            }\n          }\n        },\n        {\n          \"@comment\": \"მისამართი\",\n          \"@label\": \"მისამართი\",\n          \"@language\": \"ka\",\n          \"@properties\": {\n            \"AddressLine1\": {\n              \"@comment\": \"მისამართის ხაზი პირველი\",\n              \"@label\": \"მისამართის ხაზი 1\"\n            },\n            \"Country\": {\n              \"@comment\": \"Ქვეყანა\",\n              \"@label\": \"ქვეყანა\"\n            },\n            \"postalCode\": {\n              \"@comment\": \"მოქმედი საფოსტო კოდი\",\n              \"@label\": \"Ზიპ კოდი\"\n            }\n          }\n        }\n      ],\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@subdocument\": [],\n      \"@type\": \"Class\",\n      \"AddressLine1\": \"xsd:string\",\n      \"City\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Optional\"\n      },\n      \"Country\": \"xsd:string\",\n      \"postalCode\": \"xsd:string\"\n    },\n    \"UnorderedPerson\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"likes_color\": {\n        \"@class\": {\n          \"@id\": \"Colors\",\n          \"@type\": \"Enum\",\n          \"@values\": [\n            \"Red\",\n            \"Blue\",\n            \"Yellow\",\n            \"Green\"\n          ]\n        },\n        \"@type\": \"Set\"\n      },\n      \"lived_at\": {\n        \"@class\": {\n          \"@class\": \"Address\",\n          \"@subdocument\": []\n        },\n        \"@type\": \"Set\"\n      },\n      \"nicknames\": {\n        \"@class\": \"xsd:string\",\n        \"@type\": \"Set\"\n      },\n      \"worked_as\": {\n        \"@class\": \"Jobs\",\n        \"@type\": \"Set\"\n      }\n    }\n  }\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"UnorderedPerson\"}/> // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"UnorderedPerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf\",\n    \"@type\": \"UnorderedPerson\",\n    \"likes_color\": [\n        \"Green\",\n        \"Red\",\n        \"Yellow\"\n    ],\n    \"lived_at\": [\n        {\n            \"@id\": \"UnorderedPerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/4f4fdae34ab4fa3b6297750917503a7137f75dc11589792de707e7a6d3502db3\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"anywhere\",\n            \"City\": \"Nice\", \n            \"Country\": \"France\",\n            \"postalCode\": \"FR27836\"\n        },\n        {\n            \"@id\": \"UnorderedPerson/3ca7d7a9c64ca2bc8319d83bca14b71697528ebb8536024e3e1795cbd049acdf/lived_at/Address/7aaeeb6b983710a0adbc75de8f7d8104278df427124beadc6644b35b9d6c30af\",\n            \"@type\": \"Address\",\n            \"AddressLine1\": \"somewhere\",\n            \"City\": \"Berlin\", \n            \"Country\": \"Germany\",\n            \"postalCode\": \"GER02398\"\n        }\n    ],\n    \"nicknames\": [\n        \"Adam\",\n        \"Chane\",\n        \"Luca\"\n    ],\n    \"worked_as\": [\n        \"Jobs/33e3013112e6e76381ee6aba23a15f686b98fc2c300b3608e6fb25f585d93d24\",\n        \"Jobs/c8114bddb166325e704e368da237ed87e1c2de1dd23ae103431f974eaeefbbda\"\n    ]\n}\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"UnorderedPerson\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Set Properties in the Document UI",
      "description": "How to use set properties in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "sys:JSON Properties in the Document UI"
    },
    "slug": "sysjson",
    "body": {
      "@type": "Body",
      "value": "This example shows how `<FrameViewier/>` appears for a document `ComputerStudent` with sys:JSON field in Create/ Edit or View mode.\n\n`ComputerStudent` has a required mandatory field `likes` and a set field `stores_as`.\n\n## Demo\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground.terminusdb.com/JSON) to view `<FrameViewier/>` with sys:JSON properties in Create, Edit or View mode.\n\n## Frame\n\nThis frame consists of an ComputerStudent document\n\n```javascript\n  let frame = {\n    \"@context\": {\n      \"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"Context\",\n      \"xsd\": \"http://www.w3.org/2001/XMLSchema#\"\n    },\n    \"ComputerStudent\": {\n      \"@key\": {\n        \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"likes\": \"sys:JSON\",\n      \"stores_as\": {\n        \"@class\": \"sys:JSON\",\n        \"@type\": \"Set\"\n      }\n    }\n}\n```\n\n### Create\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}               // above defined frame          \n    formData={{}}               // formData will be empty\n    mode={\"Create\"}             // mode \n    type={\"ComputerStudent\"}/> // type of document \n```\n\n### Edit & View\n\nNote - make sure to provide document values for View mode. The form will be in read only mode for View.\n\n```javascript\nlet data = {\n    \"@id\": \"ComputerStudent/431b3406a64d99714b57133019408a16a6a514755fb229aff01419b4b423cb62\",\n    \"@type\": \"ComputerStudent\",\n    \"likes\": {\n        \"age\": 39,\n        \"name\": \"Madame Uppercut\",\n        \"powers\": [\"Million tonne punch\", \"Damage resistance\", \"Superhuman reflexes\"],\n        \"secretIdentity\": \"Jane Wilson\"\n    },\n    \"stores_as\": [\n        {\n            \"name\": \"Molecule Man\",\n            \"age\": 29,\n            \"secretIdentity\": \"Dan Jukes\",\n            \"powers\": [\n                \"Radiation resistance\",\n                \"Turning tiny\",\n                \"Radiation blast\"\n            ]\n        },\n        {\n            \"name\": \"Eternal Flame\",\n            \"age\": 1000000,\n            \"secretIdentity\": \"Unknown\",\n            \"powers\": [\n              \"Immortality\",\n              \"Heat Immunity\",\n              \"Inferno\",\n              \"Teleportation\",\n              \"Interdimensional travel\"\n            ]\n        }\n    ]\n}\n\n\nreturn <FrameViewer\n  frame={frame}\n  mode={\"View\"}\n  formData={data}\n  type={\"ComputerStudent\"}/>\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "sys:JSON Properties in the Document UI ",
      "description": "How to use sys:JSON properties in the document UI",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "UI SDK GeoJSON"
    },
    "slug": "ui-sdk-geojson",
    "body": {
      "@type": "Body",
      "value": "#### Demo\n\nTake a look at the [**GeoJSON Playground**](https://documents-ui-playground-geojson.terminusdb.com/Feature) to view the `<FrameViewier/>` demo in create, edit or view mode.\n\n### GeoJSON Schema\n\nBelow is the schema for loading geoJSON into a TerminusDB data product.\n\n```\n[\n    {\n        \"@base\": \"terminusdb:///data/\",\n        \"@schema\": \"terminusdb:///schema#\",\n        \"@type\": \"@context\"\n    },\n    { \"@type\" : \"Class\",\n      \"@id\" : \"GeoJSON\",\n      \"@abstract\" : [],\n      \"bbox\" : { \"@class\" : \"xsd:decimal\",\n                 \"@dimensions\" : 1,\n                 \"@type\" : \"Array\" }\n    },\n    { \"@type\" : \"Class\",\n      \"@id\" : \"FeatureCollection\",\n      \"@inherits\": \"GeoJSON\",\n      \"@key\" : { \"@type\" : \"Random\" },\n      \"@unfoldable\" : [],\n      \"name\" : { \"@type\" : \"Optional\",\n                 \"@class\" : \"xsd:string\" },\n      \"type\": \"FeatureCollection_Type\",\n      \"crs\" : { \"@type\" : \"Optional\",\n                \"@class\" : \"sys:JSON\" },\n      \"properties\" : { \"@type\" : \"Optional\",\n                       \"@class\" : \"sys:JSON\" },\n      \"features\" : { \"@type\" : \"Set\",\n                     \"@class\": \"Feature\"}\n    },\n    {\n        \"@id\": \"Polygon\",\n        \"@inherits\": \"Geometry\",\n        \"@type\": \"Class\",\n        \"coordinates\": {\n            \"@class\": \"xsd:decimal\",\n            \"@dimensions\": 3,\n            \"@type\": \"Array\"\n        },\n        \"type\": \"Polygon_Type\"\n    },\n    { \"@type\" : \"Class\",\n      \"@id\" : \"Geometry\",\n      \"@inherits\": \"GeoJSON\",\n      \"@abstract\" : [],\n      \"@unfoldable\" : []\n    },\n    {\n        \"@id\": \"GeometryCollection_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"GeometryCollection\"\n        ]\n    },\n    {\n        \"@id\": \"GeometryCollection\",\n        \"@inherits\": \"Geometry\",\n        \"@type\": \"Class\",\n        \"geometries\": {\n            \"@class\": \"Geometry\",\n            \"@type\": \"Set\"\n        },\n        \"type\": \"GeometryCollection_Type\"\n    },\n    {\n        \"@id\": \"MultiPolygon\",\n        \"@inherits\": \"Geometry\",\n        \"@type\": \"Class\",\n        \"coordinates\": {\n            \"@class\": \"xsd:double\",\n            \"@dimensions\": 4,\n            \"@type\": \"Array\"\n        },\n        \"type\": \"MultiPolygon_Type\"\n    },\n    {\n        \"@id\": \"LineString\",\n        \"@inherits\": \"Geometry\",\n        \"@type\": \"Class\",\n        \"coordinates\": {\n            \"@class\": \"xsd:double\",\n            \"@dimensions\": 2,\n            \"@type\": \"Array\"\n        },\n        \"type\": \"LineString_Type\"\n    },\n    {\n        \"@id\": \"Point\",\n        \"@inherits\": \"Geometry\",\n        \"@type\": \"Class\",\n        \"coordinates\": {\n            \"@class\": \"xsd:double\",\n            \"@dimensions\": 1,\n            \"@type\": \"Array\"\n        },\n        \"type\": \"Point_Type\"\n    },\n    {\n        \"@id\": \"Polygon_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"Polygon\"\n        ]\n    },\n    {\n        \"@id\": \"Point_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"Point\"\n        ]\n    },\n    {\n        \"@id\": \"MultiPolygon_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"MultiPolygon\"\n        ]\n    },\n    {\n        \"@id\": \"Name_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"name\"\n        ]\n    },\n    {\n        \"@id\": \"LineString_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"LineString\"\n        ]\n    },\n    {\n        \"@id\": \"Feature_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"Feature\"\n        ]\n    },\n    {\n        \"@id\": \"FeatureCollection_Type\",\n        \"@type\": \"Enum\",\n        \"@value\": [\n            \"FeatureCollection\"\n        ]\n    },\n    {\n        \"@id\": \"Feature\",\n        \"@type\": \"Class\",\n        \"@inherits\": \"GeoJSON\",\n        \"@unfoldable\": [],\n        \"centerline\": {\n            \"@class\": \"Geometry\",\n            \"@type\": \"Optional\"\n        },\n        \"geometry\": \"Geometry\",\n        \"id\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Optional\"\n        },\n        \"properties\": { \"@type\" : \"Optional\",\n                        \"@class\" : \"sys:JSON\" },\n        \"title\": {\n            \"@class\": \"xsd:string\",\n            \"@type\": \"Optional\"\n        },\n        \"type\": \"Feature_Type\"\n    }\n]\n```\n\n### GeoJSON Frames\n\nThe equivalent geoJSON frame that can be retrieved from `getSchemaFrame()` call\n\n```\n{\n  \"@context\": {\n    \"@base\": \"terminusdb:///data/\",\n    \"@schema\": \"terminusdb:///schema#\",\n    \"@type\": \"Context\"\n  },\n  \"Feature\": {\n    \"@inherits\": [\n      \"GeoJSON\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"centerline\": {\n      \"@class\": [\n        \"GeometryCollection\",\n        \"LineString\",\n        \"MultiPolygon\",\n        \"Point\",\n        \"Polygon\"\n      ],\n      \"@type\": \"Optional\"\n    },\n    \"geometry\": [\n      \"GeometryCollection\",\n      \"LineString\",\n      \"MultiPolygon\",\n      \"Point\",\n      \"Polygon\"\n    ],\n    \"id\": {\n      \"@class\": \"xsd:string\",\n      \"@type\": \"Optional\"\n    },\n    \"properties\": {\n      \"@class\": \"sys:JSON\",\n      \"@type\": \"Optional\"\n    },\n    \"title\": {\n      \"@class\": \"xsd:string\",\n      \"@type\": \"Optional\"\n    },\n    \"type\": {\n      \"@id\": \"Feature_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"Feature\"\n      ]\n    }\n  },\n  \"FeatureCollection\": {\n    \"@inherits\": [\n      \"GeoJSON\"\n    ],\n    \"@key\": {\n      \"@type\": \"Random\"\n    },\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"crs\": {\n      \"@class\": \"sys:JSON\",\n      \"@type\": \"Optional\"\n    },\n    \"features\": {\n      \"@class\": \"Feature\",\n      \"@type\": \"Set\"\n    },\n    \"name\": {\n      \"@class\": \"xsd:string\",\n      \"@type\": \"Optional\"\n    },\n    \"properties\": {\n      \"@class\": \"sys:JSON\",\n      \"@type\": \"Optional\"\n    },\n    \"type\": {\n      \"@id\": \"FeatureCollection_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"FeatureCollection\"\n      ]\n    }\n  },\n  \"FeatureCollection_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"FeatureCollection\"\n    ]\n  },\n  \"Feature_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"Feature\"\n    ]\n  },\n  \"GeoJSON\": {\n    \"@abstract\": [],\n    \"@type\": \"Class\",\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    }\n  },\n  \"Geometry\": {\n    \"@abstract\": [],\n    \"@inherits\": [\n      \"GeoJSON\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    }\n  },\n  \"GeometryCollection\": {\n    \"@inherits\": [\n      \"GeoJSON\",\n      \"Geometry\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"geometries\": {\n      \"@class\": [\n        \"GeometryCollection\",\n        \"LineString\",\n        \"MultiPolygon\",\n        \"Point\",\n        \"Polygon\"\n      ],\n      \"@type\": \"Set\"\n    },\n    \"type\": {\n      \"@id\": \"GeometryCollection_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"GeometryCollection\"\n      ]\n    }\n  },\n  \"GeometryCollection_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"GeometryCollection\"\n    ]\n  },\n  \"LineString\": {\n    \"@inherits\": [\n      \"GeoJSON\",\n      \"Geometry\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"coordinates\": {\n      \"@class\": \"xsd:double\",\n      \"@dimensions\": 2,\n      \"@type\": \"Array\"\n    },\n    \"type\": {\n      \"@id\": \"LineString_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"LineString\"\n      ]\n    }\n  },\n  \"LineString_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"LineString\"\n    ]\n  },\n  \"MultiPolygon\": {\n    \"@inherits\": [\n      \"GeoJSON\",\n      \"Geometry\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"coordinates\": {\n      \"@class\": \"xsd:double\",\n      \"@dimensions\": 4,\n      \"@type\": \"Array\"\n    },\n    \"type\": {\n      \"@id\": \"MultiPolygon_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"MultiPolygon\"\n      ]\n    }\n  },\n  \"MultiPolygon_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"MultiPolygon\"\n    ]\n  },\n  \"Name_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"name\"\n    ]\n  },\n  \"Point\": {\n    \"@inherits\": [\n      \"GeoJSON\",\n      \"Geometry\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"coordinates\": {\n      \"@class\": \"xsd:double\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"type\": {\n      \"@id\": \"Point_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"Point\"\n      ]\n    }\n  },\n  \"Point_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"Point\"\n    ]\n  },\n  \"Polygon\": {\n    \"@inherits\": [\n      \"GeoJSON\",\n      \"Geometry\"\n    ],\n    \"@type\": \"Class\",\n    \"@unfoldable\": [],\n    \"bbox\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 1,\n      \"@type\": \"Array\"\n    },\n    \"coordinates\": {\n      \"@class\": \"xsd:decimal\",\n      \"@dimensions\": 3,\n      \"@type\": \"Array\"\n    },\n    \"type\": {\n      \"@id\": \"Polygon_Type\",\n      \"@type\": \"Enum\",\n      \"@values\": [\n        \"Polygon\"\n      ]\n    }\n  },\n  \"Polygon_Type\": {\n    \"@type\": \"Enum\",\n    \"@values\": [\n      \"Polygon\"\n    ]\n  }\n}\n```\n\n### **Demo**\n\nTake a look at the [**Demo Playground**](https://documents-ui-playground-geojson.terminusdb.com/) to view `<FrameViewier/>` with geoJSON data.\n\n### Example\n\nThis example shows how to load a `FeartureCollection` into `<FrameViewier/>`.\n\n> Note: In View mode we display the map view of geoJSONs using react-leaflets under the hood.\n\n```python\nimport { FrameViewer } from '@terminusdb/terminusdb-documents-ui'\n\n  return <FrameViewer\n    frame={frame}                           // above defined frame          \n    formData={{}}                           // formData will be empty\n    mode={\"Create\"}                         // mode \n    type={\"FeartureCollection\"}/>           // type of document \n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "UI SDK GeoJSON",
      "description": "Understand how <FrameViewer/> can load geoJSON to display geographic data structures in Create, Edit or View Mode",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Document UI Template"
    },
    "slug": "document-ui-template",
    "body": {
      "@type": "Body",
      "value": "A Software Development Kit (SDK) to build a UI from @terminusdb/terminusdb-documents-ui and the @terminusdb/terminusdb-react-table.\n\nThis template has components to assemble a dashboard quickly. You also have the option to use our base components like the FramesViewer and TDBReactTable.\n\n## Installation\n\nInstall the dependencies from npm\n\n```\nnpm install @terminusdb/terminusdb-documents-ui\nnpm install @terminusdb/terminusdb-react-table\nnpm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n## Run a Dashboard Example in Code Sandbox\n\n`terminusdb-documents-ui-templates` are a collection of hooks to connect with the TerminusCMS server and a number of templates (components) for building a dashboard.\n\nThe sandbox features an example and how to use the components and hooks to assemble your pages.\n\n[Source Code](https://github.com/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Document UI Template",
      "description": "The document ui template has components to assemble a dashboard quickly. ",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusDB React Table"
    },
    "slug": "tdb-react-table",
    "body": {
      "@type": "Body",
      "value": "Learn how to include TerminusDB React Table components in your projects to display documents in an interactive table.\n\n## Installation\n\nThe best way to use @terminusdb/terminusdb-react-table is via the npm package that you can install with npm (or yarn if you prefer).\n\n`npm install @terminusdb/terminusdb-react-table`\n\nThe library has two main components [`TDBReactTable`](#tdbreacttable) and [`AdvancedSearch`](#advancedsearch)\n\n## TDBReactTable\n\n### Properties\n\nProperties\n\nDescription\n\n`start:Number`\n\nThe pagination start value, we view the row from start to start+limit\n\n`limit:Number`\n\nDetermines the amount of rows on any given page, the default value is 10\n\n`totalRows:Number`\n\nThe total number of rows\n\n`result:Array`\n\nThe data array to display in the table\n\n`config`\n\nTable configuration. The main options are `columns:Array<Column>` required - The core columns configuration object for the entire table. `rowClick : Function` A function that acts as a callback when the table row is clicked\n\n`orderBy:Array`\n\n\\- An array of sorting objects. The sorting object should contain an `id` key with the corresponding column ID to sort by. An optional `desc` key (defaults to `false`) - this information is stored in state\n\n`filterBy:Array`\n\n\\- An array of objects, each having a column `id` and a corresponding filter `value`. This information is stored in state\n\n`downloadConfig:Object`\n\n\\- The download config object should contain an filename for the file output, a headersLabel array with the list of columns to add to the files, and a className to style the download button component\n\n`setFilters:Function`\n\n\\- A function that acts as a callback when the columns input filter is filled and the Enter key if pressed, row filters need to be implemented outside of the table\n\n`setOrder:Function`\n\n\\- A function that acts as a callback when the columns sort arrow is clicked. Implement your own sorting outside of the table\n\n`setLimits:Function(currentlimit:Number,currentstart:Number)`\n\n\\- A function that acts as a callback when the pageSize or the pageIndex changes in the table. You should implement your own sorting outside of the table\n\n`setHiddenColumns:Function(id:String, checked:Bool)`\n\n\\- A function that acts as a callback when the hide/show check box if clicked\n\n### Column Options\n\nThe following options are supported on any column object you can pass to columns.\n\nProperties\n\nDescription\n\n`accessor:String`\n\n\\- Function(originalRow, rowIndex) => any - Required - This string/function is used to build the data model for your column.\n\n`id: String`\n\n\\- Required - This is the unique ID for the column. It is used as a reference in things like sorting, grouping, filtering etc.\n\n`Header: String`\n\n\\- Optional, the column title, the id will used if this property is not provided\n\n`width:Number`\n\n\\- Optional\n\n`minWidth: Number`\n\n\\- Optional\n\n`maxWidth: Number`\n\n\\- Optional\n\n`disableSortBy : Bool`\n\n\\- Disables sorting of a column.\n\n`disableFilters:Bool`\n\n\\- Disables filtering of the column.\n\n`renderer: String or Function`\n\n\\- Optional, - The available values for the string value are `json` - `number` - `string` - `image`. If you pass a function instead, this will receive the table instance and cell model as properties and return a JSX object or a string\n\n`filter:Object`\n\n\\- This object should have a `type` property, the available values for type are : `list` , `number`, `string` or `boolean`. Use an `options` object to set the operator for the filter to override the defaults\n\n### Usage\n\n```python\nimport  React, {useState,useEffect} from  'react';\nimport {TDBReactTable} from  '@terminusdb/terminusdb-react-table'\nimport {columnsConfiguration} from  './columnsConfiguration'\nimport  data  from  './data.json'\nimport  './terminusdb-react-table-main.css'\nimport {Container,Alert,Row} from  \"react-bootstrap\"\n\nconst  App = (props) =>{\n    const [rowSelected, setRowSelected] = useState(false)\n    const [limit, setLimit] = useState(5)\n    const [start, setStart] = useState(0)\n    const [filter, setFilter] = useState([])\n    const [order, setOrder] = useState([])\n    const  hiddenColumnsArr = ['_id','desc','MGLT','length',                          'cost_in_credits','max_atmosphering_speed','_speed','crew',\n'passengers','cargo_capacity','consumables','hyperdrive_rating',\n'starship_class','created,edited','url']\n\nconst [dataWithPagination, setData] = useState(data)\nconst  onRowClick = (row) =>{\n    setRowSelected(row.original['fullID'])\n}\n\nconst  tableConfigObj = {}\ntableConfigObj.columns = columnsConfiguration\ntableConfigObj.rowClick = onRowClick\n\nconst  setHiddenColumns = (id, selected)=>{\n        //implement a setHiddenColumns function to store the status\n}\n\nconst  changeFilters = (filterArr)=>{setFilter(filterArr)}\nconst  changeLimits = (currentlimit,currentpage)=>\n                setLimit(currentlimit)\n                setStart(currentpage)\n                }\n\nconst  changeOrders = (orderArr)=>{setOrder(orderArr)}\n\nuseEffect(() => {\n    const  tmpData = data.slice(start,(limit+start))\n    setData(tmpData)\n},[limit,start])\n\nreturn  <Container  className='my-5'>\n    <Alert><pre>{`Row selected id ${rowSelected}`}\n    You need to Implement a logic to change the Hidden status</pre> </Alert>\n\n<Alert><pre>{`YOU NEED TO IMPLEMENT A FILTER LOGIC, Table filter ${JSON.stringify(filter)}`}</pre></Alert>\n\n<Alert><pre>{`YOU NEED TO IMPLEMENT AN ORDER LOGIC, Table order ${JSON.stringify(order)}`}</pre></Alert>\n\n<Row  className='width-100 overflow-auto text-break'  >\n<TDBReactTable\n    result={dataWithPagination}\n    config ={tableConfigObj}\n    hiddenColumnsArr = {hiddenColumnsArr}\n    setHiddenColumns = {setHiddenColumns}   \n    limit={limit}\n    start={start}\n    orderBy={[]}\n    filterBy={[]}\n    setFilters = {changeFilters}\n    setLimits={changeLimits}\n    setOrder={changeOrders}\n    loading={false}\n    totalRows={10}\n/>\n</Row>\n</Container>\n}\n\nexport  default  App;\n```\n\n### Example `TdbReactTable` Code\n\n[TdbReactTable Code](https://github.com/terminusdb/terminusdb-dashboard/tree/main/packages/tdb-react-table/src)\n\n[Code sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-react-table-examples/table-basic-conf)\n\n## AdvancedSearch\n\n### Properties\n\nProperties\n\nDescription\n\n`setFilter:Function(advFilter:Object)`\n\nA function that acts as a callback when the advanced filter `Filter Data` button is clicked\n\n`fields:Object`\n\nThe Advanced Search fields description\n\n### Fields Options\n\nThe following options are supported on any files object that you can pass to field, the keys in fields are the ID of the field itself.\n\nProperties\n\nDescription\n\n`label:String`\n\n\\- Required - the field label\n\n`type:string`\n\n\\- Required - is the field widget match type for GraphQL\n\n`valueSources:Array`\n\n\\- Required - for the default widget this is always \\[\"value\"\\]\n\n`typeValue:String`\n\n\\- Required - the GraphQL value type (String,BigInt )\n\n`operators:Array`\n\n\\- Optional - an Array of available operators\n\n`defaultOperator:String`\n\n\\- Optional - the default operator for the type\n\n`fieldSettings`\n\n\\- Optional - an Array of options for the valuetype ENUM\n\n`subfields`\n\n\\- Optional - a list of subfields for the type `!group` valuetype Object\n\n```\n{\"myfield\":{\n    \"label\":\"myfiledLabel\",\n    \"type\":\"text\",\n    \"valueSources\":[\"value\"],\n    \"typevalue\":\"String\"\n    }\n}\n```\n\n[advancedSearchMatchType code](https://github.com/terminusdb/terminusdb-dashboard/blob/main/packages/tdb-react-table/src/advancedSearchUtils.js)\n\n**You can use the following method to format the advanced search fields**\n\n```python\nimport {advancedSearchMatchType} from  \"@terminusdb/terminusdb-react-table/advancedSearchUtils\"\n\nconst  stringFormat = advancedSearchMatchType(\"String\")\nstringFormat.label= \"myPropertyName\"\nconst  fields = {\"myPropertyName\" :  stringFormat}\n```\n\n### Code Examples of Advanced Search\n\n[AdvancedSearch Code](https://github.com/terminusdb/terminusdb-dashboard/tree/main/packages/tdb-react-table/src)\n\n[Code sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-react-table-examples/advanced-search)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB React Table",
      "description": "Learn how to include TerminusDB React Table components in your projects to display documents in an interactive table",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "useTDBDocuments hook"
    },
    "slug": "usetdbdocuments",
    "body": {
      "@type": "Body",
      "value": "`useTDBDocuments` is the main hook to connect @terminusdb/terminusdb-documents-ui with the TerminusCMS server. To use it, pass it with an instance of [@terminusdb/terminusdb-client](https://github.com/terminusdb/terminusdb-client-js)\n\n## useTDBDocuments parameters\n\n`useTDBDocuments(woqlClient:WOQLClient)`\n\n*   `woqlClient : WOQLClient`\n*   Required\n*   An WOQLClient instance with your connections settings\n\n## Instance Properties\n\n*   `state.loading : Bool`\n    *   This is the current `loading` value, located on the state, if true the hook is doing a server call\n*   `state.error: Object|Bool`\n    *   This is the current error reporting object from the server, located on the state, the starting value\n*   `state.perDocumentCount:Object|Bool`\n    *   This is the current information about the number of documents, of every type, present in the database in a specific branch. The starting value is null, we need to call the `getDocumentsNumber` function to fill this property status\n*   `state.totalDocumentCount:Number|Bool`\n    *   This is the current information about the total number of documents present in the database in a specific branch, the starting value is null, we need to call the `getDocumentsNumber` function to fill this property status\n*   `state.documentClasses:Array|Bool`\n    *   This is the current information about the documents classes, the starting value is null, you need to call the `getDocumentNumbers` or the `getDocumentClasses` function to fill this property status\n*   `state.selectedDocument:Object|Bool`\n    *   This is the current selected document object, the starting value is null, you need to call the `getSelectedDocument` function to fill this property status\n*   `state.frame:Object|Bool`\n    *   This is the current documents frames object, the starting value is false, you need to call the `getDocumentFrames`function to fill this property status\n*   `state.documentTablesConfig:Object|Bool`\n    *   This is the current document tables template, this property status stores the graphQL query for every document, the configuration for the tables, and the advanced search components. The starting value is null, you need to call the `getGraphqlTablesConfig`function to fill this property status, after the call the status will either be the table config Object, or false if the call failed\n*   `setError: Function(value:Object|Bool)`\n    *   This function sets the error property status.\n*   `getDocumentClasses: Function()`\n    *   This function calls the TerminusDB server to get the database classes list and sets the `documentClasses` property with the server response.\n*   `getDocumentNumbers: Function()`\n    *   This function calls the TerminusDB server to get the database classes list and sets the `documentClasses` property with the server response. It runs a query to get the total number of documents and the number of documents for type and fills the `perDocumentCount` and the `totalDocumentCount`\n*   `getDocumentFrames: Function()`\n    *   This function gets the current database frames and sets the `frames` status property\n*   `getGraphqlTablesConfig: Function()`\n    *   This function calls the TerminusDB server to get the GraphQL tables configuration and sets the `getGraphqlTablesConfig` property status with the server response or `error` if there was an error in the call.\n*   `createDocument: Function(jsonDocument:Object)`\n    *   This function calls the server to create a new document in the current database\n*   `getSelectedDocument: Function(documentId:String)`  \n    *   Calls the server to get a document object and sets the `selectedDocument` status property with the response\n*   `deleteDocument: Function(documentId:String)`\n    *   Calls the server to delete a document\n*   `updateDocument: Function(jsonDocument:Object)`\n    *   Calls the server to update a document\n*   `getDocumentById: Function(documentId:String)`\n    *   Calls the server to get a document object and return it\n\nView the useTDBDocuments component integrated inside a dashboard here\n\n[useTDBDocuments example JS code to create a new document](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/DocumentNew.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)\n\n* * *\n\nFor more detailed information take a look at the UI component pages - [Document Classes Summary](/docs/documentclassessummary/), [Document GraphQL Table](/docs/documentsgraphqltable/), [Edit Documents](/docs/edit-document-component/), [List Documents](/docs/list-documents-component/), [New Documents](/docs/newdocumentcomponent/), and [View Documents](/docs/viewdocumentcomponent/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "useTDBDocuments hook",
      "description": "useTDBDocuments is the main hook to connect @terminusdb/terminusdb-documents-ui with the TerminusCMS server",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "useTDBGraphqlQuery"
    },
    "slug": "usetdbgraphqlquery",
    "body": {
      "@type": "Body",
      "value": "`useTDBGraphqlQuery` is the main hook to connect @terminusdb/terminusdb-react-table with TerminusCMS server. To use it, pass it with an instance of [ApolloClient](https://www.apollographql.com/docs/react/).\n\n## useTDBGraphqlQuery parameters\n\n`useTDBGraphqlQuery(apolloClient:ApolloClient, graphqlQuery:gql, documentType:String, options:Object)`\n\n*   `apolloClient : ApolloClient`\n*   Required\n*   An Apollo Client instance with your connections settings\n*   `graphqlQuery : gql`\n*   Required\n*   A GraphQL query\n*   `documentType : string`\n*   Required\n*   The document type\n*   `options : object`\n\nThe following options are supported via the main options object passed to useTDBGraphqlQuery\n\n*   `limit : number`\n    \n    *   Optional\n    *   The initial state value for `limit`\n*   `start : number`\n    \n    *   Optional\n    *   The initial state value for `start`\n*   `tableConfigObj: Object`\n    \n    *   Optional\n    *   The table configuration object\n*   `hiddenColumns : Array`\n    \n    *   Optional\n    *   The initial state object for `hiddenColumnsArr`\n    \n    ## Instance Properties\n    \n    The following properties are available on the table instance returned from useTDBGraphqlQuery\n    \n*   `state.loading : Bool`\n    \n    *   This is the current `loading` value, located on the state, if true the hook is doing a server call\n*   `state.error: Object|Bool`\n    \n    *   This is the current error reporting object from the server, located on the state, the starting value is false\n*   `state.limit: Number`\n    \n    *   This is set the limit clause to select a limited number of records, The starting value is 10. Using the `changeLimits` function will change the status of this property\n*   `state.start:Number`\n    \n    *   This is the pagination start value, pagination allows returning only a portion, rather than the whole, result set. The start value is 0. Use the `changeLimits` function to change the status of this property\n*   `state.queryFilters:Object`\n    \n    *   This is the query filter status, this value is used to fill the filter value in the GraphQL query variables. Use the `setAdvancedFilters` or `changeFilters` functions to change the status of this property\n*   `state.queryOrders:Object`\n    \n    *   This is the query orderBy status. Use this value to fill the orderBy value in the graphql query variables. Use the `changeOrders` function to change the status of this property\n*   `state.orderBy:Array` - This is the table orderBy status, transform this value to create the queryOrders object. Use the `changeOrders` function to change the status of this property\n    \n*   `state.filterBy:Array`\n    \n    *   This is the table filter status, transform this value to create the queryFilters object. Use the `changeFilters` function to change the status of this property\n*   `state.rowCount:Number`\n    \n    *   This is the current number of records loaded\n*   `state.documentResults:Array`\n    \n    *   The successful GraphQL query fetch result data\n*   `state.extractedData:Array`\n    \n    *   The successful GraphQL query fetch result data formatted for the table\n*   `state.hiddenColumnsArr:Array`\n    \n    *   Store the table hiddenColumns list. If a column's ID is contained in this array, it will be hidden using the `setHiddenColumns` function\n*   `callGraphqlServer: Function(currentlimit:Number,currentstart:Number,queryOrders:Object,queryFilters:Object)`\n    \n    *   This function changes the `limit`, the `start` status, the `queryOrders`, and the `queryFilters` properties and calls the server with pagination, returning only a portion, rather than the whole, result.\n*   `changeLimits: Function(currentlimit:Number,currentstart:Number)`\n    \n    *   This function changes the `limit` and `start` status properties and calls the server with pagination, returning only a portion, rather than the whole, result.\n*   `changeOrders: Function(orderByArr:Array)`\n    \n    *   This function gets the graphqlTable orderByArr variable and transforms it in the GraphQL orderBy variables format.\n    *   Set the `queryOrders` and `orderBy` properties status to call the server with the current `queryOrders` and `queryFilters` status\n*   `changeFilters: Function(filtersArr:Array)`\n    \n    *   This function gets the graphqlTable filtersArr variable and transforms it in the GraphQL filters variables format.\n    *   Set the `queryFilters` and `filterBy` properties status to call the server with the current `queryFilters` and `queryOrders` status\n*   `setAdvancedFilters: Function(advfilter:Object)`\n    \n    *   This gets the advfilter in the GraphQL filters variables format\n    *   Set the `queryFilters` reset the `filterBy` properties status to call the server with the current `queryFilters` and `queryOrders` status\n*   `setHiddenColumns: Function(id:string, checked:bool)`\n    \n    *   This function is called to add or remove a columns ID to the `hiddenColumns` status property\n\nView the useTDBGraphqlQuery component integrated inside a dashboard here\n\n[useTDBGraphqlQuery source code](https://github.com/terminusdb/terminusdb-dashboard/blob/main/packages/tdb-documents-ui-template/src/hook/useTDBGraphqlQuery.js)\n\n[useTDBGraphqlQuery usage in the DocumentsGraphqlTable component](https://github.com/terminusdb/terminusdb-dashboard/blob/main/packages/tdb-documents-ui-template/src/components/DocumentsGraphqlTable.js)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "useTDBGraphqlQuery Hook",
      "description": "useTDBGraphqlQuery` is the main hook to connect @terminusdb/terminusdb-react-table with TerminusCMS server",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Document UI Components"
    },
    "slug": "ui-components",
    "body": {
      "@type": "Body",
      "value": "[Document Classes Summary](/docs/documentclassessummary/)[Documents GraphQL Table](/docs/documentsgraphqltable/)[Edit Documents](/docs/edit-document-component/)[List Documents](/docs/list-documents-component/)[New Documents](/docs/newdocumentcomponent/)[View Documents](/docs/viewdocumentcomponent/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Document UI Components",
      "description": "A list of components and links to further information for the document UI components to build dashboards quickly.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "DocumentClassesSummary Component"
    },
    "slug": "documentclassessummary",
    "body": {
      "@type": "Body",
      "value": "The `DocumentClassesSummary` component allows you to visualize document classes using interactive cards.\n\n## Installation\n\nInstall the dependencies from npm\n\n```\n npm install @terminusdb/terminusdb-documents-ui\n npm install @terminusdb/terminusdb-react-table\n npm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n## Properties\n\nProperties\n\nDescription\n\ntotalDocumentCount\n\nThe total number of documents\n\nperDocumentCount\n\nThe number of documents for a type\n\nonDocumentClick\n\nA function that acts as a callback when the document class card is clicked\n\n## Example\n\n```python\nimport React, {useEffect} from \"react\"\nimport {DocumentClassesSummary,useTDBDocuments} from \"@terminusdb/terminusdb-documents-ui-template\"\n\nexport const Documents = ({tdbClient}) => {   \n    const {perDocumentCount,\n        totalDocumentCount, \n        getDocumentNumbers,\n        setError,\n        loading,\n        error}=useTDBDocuments(tdbClient)\n\n\n    useEffect(() => {\n       if(tdbClient)getDocumentNumbers()\n    }, [tdbClient])\n\n    function handleCardClick (doc) {\n        // do something after click the card, \n        // maybe navigate in the document list page\n    }\n\n    if(!frames) return  <div>{`Fetching frames for document type ${type} ...`}</div>\n    const errorMessage = typeof error === \"object\" ? JSON.stringify(error,null,4) : error\n\n    return <div className=\"w-100\">\n            {error && {error && <div>Server Error: {errorMessage} </div>}\n            <DocumentClassesSummary \n                    totalDocumentCount={totalDocumentCount}\n                    perDocumentCount={perDocumentCount} \n                    onDocumentClick={handleCardClick}/>\n        </div>\n}\n```\n\nView the DocumentClassesSummary integrated inside a dashboard here\n\n[DocumentClassesSummary full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/Documents.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "DocumentClassesSummary Component",
      "description": "The DocumentClassesSummary component allows you to visualize document classes using interactive cards.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "DocumentsGraphqlTable Component"
    },
    "slug": "documentsgraphqltable",
    "body": {
      "@type": "Body",
      "value": "The `DocumentsGraphqlTable` component allows you to use GraphQL queries and visualize the results in a the [TDBReactTable](/docs/tdb-react-table/), you need to pass your instace of ApolloClient, the GraphQL query and the table and advanced search configuration. [Read here for the configuration documentation](/docs/tdb-react-table/).\n\n## Installation\n\nInstall the dependencies from npm\n\n```\nnpm install @terminusdb/terminusdb-documents-ui\nnpm install @terminusdb/terminusdb-react-table\nnpm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n## Properties\n\nProperties\n\nDescription\n\ntype\n\nThe document type\n\ngqlQuery\n\nThe GraphQL query\n\napolloClient\n\nAn apollo client instance - [Apollo Client documentation](https://www.apollographql.com/docs/react/)\n\ntableConfig\n\nAn object with the table configuration to pass to the [TDBReactTable Component](/docs/tdb-react-table/)\n\nadvancedSearchConfig\n\nAn object with the advancedSearch configuration to pass to the [AdvancedSearch Component](/docs/tdb-react-table/#advancedsearch)\n\nonRowClick\n\nA function that acts as a callback when the table row is clicked\n\nonViewButtonClick\n\nA function that acts as a callback when the table row view button is clicked\n\nonEditButtonClick\n\nA function that acts as a callback when the table row edit button is clicked\n\nonDeleteButtonClick\n\nA function that acts as a callback when the table row delete button is clicked\n\nshowGraphqlTab\n\nA boolean property to enable the GraphQL query view tab\n\n## Example\n\n```python\nimport React,{useEffect} from \"react\"\nimport {DocumentsGraphqlTable,useTDBDocuments} from \"@terminusdb/terminusdb-documents-ui-template\"\nimport {gql} from \"@apollo/client\"\n/**\n * \n * @param {*} setSelected function to get selected document link by user \n * @param {*} doctype document type selected\n * @returns \n */\nexport const DocumentSearchComponent = ({setSelected, doctype,apolloClient,tdbClient}) => {\n    const {documentTablesConfig,getGraphqlTablesConfig} = useTDBDocuments(tdbClient)\n\n    useEffect(() => {\n        if(doctype){       \n            getGraphqlTablesConfig()         \n        }\n     },[doctype]);\n\n    const querystr  = documentTablesConfig && documentTablesConfig.objQuery ? documentTablesConfig.objQuery[doctype].query : null\n    const gqlQuery = querystr ? gql`${querystr}` : null\n    const tableConfig =  documentTablesConfig && documentTablesConfig.tablesColumnsConfig ? documentTablesConfig.tablesColumnsConfig[type] : []\n    const advancedSearchConfig = documentTablesConfig && documentTablesConfig.advancedSearchObj ? documentTablesConfig.advancedSearchObj[type] : null\n    if(!gqlQuery || !tableConfig) return <div/>\n\n    return  <DocumentsGraphqlTable tableConfig={tableConfig} \n                advancedSearchConfig ={advancedSearchConfig}\n                type={doctype} \n                gqlQuery={gqlQuery}\n                apolloClient={apolloClient}\n                onRowClick={setSelected} \n                showGraphqlTab={false} />\n\n}\n```\n\nView the DocumentsGraphqlTable component integrated inside a dashboard here\n\n[DocumentSearchComponent full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/components/DocumentSearchComponent.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "DocumentsGraphqlTable Component",
      "description": "The DocumentsGraphqlTable component allows you to use GraphQL queries and visualize the results in a the TDBReactTable",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "EditDocumentComponent"
    },
    "slug": "edit-document-component",
    "body": {
      "@type": "Body",
      "value": "The `EditDocumentComponent` allows you to edit an existing document using the [FrameViewer](/docs/document-ui-sdk/) component.\n\n## Installation\n\nInstall the dependencies from npm\n\n```\n npm install @terminusdb/terminusdb-documents-ui\n npm install @terminusdb/terminusdb-react-table\n npm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n## Properties\n\nProperties\n\nDescription\n\ntype\n\nThe document type\n\ndocumentJson\n\nThe document object\n\ndocumentID\n\nThe document ID\n\nframes\n\nThe database Class Frame, or object of all class frames\n\ncloseButtonClick\n\nA function that acts as a callback when the panel exit `x` button is clicked\n\nupdateDocument\n\nA function that acts as a callback when the `submit` button is clicked\n\nSearchComponent\n\nA react component used as search component\n\n## Example\n\n```python\nimport React, {useEffect}  from \"react\";\nimport {EditDocumentComponent,useTDBDocuments} from \"@terminusdb/terminusdb-documents-ui-template\"\n\nexport const DocumentEdit = ({type, documentID, tdbClient}) => { \n    const {\n        updateDocument,\n        getDocument,\n        selectedDocument,\n        getDocumentFrames,\n        frames,\n        error,\n        setError\n    } = useTDBDocuments(tdbClient)\n\n     const  updateDocumentHandler = async (jsonDoc) =>{\n        const docUp = await updateDocument(jsonDoc)\n        if(docUp){\n            getDocument(documentID)\n            // do somethig after update document\n        }\n   }\n    // implement the chage method\n    useEffect(() => {\n        getDocumentFrames()\n        getDocument(documentID)\n    },[])\n\n    const closeButtonClick = () =>{\n       // do something after click the close panel button the interface\n    }\n\n    const DocumentSearchComponent = () =>{\n        //make you document search component\n        return </div>\n    }\n\n    if(!frames) return  <div>{`Fetching frames for document type ${type} ...`}</div>\n    const errorMessage = typeof error === \"object\" ? JSON.stringify(error,null,4) : error\n\n    return <React.Fragment>\n            {error && <div>Server Error: {errorMessage} </div>}\n            <EditDocumentComponent\n                SearchComponent={DocumentSearchComponent}\n                documentID={documentID} \n                updateDocument={updateDocumentHandler}\n                type={type}\n                frames={frames}\n                closeButtonClick={closeButtonClick}\n                documentJson={selectedDocument}\n            />\n        </React.Fragment>\n}\n```\n\nView the EditDocumentComponent component integrated inside a dashboard here\n\n[EditDocumentComponent full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/DocumentEdit.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "EditDocumentComponent",
      "description": "The EditDocumentComponent allows you to edit an existing document using the FrameViewer component",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "ListDocumentsComponent"
    },
    "slug": "list-documents-component",
    "body": {
      "@type": "Body",
      "value": "The `ListDocumentsComponent` element allows you to visualize the documents inside the [TDBReactTable](/docs/tdb-react-table/) and query the documents using the advanced search component.\n\n### Installation\n\nInstall the dependencies from npm\n\n```\n npm install @terminusdb/terminusdb-documents-ui\n npm install @terminusdb/terminusdb-react-table\n npm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n### Properties\n\nProperties\n\nDescription\n\ntype\n\nThe document type\n\ngqlQuery\n\nThe graphql query\n\napolloClient\n\nAn apollo client instance - [documentation](https://www.apollographql.com/docs/react/)\n\ntableConfig\n\nAn object with the table configuration to pass to the [TDBReactTable Component](/docs/tdb-react-table/)\n\nadvancedSearchConfig\n\nAn object with the advancedSearch configuration to pass to the [Advanced Search Component](/docs/tdb-react-table/#advancedsearch)\n\nonRowClick\n\nA function that acts as a callback when the table row is clicked\n\nonViewButtonClick\n\nA function that acts as a callback when the table row view button is clicked\n\nonEditButtonClick\n\nA function that acts as a callback when the table row edit button is clicked\n\nonDeleteButtonClick\n\nA function that acts as a callback when the table row delete button is clicked\n\nonCreateButtonClick\n\nA function that acts as a callback when the create button is clicked\n\nshowGraphqlTab\n\nA boolean property that enables the GraphQL query view tab\n\n### Example\n\n```python\nimport React, {useEffect} from \"react\";\nimport {gql} from \"@apollo/client\";\nimport { ListDocumentsComponent,useTDBDocuments } from \"@terminusdb/terminusdb-documents-ui-template\";\n\n// I pass this so I'm sure it exists before loading the component\nexport const ListDocuments = ({type,apolloClient,tdbClient}) => {    \n    const {deleteDocument,\n        loading,\n        error,\n        getGraphqlTablesConfig,\n        documentTablesConfig,\n        setError} = useTDBDocuments(tdbClient)\n\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        getGraphqlTablesConfig()\n    },[tdbClient])\n\n    async function callDeleteDocument(row){\n        var answer = window.confirm(\"Are you sure you want to delete this document\");\n        if (answer) {\n            let fullId = row['id']\n            const delCall = await deleteDocument(fullId)\n            if(delCall){\n               //do something after delete\n            }\n        } \n    }\n\n    const onViewClick = (row) =>{\n        let fullId = row['id']\n        let fullIdEncode = btoa(fullId)\n         //do something after row view button click\n    }\n\n    const onEditClick = (row) =>{\n        let fullId = row['id']\n        let fullIdEncode = btoa(fullId)\n         //do something after row edit button click\n    }\n\n    function handleCreate(e) {\n        //do something after create button  click\n    }\n\n    if(loading) return <div>{`Fetching ${type} ...`}></div>\n\n    const querystr  = documentTablesConfig ? documentTablesConfig.objQuery[type].query : null\n    const query = querystr ? gql`${querystr}` : false\n    const tableConfig =  documentTablesConfig && documentTablesConfig.tablesColumnsConfig ? documentTablesConfig.tablesColumnsConfig[type] : []\n    const advancedSearchConfig = documentTablesConfig && documentTablesConfig.advancedSearchObj ? documentTablesConfig.advancedSearchObj[type] : null\n\n    const errorMessage = typeof error === \"object\" ? JSON.stringify(error,null,4) : error\n\n    return  <React.Fragment>\n             {errorMessage  && <div>Server Error: {errorMessage} </div>}}\n            {query && tableConfig &&\n            <ListDocumentsComponent type={type}\n                gqlQuery={query} \n                apolloClient={apolloClient} \n                tableConfig={tableConfig} \n                advancedSearchConfig ={advancedSearchConfig}\n                onRowClick={onViewClick} \n                onViewButtonClick={onViewClick}\n                onEditButtonClick={onEditClick}\n                onDeleteButtonClick={callDeleteDocument}\n                onCreateButtonClick={handleCreate}/>}\n            </React.Fragment> \n}\n```\n\nView the ListDocumentsComponent integrated inside a dashboard here\n\n[ListDocumentsComponent full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/ListDocuments.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "ListDocumentsComponent",
      "description": "The ListDocumentsComponent element allows you to visualize the documents inside the TDBReactTable and query the documents using the advanced search component",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "NewDocumentComponent"
    },
    "slug": "newdocumentcomponent",
    "body": {
      "@type": "Body",
      "value": "The `NewDocumentComponent` allows you to create new documents using the [FrameViewer](/docs/document-ui-sdk/).\n\n### Installation\n\nInstall the dependencies from npm\n\n```\n npm install @terminusdb/terminusdb-documents-ui\n npm install @terminusdb/terminusdb-react-table\n npm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n### Properties\n\nProperties\n\nDescription\n\ntype\n\nThe document type\n\ndocumentJson\n\nThe document object, it is empty ({}) for new\n\ncreateDocument\n\nA function that acts as a callback when the `submit` button is clicked\n\nframes\n\nThe database Class Frame, or object of all class frames\n\ncloseButtonClick\n\nA function that acts as a callback when the panel exit `x` button is clicked\n\nSearchComponent\n\nA react component used as search component\n\n### Example\n\n```python\n//This is use the NewDocumentComponent template to create a new document type\nimport React, {useEffect}  from \"react\";\n//we import the NewDocumentComponent and the useTDBDocuments from the terminusdb-documents-ui-template\n//you need to pass your terminusdb-client instance and the document type \nimport {NewDocumentComponent,useTDBDocuments} from \"@terminusdb/terminusdb-documents-ui-template\"\n\nexport const DocumentNew = ({type,tdbClient}) => {  \n    const {\n        frames,\n        error,\n        getDocumentFrames,\n        createDocument,\n        setError\n    } = useTDBDocuments(tdbClient)\n\n    useEffect(() => {\n        getDocumentFrames()\n    },[])\n\n    const callCreateDocument = async (jsonDocument) =>{\n        const created = await createDocument(jsonDocument)\n        if(created){\n            //do something after create a new element\n        }\n    }\n\n    const closeButtonClick = () =>{\n       // do something after click the close panel button the interface\n    }\n\n    const DocumentSearchComponent = () =>{\n        //make you document search component\n        return </div>\n    }\n\n    if(!frames) return  <div>{`Fetching frames for document type ${type} ...`}</div>\n    const errorMessage = typeof error === \"object\" ? JSON.stringify(error,null,4) : error\n\n    return  <React.Fragment>\n            {error && <div>Server Error: {errorMessage} </div>}\n                <NewDocumentComponent\n                    SearchComponent={DocumentSearchComponent}\n                    frames={frames}\n                    createDocument={callCreateDocument}\n                    type={type}\n                    closeButtonClick={closeButtonClick}\n                />     \n            </React.Fragment>\n}\n```\n\nView the NewDocumentComponent integrated inside a dashboard here\n\n[NewDocumentComponent full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/DocumentNew.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "NewDocumentComponent",
      "description": "The NewDocumentComponent allows you to create new documents using the FrameViewer",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "ViewDocumentComponent"
    },
    "slug": "viewdocumentcomponent",
    "body": {
      "@type": "Body",
      "value": "The `ViewDocumentComponent` allows you to view existing documents using the [FrameViewer](/docs/document-ui-sdk/) component.\n\n### Installation\n\nInstall the dependencies from npm\n\n```\n npm install @terminusdb/terminusdb-documents-ui\n npm install @terminusdb/terminusdb-react-table\n npm install @terminusdb/terminusdb-documents-ui-templates\n```\n\n### Properties\n\nProperties\n\nDescription\n\ntype\n\nThe document type\n\ndocumentID\n\nThe document ID\n\ndocumentJson\n\nThe document object\n\nframes\n\nThe database Class Frame, or object of all class frames\n\ncloseButtonClick\n\nA function that acts as a callback when the panel exit `x` button is clicked\n\ndeleteDocument\n\nA function that acts as a callback when the delete button is clicked\n\neditDocument\n\nA function that acts as a callback when the edit button is clicked\n\ngetDocumentById\n\nA function that acts as a callback when the a link property (a link to another document) is clicked inside the document interface\n\n### Example\n\n```python\nimport React, {useEffect}  from \"react\";\nimport {ViewDocumentComponent,useTDBDocuments} from \"@terminusdb/terminusdb-documents-ui-template\"\n\nexport const DocumentView = ({tdbClient,type, documentID}) => {      \n    const {\n        frames,\n        selectedDocument,\n        error,\n        deleteDocument,\n        getSelectedDocument,\n        getDocumentById,\n        getDocumentFrames,\n        setError\n    } = useTDBDocuments(tdbClient)\n\n    useEffect(() => {\n        getDocumentFrames()\n        getSelectedDocument(documentID)\n    }, [] )\n\n    async function callDeleteDocument(){\n        var answer = window.confirm(\"Are you sure you want to delete this document\");\n        if (answer) {\n            const delCall = await deleteDocument(documentID)\n            if(delCall){\n                //do something after delete document\n            }\n        } \n    }\n\n    const closeButtonClick = () =>{\n       // do something after click the close panel button the interface\n       // like navigate to the list of documents\n    }\n\n    const gotToEditDocument = () =>{\n       // do something after click the edit button like navigate to the \n       // edit page\n    }\n\n\n    if(!frames) return  <div>{`Fetching frames for document type ${type} ...`}</div>\n    const errorMessage = typeof error === \"object\" ? JSON.stringify(error,null,4) : error\n\n    return <React.Fragment>\n        {error && <div>Server Error: {errorMessage} </div>}\n        <ViewDocumentComponent \n          type={type}\n          getDocumentById={getDocumentById}\n          documentJson={selectedDocument}\n          frames={frames}\n          closeButtonClick={closeButtonClick}\n          documentID={documentID}\n          deleteDocument={callDeleteDocument}\n          editDocument = {gotToEditDocument}\n        />\n    </React.Fragment>\n}\n```\n\nView the ViewDocumentComponent integrated inside a dashboard here\n\n[ViewDocumentComponent full example JS code](https://github.com/terminusdb/dashboard-examples-sandbox/blob/main/terminusdb-documents-ui-template-example/dashboard-demo/src/pages/DocumentView.js)\n\n[Code Sandbox](https://codesandbox.io/s/github/terminusdb/dashboard-examples-sandbox/tree/main/terminusdb-documents-ui-template-example/dashboard-demo)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "ViewDocumentComponent",
      "description": "The ViewDocumentComponent allows you to view existing documents using the FrameViewer component",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Acid Transaction Explanation"
    },
    "slug": "acid-transactions-explanation",
    "body": {
      "@type": "Body",
      "value": "### What is ACID?\n\nACID ([Atomicity](#atomicity), [Consistency](#consistency), [Isolation](#isolation), [Durability](#durability)) are properties of database transactions that are generally considered desirable for many applications.\n\n### Atomicity\n\nAtomicity is an all-or-nothing approach to database transactions. If a transaction starts but does not complete, then all data manipulation or modification operations carried out by that transaction are undone, and any affected data or objects remain unchanged. The database is returned to the state it was in before the transaction started. Atomicity, or atomic transactions, guarantee the consistency and integrity of data and objects, ensuring the database is not left in an inconsistent or partially changed state.\n\n#### Atomicity and immutability\n\nTerminusDB combines atomicity with [immutability](/docs/immutability-explanation/) to provide atomic transactions.\n\n### Consistency\n\nConsistency has multiple forms and can be interpreted in different ways. TerminusDB implements two forms of consistency - full and partial consistency.\n\n#### Full consistency\n\nWhere a schema exists for a TerminusDB database, a transaction will not be completed unless all schema conditions are satisfied. The consistency of the schema is maintained under all conditions.\n\n#### Partial consistency\n\nWhen rebasing, transactions that complete under certain **read-conditions** can be _replayed_ by reordering their commits. Schema consistency is maintained but not under all conditions.\n\n### Isolation\n\nThe isolation property gives a user the impression of being the sole user of a database. The user experiences no currency or conflicts with other users of the database.\n\n#### Read isolation\n\nTerminusDB uses inherent database [immutability](/docs/immutability-explanation/) to ensure each read query exists at a given layer providing each user with an isolated snapshot of the database.\n\n#### Write isolation\n\nSimilar to read isolation, completing write transactions ensures isolation with optimistic concurrency, simply restarting any transactions failing mid-run.\n\n### Durability\n\nTerminusDB is durable. Transactions failing mid-run do not corrupt data. Data is protected from external sources of potential corruption such as operating system bugs. In the unlikely event of a partial commit, previous layers remain unchanged and recoverable. Backups are significantly simplified, requiring copy storage only to ensure a safely recoverable state.\n\n### Further Reading\n\n[**Documents in a knowledge graph and how to use them**](/docs/documents-explanation/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Acid Transactions Explanation",
      "description": "An explanation about Acid Transactions and how TerminusDB and TerminusCMS ensures acid compliance",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Datalog Explanation"
    },
    "slug": "datalog-explanation",
    "body": {
      "@type": "Body",
      "value": "### What is Datalog?\n\nDatalog, a declarative subset of Prolog, is a flexible and powerful declarative query language proficient at dealing with the complex and multi-hop relationships that occur in graphs. Graph query languages not based on Datalog lack the level of clarity, simplicity, and logical framework that Datalog provides.\n\n### Predicates\n\nSimilar to its super-set Prolog, Datalog is based on **predicates**. Predicates are similar to relations in relational languages such as SQL. Queries can use predicates with _logical variables_ to represent unknowns to which meaning is assigned based on a logical formula. Meaning is assigned by joining predicates with logical connectives or operators such as `and` and `or` and [unifying](#unificationandquery) logical variables. Repeated occurrences of the same variable require the query has identical solutions at given points.\n\n### Advantages of Datalog in queries\n\nVariables in Datalog are restricted to finite **atomic** values. The use of atomic values simplifies query optimization and guarantees the termination of queries even in the event of recursion. The finite atomic values restriction is relaxed in [WOQL](/docs/woql-explanation/) (the Web Object Query Language used in TerminusDB) to enable lists that are useful in aggregation and dis-aggregation queries such as `group by` and `member` respectively. However, TerminusDB retains the pure declarative quality of Datalog.\n\n#### Datalog compared with SQL\n\nCompared with relational databases, Datalog provides a more flexible logical framework that is easier to extend consistently with recursive and path-centric operations. Datalog also enables complex joins to be expressed more elegantly with a less verbose syntax. Datalog represents a stepping-stone from relational languages such as SQL to more fully-featured programming languages while retaining the declarative, robust, pervasive, and resilient properties of query languages.\n\n### Unification and query\n\nUnification in Datalog is the process of finding values of logical variables which are consistent for a given logical sentence or query.\n\nA logical variable for a query can only take on one value in a given solution. If the variable is used in two places then these two values must be the same. We can get the concrete value of solutions for a logical value either from an equation or from the definition of a predicate.\n\nWhen we search using datalog in WOQL, we implicitly ask for _all_ solutions (this can be restricted by using additional words such as `limit(n,Q)`). This gives us back something that looks quite similar to a table, but it is a list of solutions with bindings for all logical variables that took on a value during the course of searching for the solutions to the query.\n\n#### An Example\n\nPerhaps the most important predicate in WOQL is `triple` which gives results about edges in the current graph.\n\nOur logical variables are represented as strings with the prefix `\"v:\"`. Our edges are represented by having a position for the _subject_, _predicate_ and _object_ of the edge in the graph. The _predicate_ is the labeled name of the edge, and the _subject_ and _object_ nodes the source, and target respectively.\n\n```\ntriple(\"v:Subject\", \"v:Predicate\", \"v:Object\")\n```\n\nWith this query, we simply get back the solutions for every possible assignment of subjects, predicates, and objects that our graph currently has, that is, all edges in the graph. The concrete referents for the subject, predicate and object are data points represented by a URI (a universal resource indicator).\n\n```\ntriple(\"v:Subject\", \"v:Predicate\", \"v:Intermediate\")\ntriple(\"v:Intermediate\", \"v:Predicate\", \"v:Object\")\n```\n\nIn this second query, we have _joined_ two predicates together by requiring that the target of the first edge is the source of the second. This gives us back all two-hop paths possible in the graph.\n\n```\ntriple(\"My_Object\", \"v:Predicate\", \"v:Intermediate\")\ntriple(\"v:Intermediate\", \"v:Predicate\", \"v:Object\")\n```\n\nAnd here we refer to a specific starting node and search for every two-hop path starting from _this_ object.\n\n### Further Reading\n\n[**Documents in a knowledge graph and how to use them**](/docs/documents-explanation/)."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Datalog Explanation | TerminusCMS & TerminusDB",
      "description": "A brief explanation of Datalog and its benefits in database queries.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Documents Explanation"
    },
    "slug": "documents-explanation",
    "body": {
      "@type": "Body",
      "value": "### The TerminusDB document store\n\nTerminusDB is a document store as well as a knowledge graph database. TerminusDB [schemata](/docs/schema-reference-guide/) describe how to interpret segments of graphs as self-contained documents.\n\n### TerminusDB storage structure\n\nThe underlying storage structure of TerminusDB is a **labeled**, **directed**, and **edge-labeled** graph. Each source and target node has a distinct name, and every edge has a name and a direction.\n\n#### Graph segments as documents\n\nSegments of the graph are **documents**. Documents can be extracted as JSON objects, providing a convenient data package for applications. JSON objects can be updated by submitting modified versions. The graph's entire document segment can be deleted by deleting the document. However, the full graph structure is retained, allowing sophisticated search and traversal.\n\n#### Subdocuments overview\n\nDocuments can contain **subdocuments**. A subdocument:\n\n*   Is owned by its containing document.\n*   Is a segment of the graph which is solely pointed to by the containing document.\n*   Can have any number of outgoing links to other documents or subdocuments.\n\nSee the [Subdocuments](#subdocuments) section for more information.\n\n### Simple documents\n\nDocuments are described by creating a class definition in the [schema](/docs/schema-reference-guide/). The simplest document definition contains properties with data elements only.\n\n#### A simple document example\n\nThe [Football roster CSV file](#datafootballrostercsvfile) is loaded using the [Football roster class definition](#codefootballrosterclassdefinition) below. This class definition describes the JSON document that can be submitted or retrieved from the graph.\n\nA valid [Football roster JSON document definition](#codefootballrosterjsondocumentdefinition), which corresponds to a row in the CSV file, is also shown below.\n\n#### Data: Football roster CSV file\n\n```\nname,   position\nGeorge, Centre Back\nDoug,   Full Back\nKaren,  Centre Forward\n```\n\n#### Code: Football roster class definition\n\n```\n{ \"@type\"    : \"@context\",\n  \"@schema\"  : \"terminusdb://Roster/schema#\",\n  \"@base\"    : \"terminusdb://Roster/document\" }\n\n{ \"@type\"   : \"Class\",\n  \"@id\"     : \"Player\",\n  \"name\"    : \"xsd:string\",\n  \"position\": \"xsd:string\" }\n```\n\n#### Code: Football roster JSON document definition\n\n```\n{ \"@type\"   : \"Player\",\n  \"@id\"     : \"Player/George\",\n  \"@base\"   : \"terminusdb://Roster/document\",\n  \"name\"    : \"George\",\n  \"position\": \"Centre Back\" }\n```\n\n#### The JSON document definition\n\nThe following table describes the properties of the JSON document definition above.\n\n#### Table: Properties of the JSON document definition\n\nProperty\n\nValue\n\nDescription\n\n`@type`\n\n`Player`\n\nThe type of data held - a football player\n\n`@id`\n\n`Player/George`\n\nThe address of the document used for retrieval, update, or deletion, or as a reference used in other documents. If the address in `@id` is **unambiguous**, for example, when used in the same collection, then `@id` can be used as-is, i.e., as `Player/George`. Otherwise, the `@base` property is required.\n\n`@base`\n\n`terminusdb://Roster/schema#`\n\nThe **fully qualified** address for `Player/George` expanding to `terminusdb://Roster/document/Player/George`.\n\n#### Unique document @id\n\nIt is important to ensure a unique document `@id`. The parameters `@key` and `@base` are available in the class definition, enabling you to use a calculated `@id`. Refer to the [Schema reference](/docs/schema-reference-guide/) for more information.\n\n### Documents with references\n\nTerminusDB enables references to other documents, forming a **graph of documents**.\n\n#### Create objects from data\n\nThe [simple document example](#asimpledocumentexample) introduced above is convertible to an object that refers to each player, as demonstrated in the code-snippet [Player and roster classes](#codeplayerandrosterclasses). In this snippet, the `Roster` class points to a `Set` of `Player`s (or `Player` classes.)\n\n#### The Set property\n\nThe `Set` property in the code-snippet is a _type family_ allowing us to state that the `player` property can have any number of `Player`s attached. `Set` does not provide ordering or multiplicity; a `Player` is either connected or not connected. For ordering and multiplicity, use `@type` `List` or `Array`.\n\n#### Code: Player and roster classes\n\n```\n{ \"@type\"  : \"@context\",\n  \"@schema\": \"terminusdb://Roster/schema#\",\n  \"@base\"  : \"terminusdb://Roster/document\" }\n\n{ \"@type\"   : \"Class\",\n  \"@id\"     : \"Player\",\n  \"name\"    : \"xsd:string\",\n  \"position\": \"xsd:string\" }\n\n{ \"@type\"    : \"Class\",\n  \"@id\"      : \"Roster\",\n  \"player\"   : { \n     \"@type\" : \"Set\",\n     \"@class\": \"Player\" } }\n```\n\n#### Create documents from class specifications\n\nA set of documents that meets the above specification and that represents the data in the [Football roster CSV file](#datafootballrostercsvfile) can be defined as:\n\n#### Code: CSV roster data in document form\n\n```\n{ \"@type\" : \"Roster\",\n  \"@id\"   : \"Roster/Wolves\",\n  \"player\": [ \"Player/George\", \"Player/Karen\", \"Player/Doug\" ] }\n\n{ \"@type\"   : \"Player\",\n  \"@id\"     : \"Player/George\",\n  \"name\"    : \"George\",\n  \"position\": \"Centre Back\" }\n\n{ \"@type\"   : \"Player\",\n  \"@id\"     : \"Player/Doug\",\n  \"name\"    : \"Doug\",\n  \"position\": \"Full Back\" }\n\n{ \"@type\"   : \"Player\",\n  \"@id\"     : \"Player/Karen\",\n  \"name\"    : \"Karen\",\n  \"position\": \"Centre Forward\" }\n```\n\nThe `Roster` points to the various `Player` documents. When requesting the document `Roster/Wolves`, each player in the `player` array is retrieved. Each identifier can be queried in a similar way to retrieve all associated documents.\n\n### Subdocuments\n\nA subdocument can only be pointed to by its containing document. It is information internal to the identity of a document and not intended to be shared. This designation enables deeply nested JSON documents that are self-contained and retrievable using the TerminusDB [document interface](/docs/document-insertion/).\n\n#### A subdocument example\n\nIn the subdocument example below, the schema specification defines players with a subdocument of `stats`. `Stats` is declared a subdocument using the `@subdocument` property and the special value `[]`. Also, it has a `Random` key, meaning the key is automatically generated if not provided.\n\n#### Code: An example of a player stats subdocument\n\n```\n{ \"@type\"  : \"@context\",\n  \"@schema\": \"terminusdb://Roster/schema#\",\n  \"@base\"  : \"terminusdb://Roster/document\" }\n\n{ \"@type\"       : \"Class\",\n  \"@id\"         : \"Stats\",\n  \"@subdocument\": [],\n  \"@key\"        : { \"@type\" : \"Random\" },\n  \"strength\"    : \"xsd:integer\",\n  \"intelligence\": \"xsd:integer\",\n  \"dexterity\"   : \"xsd:integer\",\n  \"charisma\"    : \"xsd:integer\",\n  \"wisdom\"      : \"xsd:integer\",\n  \"constitution\": \"xsd:integer\" }\n\n{ \"@type\": \"Class\",\n  \"@id\"  : \"Player\",\n  \"name\" : \"xsd:string\",\n  \"stats\": \"Stats\" }\n```\n\nIn the example below, the subdocument enables sending and retrieving `Stats` with the `Player` object. It is also possible for subdocuments to point recursively to other subdocuments or documents.\n\n#### Code: Stats with the player object\n\n```\n{ \"@type\"         : \"Player\",\n  \"@id\"           : \"Player/Hieronymous\",\n  \"stats\"         : \n  { \n    \"@type\"       : \"Stats\",\n    \"strength\"    : 14,\n    \"intelligence\": 10,\n    \"dexterity\"   : 14,\n    \"charisma\"    : 8,\n    \"wisdom\"      : 12,\n    \"constitution\": 9 \n  } \n}\n```\n\n### Visualizing the Graph\n\nDocuments and subdocuments, and references to other documents, provide the best of both worlds: document storage and knowledge graphs. However, visualizing what this means requires a bit of experience.\n\n#### A graph visualization example\n\nThe following Contact graph diagram illustrates the boundaries around what constitutes a document and a subdocument.\n\nAn example schema representing this scenario is provided in the code-snippet [Contact graph schema](#codecontactgraphschema) further below with an example of a corresponding [Contact graph document](#codecontactgraph-document) definition.\n\nWith a bit of practice, designing your knowledge graphs in TerminusDB will become second nature.\n\n#### Diagram: Contact graph\n\n![](https://assets.terminusdb.com/docs/terminusdb-contact-graph-diagram.png)\n\n#### Code: Contact graph schema\n\n```\n{ \"@type\"  : \"@context\",\n  \"@schema\": \"terminusdb://Roster/schema#\",\n  \"@base\"  : \"terminusdb://Roster/document\" }\n\n{ \"@type\"       : \"Class\",\n  \"@id\"         : \"Coordinate\",\n  \"@subdocument\": [],\n  \"@key\"        : { \"@type\" : \"Random\" },\n  \"lat\"         : \"xsd:decimal\",\n  \"long\"        : \"xsd:decimal\" }\n\n{ \"@type\"      : \"Class\",\n  \"@id\"        : \"Map\",\n  \"coordinates\": { \"@type\" : \"Array\",\n                   \"@class\": \"Coordinate\" } }\n\n{ \"@type\": \"Class\",\n  \"@id\"  : \"Country\",\n  \"name\" : \"xsd:string\",\n  \"map\"  : \"Map\" }\n\n{ \"@type\"       : \"Class\",\n  \"@id\"         : \"Address\",\n  \"@subdocument\": [],\n  \"@key\"        : { \"@type\" : \"Random\" },\n  \"country\"     : \"Country\",\n  \"street\"      : \"xsd:string\" }\n\n{ \"@type\"  : \"Class\",\n  \"@id\"    : \"Person\",\n  \"name\"   : \"xsd:string\",\n  \"address\": \"Address\",\n  \"friend\" : \"Person\" }\n```\n\n#### Code: Contact graph document\n\n```\n{ \"@type\"  : \"Person\",\n  \"@id\"    : \"Person/Joe\",\n  \"name\"   : \"Joe Bloggs\",\n  \"address\": { \"@type\"  : \"Address\",\n               \"@id\"    : \"Adress/aa1264e404a5b34381abc37cad83fabd\",\n               \"street\" : \"Elm St.\",\n               \"country\": \"Country/USA\" },\n  \"friend\" : [ \"Person/Jill\" ] }\n\n{ \"@type\"  : \"Person\",\n  \"@id\"    : \"Person/Jill\",\n  \"name\"   : \"Jill Smith\",\n  \"address\": { \"@type\"  : \"Address\",\n               \"@id\"    : \"Adress/5fba7438dc2b23258d304bb8cd1222bd\",\n               \"street\" : \"Main St.\",\n               \"country\": \"Country/Ireland\" },\n  \"friend\" : [ \"Person/Joe\" ] }\n\n{ \"@type\"      : \"Country\",\n  \"@id\"        : \"Country/USA\",\n  \"name\"       : \"USA\",\n  \"coordinates\": [ ... ] }\n\n{ \"@type\"      : \"Country\",\n  \"@id\"        : \"Country/Ireland\",\n  \"name\"       : \"Ireland\",\n  \"coordinates\": [ ... ] }\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Documents Explanation",
      "description": "The types of documents available in TerminusDB and TerminusCMS with examples of their definitions and interactions.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 1"
        },
        "value": "https://assets.terminusdb.com/docs/terminusdb-contact-graph-diagram.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Glossary of Terms"
    },
    "slug": "glossary",
    "body": {
      "@type": "Body",
      "value": "> **Context:** Unless otherwise stated, the context for all definitions is computer, data, or information science.\n> \n> **Source:** Unless otherwise stated, the source of all definitions is [Wikipedia](https://en.wikipedia.org/wiki/Main_Page)\n\n## Graph concepts\n\n### Knowledge Graph\n\nThere are numerous definitions of knowledge graphs. One one the simpler definitions is: A digital structure that represents knowledge as concepts and the relationships between them (facts.) A knowledge graph can include an [ontology](#ontology) that allows both humans and machines to understand and reason about its contents.\n\n[Read more](https://en.wikipedia.org/wiki/Knowledge_graph#Definitions)\n\n### Graph database\n\nA database that uses [graph structures](#graphstructure) for [semantic queries](#semanticquery) with [nodes](#node), [edges](#edge), and [properties](#property) to represent and store data. The edges form the graph. The graph relates the data items in the store to a collection of nodes and edges, the edges representing the relationships between the nodes. The relationships allow data in the store to be linked together directly and, in many cases, retrieved with one operation. Graph databases hold the relationships between data as a priority. Querying relationships is fast because they are perpetually stored in the database. Relationships can be intuitively visualized using graph databases, making them useful for heavily inter-connected data\n\n[Read more](https://en.wikipedia.org/wiki/Graph_database)\n\n### Graph Structure\n\nAn abstract data type for implementing the graph theory concepts of [Undirected](#undirectedgraph) and [Directed](#directedgraph) graphs. The former concept consists of **unordered pairs** of vertices (also called [nodes](#node) or points.) The latter consists of **ordered pairs** of vertices.\n\nA graph data structure consists of a finite set of vertices, together with a set of unordered or ordered pairs of these vertices as defined above. These pairs are known as [edges](#edge) (also called links or lines, and sometimes called arrows or arcs for a directed graph.) The vertices may be part of the graph structure, or may be external [entities](#entity) represented by integer indices or references.\n\nA graph data structure may also associate an edge value to each edge, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.)\n\n[Read more](https://en.wikipedia.org/wiki/Graph_\\(abstract_data_type\\))\n\n### Directed Graph\n\nA directed graph (or **digraph**) is a graph made up of vertices connected by directed [edges](#edge) often called **arcs**.\n\n[Read more](https://en.wikipedia.org/wiki/Directed_graph)\n\n### Ontology\n\nA way of showing the properties of a subject area and how they are related, by defining a set of concepts and categories that represent the subject. An ontology encompasses a representation, formal naming and definition of the categories, properties and relations between the concepts, data and entities that substantiate one, many, or all [domains](#domain) of discourse.\n\n[Read more](https://en.wikipedia.org/wiki/Ontology_\\(information_science\\))\n\n### Semantic Query\n\nSemantic queries allow for queries and analytics of an associative and contextual nature. Semantic queries enable the retrieval of both explicitly and implicitly derived information based on syntactic, semantic and structural information contained in data. They are designed to deliver precise results (possibly the distinctive selection of one single piece of information) or to answer more fuzzy and wide-open questions through pattern matching and digital reasoning.\n\n[Read more](https://en.wikipedia.org/wiki/Semantic_query)\n\n### Node\n\nA **vertex** (plural vertices) or **node** is the fundamental unit of which graphs are formed: an undirected graph consists of a set of vertices and a set of [edges](#edge) (unordered pairs of vertices), while a directed graph consists of a set of vertices and a set of **arcs** (ordered pairs of vertices). In a diagram of a graph, a vertex is usually represented by a circle with a label, and an edge is represented by a line or arrow extending from one vertex to another.\n\n[Read more](https://en.wikipedia.org/wiki/Vertex_\\(graph_theory\\))\n\n### Edge\n\nAn edge (together with [vertices](#node)) is one of the two basic units out of which graphs are constructed. Each edge has two (or in hypergraphs, more) vertices to which it is attached, called its **endpoints**. Edges may be [directed](#directedgraph) or undirected; undirected edges are also called **lines** and directed edges are also called **arcs** or **arrows**. In an undirected simple graph, an edge may be represented as the set of its [vertices](#node), and in a directed simple graph it may be represented as an ordered pair of its vertices. An edge that connects vertices x and y is sometimes written xy.\n\n[Read more](https://en.wikipedia.org/wiki/Glossary_of_graph_theory#edge)\n\n## Data\n\n### Delta Encoding\n\nA way of storing and transmitting data in the form of **deltas** (differences) between sequential data rather than complete files; sometimes referred to as data differencing. Delta encoding is sometimes called delta compression, particularly where archival histories of changes are required, for example, in revision control systems such as [GitHub](https://github.com) and the **TerminusDB** version-controlled graph databases.\n\n[Read more](https://en.wikipedia.org/wiki/Delta_encoding)\n\n### Metadata\n\nMetadata is data that provides information about other data, but not the content of the data, such as the text of a message or an image. There are many distinct types of metadata.\n\n[Read more](https://en.wikipedia.org/wiki/Metadata)\n\n### RDF\n\nThe **Resource Description Framework** (RDF) is a family of **W3C** specifications used as a general method for conceptual description or modeling of information that is implemented in web resources, using a variety of syntax notations and data [serialization](#serialization) formats.\n\n### Triple\n\nA **semantic triple**, or **RDF triple** or simply **triple**, is the atomic data entity in the [RDF](#rdf) data model. A triple is a set of three entities that codifies a statement about [semantic data](#semantic-data) in the form of [subject](#subject)–[predicate](#predicate)–[object](#object) expressions. Examples:\n\n#### Table: Subject-Predicate-Object examples\n\nSubject\n\nPredicate\n\nObject\n\nBob\n\nknows\n\nJohn\n\nBob\n\nis\n\n35\n\nThis format enables knowledge to be represented in a machine-readable way. Every part of an RDF triple is individually addressable via unique URIs. For example, the statement \"Bob knows John\" might be represented in RDF as:\n\n```\nhttp://example.name#Bob12 http://xmlns.com/foaf/0.1/knows http://example.name#John34\n```\n\n[Read more](https://en.wikipedia.org/wiki/Semantic_triple)\n\n### Semantic Data\n\nSemantic data or **Semantic Data Model** (SDM) is a high-level semantics-based database description or model. This database model is designed to capture more of the meaning of an application environment than is possible with contemporary database models.\n\n[Read more](https://en.wikipedia.org/wiki/Semantic_data_model)\n\n### Serialization\n\nThe process of translating a data structure or object state into a format that can be stored (for example, in a file or memory) or transmitted (for example, over a computer network) and reconstructed later (possibly in a different computer environment.)\n\n[Read more](https://en.wikipedia.org/wiki/Serialization)\n\n### Schema\n\nThe organization of data as a blueprint of how the database is constructed.\n\n[Read more](https://en.wikipedia.org/wiki/Database_schema)\n\n### Attribute\n\nThe columns of a table in relational databases. Similar to properties in graph databases.\n\n### Entity\n\nTables in relational databases. Similar to nodes in graph databases.\n\n### Relationship\n\nThe relationships between two tables in relational databases. In graph databases, relationships are directed and named connections between two nodes.\n\n## TerminusDB specific\n\n### WOQL\n\nWOQL (**Web Object Query Language**) is TerminusDB's query language for querying complex data patterns and structures. WOQL is based on three fundamental concepts: WOQL [triples](#triples), WOQL **variables** and WOQL **operators**. WOQL also provides [PCRE](#pcre).\n\n> WOQL does not use the [SPARQL](https://en.wikipedia.org/wiki/SPARQL) protocol.\n\n### Immutable\n\nIn programming, the state of an immutable object is unchangeable, i.e., its state cannot be modified after it is created. In TerminusDB, **immutable data** means an instance of data that cannot be changed after it is created. Newer instances or versions of that data can be created, but the tat version is immutable.\n\n[Read more](https://en.wikipedia.org/wiki/Immutable_object)\n\n### Mutable\n\nIn contrast to an [immutable](#immutable) object, a mutable object is changeable.\n\n[Read more](https://en.wikipedia.org/wiki/Immutable_object)\n\n### PCRE\n\n**Perl Compatible Regular Expressions** (PCRE) is a library that implements a regular expression engine, inspired by the capabilities of the Perl programming language. PCRE's syntax is more powerful and flexible than many other regular-expression libraries.\n\n[Read more](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions)\n\n### IRI\n\nThe **Internationalized Resource Identifier** (IRI) is an internet protocol standard that builds on the Uniform Resource Identifier (URI) protocol by greatly expanding the set of permitted characters. IRIs extend URIs by using the Universal Character Set, where URIs were limited to ASCII, with far fewer characters. IRIs may be represented by a sequence of octets but by definition are defined as a sequence of characters, because IRIs may be spoken or written by hand.\n\n[Read more](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS/DB Glossary of Terms",
      "description": "A glossary of terms for TerminusDB and TerminusCMS",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Graphs Explanation"
    },
    "slug": "graphs-explanation",
    "body": {
      "@type": "Body",
      "value": "### Graph hierarchy\n\nA TerminusDB database is a hierarchical collection of [data graphs](#datagraphs) and [control graphs](#controlgraphs). These graphs are key to providing a graph database system with **collaboration** and **revision control**.\n\n#### Data graphs\n\nData graphs keep track of data and information about data. Each level of the database hierarchy is a combination of the following data graphs.\n\n*   **Instance graphs** contain data for a given level in a hierarchy.\n*   **Schema graphs** contain information about what data is allowed and how to interpret it.\n*   **Inference graphs** enable facts to be inferred about the data.\n\n#### Control graphs\n\nControl graphs govern data graphs and database functionality. Each level of the control graph hierarchy, listed below, consists of one or more data graphs. The remainder of this article explains each control graph and the lowest level of the hierarchy - layers.\n\n*   **Repository graphs** for collaboration.\n*   **Commit graphs** for revision control.\n*   **Branch graphs** for data storage and correctness.\n*   **Layers** for storing data changes.\n\n### Repository graphs\n\nRepository graphs provide collaboration and communication with other TerminusDB instances and keep track of other TerminusDB repositories.\n\n#### Referencing repository graphs\n\nRepository graphs are referenced using the name `_meta` which contains links with various repositories.\n\n#### Repository naming\n\nA repository is addressed by specifying its organization and name. For example, organization `admin`, database name `foo` expressed as `admin/foo`.\n\n#### Local repositories\n\nThe identifier `local` is used for specifying local repositories, for example, `admin/foo/local`.\n\nA local repository in the repository instance data has **layer identifiers** that point to associated commit graphs.\n\n#### Remote repositories\n\nAn identifier other than `local` is used for specifying remote repositories (or remotes.) For example `admin/foo/origin`.\n\nA remote in the repository instance data has layer identifiers **and** the URL of the remote. The URL enables communication with the remote and enables push and pull from various remotes to update and synchronize with the local repository.\n\n### Commit graphs\n\nCommit graphs provide revision control. They contain the information required for time-travel, branch, squash, reset and rebase operations. Commit graphs hold information about branches and all commits on them.\n\n#### Referencing commit graphs\n\nCommit graphs are referenced by appending the name `_commits` to the database identifier, for example: `admin/foo/local/_commits`. Commits are trackable on local and remote TerminusDB instances enabling synchronization with different instances.\n\n#### Branch objects in commit graphs\n\nBranch objects in a commit-graph point to a commit object. A commit object is associated with layers representing the branch of interest. A commit object also has parent commits if the commit has a history.\n\n### Branch graphs\n\nBranch graphs store data in a queryable format and ensure the correctness of data by maintaining a schema.\n\n#### Referencing branch graphs\n\nBranch graphs are referenced with the name `branch` followed by the branch of interest. The default is `main`. For example `admin/foo/local/branch/main`.\n\n### Layers\n\nThe lowest level of the hierarchy is a single graph composed of a sequence of layers. Layers specify each change to data such as additions and deletions.\n\n### Transactions in graphs\n\nA transaction in a graph is also a hierarchical operation, ensuring [ACID transactions](/docs/acid-transactions-explanation/). An update transaction has the following stages:\n\n*   The layers of a branch graph are updated, resulting in the addition of new layers.\n*   A schema check is performed. If the check succeeds, the layer names of the updated graphs are obtained (an update can affect several graphs simultaneously.)\n*   New layers are written as commit objects in the commit instance graph, and the head of the branch is moved, resulting in a new instance graph for the commit-graph.\n*   The layer name of the new instance graph is written to the repository graph, enabling the identification of the current, most recent state of the repository.\n*   The layer name of the repository graph is labeled as the newest version and kept in the layer store as a named pointer to a layer.\n\n### Further Reading\n\n#### [Documents in a knowledge graph and how to use them](/docs/documents-explanation/)"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Graphs Explanation",
      "description": "An introduction to the hierarchy and system of graphs used by TerminusDB and TerminusCMS for collaboration and revision control.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Immutability Explanation"
    },
    "slug": "immutability-explanation",
    "body": {
      "@type": "Body",
      "value": "TerminusDB is an immutable data store. When data is written to a store, it does not change or mutate existing data. Any deleted data is masked, any new data resulting from a transaction is added on top of the mask.\n\n### Advantages of immutability\n\nImmutability has several advantages, including:\n\n*   [Transaction safety](#transactionsafety)\n*   [Lock-free concurrency](#lockfreeconcurrency)\n*   [Commit and branch time travel](#commitandbranchtimetravel)\n*   [Change audit](#changeaudit)\n*   [Collaboration and synchronization](#collaborationandsynchronization)\n\n### Transaction safety\n\nTransactions are safer and more reliable in an immutable store and any issues during transactions are easier to handle. In most cases, even in system crashes, TerminusDB resumes operation with data integrity intact and any incomplete transactions are undone.\n\n### Lock-free concurrency\n\nTerminusDB uses immutable data structures making it lock-free in most cases. The query engine uses optimistic concurrency allowing transactions to retry if their state changed while executing. The lack of locking simplifies the engine and makes deadlocks very unlikely while providing [ACID](/docs/acid-transactions-explanation/) guarantees.\n\n### Commit and branch time travel\n\nThe transaction history of TerminusDB databases is preserved. It is easy to travel back in time to a commit or branch and create a new database starting at any commit. All data and information at a commit point are immediately available, eliminating the requirement to rebuild the state of a past commit.\n\n### Change audit\n\nTime travel is supplemented with information about what was committed, at what date and time, and by whom. Data provenance is reliably tracked adding significant value to data in regulated environments.\n\n### Collaboration and synchronization\n\nHistorical commit information is also required for TerminusDB collaboration functionality. The state of two databases that share a common lineage can be compared. Commits made by different authors can be rerun on the current database using a rebase operation, enabling the synchronization of both databases."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusCMS Immutability Explanation",
      "description": "An explanation of how TerminusDB & TerminusCMS implements immutability, and handles deleted and new data.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "TerminusDB Explanation"
    },
    "slug": "terminusdb-explanation",
    "body": {
      "@type": "Body",
      "value": "### What is TerminusDB?\n\nTerminusDB is a powerful, in-memory graph database enabling you to maximize your productivity and the value of your data. TerminusDB has numerous features and several interfaces enabling you to create data-intensive, immutable, and synchronized databases with built-in version control and other [Git-like](#gitlikemodel) operations.\n\n#### Diagram: Some key features of TerminusDB\n\n![](https://assets.terminusdb.com/docs/terminusdb-what-is-it.png)\n\n### Why choose TerminusDB?\n\nA few of the many reasons to choose TerminusDB as your graph database solution:\n\n#### An enterprise-level graph database\n\nEnterprise-level availability, functionality, performance, scalability, and stability. TerminusDB is a data-intensive, in-memory, high-speed and scalable platform suitable for both small and enterprise-level applications.\n\n#### Quick and easy to use\n\nMaximize your productivity and start realizing the value of your data by having your databases up and running in a few minutes. Easily create, query, and maintain your databases using graphical and programmatic interfaces.\n\n#### Feature-rich and Git-like\n\nNumerous unique features and [Git-like](#gitlikemodel) operations including clone, branch, merge, control and time-travel. TerminusDB databases are immutable, fully preserving data lineage and change history with built-in revision control, similar to distributed version control systems.\n\n#### Advanced query language\n\nA powerful query language enabling fast and recursive searches across complex data patterns.\n\n#### Forms and data validation\n\nGenerate forms for viewing and entering data with automatic data validation.\n\n#### Visual model builder\n\nUse a lightweight Graphical User Interface to easily build, maintain and enforce complex data models.\n\n#### Multiple interfaces\n\nCreate and maintain your databases using programmatic interfaces such as JavaScript and Python APIs.\n\n#### Data-centric collaboration\n\nTerminusDB is highly configurable with powerful features for rapidly and collaboratively creating synchronized, application-centric and data-centric databases. Maximize productivity through application and data-centric distributed development and collaboration.\n\n#### Diagram: Reasons to choose TerminusDB\n\n![](https://assets.terminusdb.com/docs/terminusdb-why-choose.png)\n\n### Git-like model\n\nTerminusDB has many Git-like features including revision-control and distributed collaboration. Similar to Git, TerminusDB is open source, model-driven, and uses the **Resource Description Framework** ([RDF](/docs/glossary/#rdf)) specification for collaboration.\n\n#### Delta-encoding\n\nTerminusDB implements an advanced Git-like model, using [delta encoding](/docs/glossary/#deltaencoding) to store append or delta-only changes to graphs. These deltas are stored in succinct [terminusdb-store](https://github.com/terminusdb/terminusdb-store) data structures. The delta encoding approach enables branch, merge, push, pull, clone, time-travel, and other Git-like operations.\n\n#### Diagram: TerminusDB Git-like operations\n\n![](https://assets.terminusdb.com/docs/terminusdb-git-model.png)\n\n### Further Reading\n\n#### TerminusDB whitepaper\n\nRead our [white paper on succinct data structures and delta encoding in modern databases](https://terminusdb.com/blog/succinct-data-structures-for-modern-databases/).\n\n#### Get started\n\n[Get Started](/docs/get-started-with-terminusdb/) with an overview of the available [Installation Options](/docs/terminusdb-install-options/) and then check out the [how-to guides](/docs/use-the-clients/) for step-by-step help.\n\n#### TerminusCMS\n\nTake a look at the [product tour of TerminusCMS](/docs/product-tour/) for information about the headless content management system.\n\n#### Documents\n\n[Documents](/docs/documents-explanation/) in a knowledge graph and how to use them."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "TerminusDB Explanation",
      "description": "A high-level description of what TerminusDB is, reasons for using TerminusDB, and its Git-like features.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    },
    "media": [
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 1"
        },
        "value": "https://assets.terminusdb.com/docs/terminusdb-what-is-it.png"
      },
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 2"
        },
        "value": "https://assets.terminusdb.com/docs/terminusdb-why-choose.png"
      },
      {
        "@type": "Media",
        "alt": "",
        "caption": "",
        "media_type": "Image",
        "title": {
          "@type": "Title",
          "value": "Image 3"
        },
        "value": "https://assets.terminusdb.com/docs/terminusdb-git-model.png"
      }
    ]
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "What is Schema Weakening"
    },
    "slug": "what-is-schema-weakening",
    "body": {
      "@type": "Body",
      "value": "A schema describes the shape of data in a data product. It provides constraints and assurances about what kind of data will be retrieved.\n\nHowever, often you need to _change_ the schema in the process of developing a data product.\n\n## What is a weak versus a strong schema change?\n\nA schema change is a _weakening_ of the schema if the change can not possibly invalidate any data which was present in the original schema.\n\nSome examples of weakening include:\n\n*   Adding a new class that is not the parent of any existing class is always valid since there are no elements of this class.\n*   Adding a new _optional_ property to a class is also permitted.\n*   Changing a required field to _optional_ or _set_.\n\nSchema weakening is often a desirable approach to schema change as we do not require alterations to any of our data. This can ensure a form of backward compatibility which can avoid problems in long term maintenance.\n\n## Using weakened schemas safely\n\nThe _weakening_ approach also suggests an appropriate style for the consumption of data that is received by clients. The exact shape of a document should not be relied on, as new optional properties could be added, and required properties could be weakened to become optional.\n\nWe should instead test for the existence of a field, before attempting to consume it, and we should avoid clients requiring fields that are not part of a _key_.\n\n## Why do schemas evolve?\n\nSchema evolution can happen at various phases in data product development.\n\nAt the beginning of schema development, it is often the case that the schema evolves very rapidly as we try to capture the important information for consideration or change the way it should be represented.\n\nIn this phase it is common for schema changes to be _strong_, that is they require that the data, if it exists, to be modified.\n\nIf there is very little data it can sometimes be more convenient to delete the data and then alter the schema, to avoid schema violations. Alternatively, one can try to use [schema migration](/docs/schema-migration-reference-guide/) to achieve the desired changes.\n\nLater in schema evolution, there will be clients that rely on the shape of data, and any strong change will require filling data, deleting data, or modifying data which is associated with the existing schema. This strong change will _require_ [schema migration](/docs/schema-migration-reference-guide/).\n\nThis also means that we need to pay special attention to keeping the two in sync. This can best be done by focusing on schema weakening, coupled with a defensive client style as described above."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "What is Schema Weakening | TerminusCMS",
      "description": "An explanation about schema weakening  and why you need it to change a schema.",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "WOQL Explanation"
    },
    "slug": "woql-explanation",
    "body": {
      "@type": "Body",
      "value": "### WOQL fluent vs. functional style\n\nWOQL supports both **fluent** and **functional** styles for writing queries. The fluent style is recommended for simplifying complex compound query expressions.\n\n#### The fluent style\n\nMany WOQL expressions accept a sub-query as an argument. WOQL enables appending sub-queries to the initial function as a new function. Queries in this style are easier to read and write. Visual parameter matching is easier to perform when checking for query correctness. A simple example below.\n\n#### Code: Fluent style WOQL\n\n```\nselect(a, b).triple(c, d, e)\n```\n\n#### The functional style\n\nSub-queries are contained within the initial function. The example below is the functional style equivalent of the fluent style example.\n\n#### Code: Functional style WOQL\n\n```\nselect(a, b, triple(c, d, e))\n```\n\n#### Conjunctions\n\nFluent queries are parsed left to right. Functions to the right of another function are considered sub-queries of the first function, with one important exception - **conjunction**.\n\n#### Functional style conjunction\n\nThe functional style of expressing conjunction using the WOQL `and()` function is straightforward and is often more useful for clarity:\n\n#### Code: Functional style conjunction\n\n```\nand(triple(a, b, c), triple(d, e, f))\n```\n\n#### Fluid style conjunction\n\nConjunction expressed in fluent style enables the use of any of the three variations shown below.\n\n#### Code: Fluent style conjunction\n\n```\n// Fluent style 1\nand(triple(a, b, c)).triple(d, e, f)\n\n// Fluent style 2\ntriple(a, b, c).and().triple(d, e, f)\n\n// Fluent style 3\ntriple(a, b, c).triple(d, e, f)\n```\n\n#### Implicit and()\n\nIn the example above, fluent style 3 is more concise and unambiguous where WOQL functions that are chained together do not take sub-clauses (or commands.) As conjunction is frequently used, this concise form, where the `and()` is implicit, is more convenient in many situations.\n\n!> Use implicit `and()` with care.\n\n?> if in doubt, use the explicit `and()` functional style as this clarifies which functions are sub-clauses of other functions.\n\nThe conjunction is always applied to the function immediately to the left of the period `.` in the chain, and not to any functions further up the chain. If used improperly with clauses that take sub-clauses, it will produce improperly specified queries, especially with negation (`not`) and optional functions (`opt`).\n\nFor example, consider the following three queries. The first two are equivalent. However, the first query is incorrect and easy to misinterpret when the intended expression is that shown in the third query.\n\n#### Code: Fluent style implicit conjunction\n\n```\ntriple(a, b, c).opt().triple(d, e, f).triple(g, h, i)\n```\n\n#### Code: Functional style explicit conjunction\n\n```\nand(\n    triple(a, b, c),\n    opt(\n        and(\n            triple(d, e, f),\n            triple(g, h, i)\n        )\n    )\n)\n```\n\n#### Code: Fluent style explicit conjunction\n\n```\nand(\n    triple(a, b, c),\n    opt().triple(d, e, f),\n    triple(g, h, i)\n)\n```\n\n### WOQL and JSON-LD\n\nWOQL uses JSON-LD and a formally specified [ontology](/docs/glossary/#ontology) to define the language and transmit queries.\n\nJSON-LD is sometimes tedious for us to read and write. Therefore, WOQL.js is designed to be as easy as possible for developers to write. All WOQL.js queries are translated into the equivalent JSON-LD format for transmission over networks.\n\n#### The WOQLQuery object\n\nThe WOQL.js `json()` function translates any WOQL query to its JSON-LD format, and JSON-LD to its WOQL.js equivalent - a `WOQLQuery()` object.\n\nAs shown in the example below, if passed a JSON-LD (`json_ld`) argument, WOQL.js (`wjs`) will generate the equivalent `WOQLQuery()` object. If an argument is not provided, WOQL.js will return the JSON-LD equivalent of the `WOQLQuery()` object.\n\n#### Code: Using WOQLQuery() and json()\n\n```javascript\nlet wjs = new WOQLQuery().json(json_ld)\njson_ld == wjs.json()\n```\n\n#### Embedding JSON-LD in WOQL.js\n\nIt is possible to use JSON-LD interchangeably within WOQL.js. Wherever a WOQL function or argument can be accepted directly in WOQL.js, the JSON-LD equivalent can also be supplied. For example, the following two WOQL statements are identical.\n\nThere should never be a situation that necessitates using JSON-LD directly. WOQL.js expresses all queries that are expressible in the underlying JSON-LD. However, it can be convenient to embed JSON-LD in queries in some cases.\n\n#### Code: Interchangeable WOQL and JSON-LD\n\n```\ntriple(a, b, 1) == triple(a, b, {\"@type\": \"xsd:integer\", \"@value\": 1})\n```\n\n### WOQL variables\n\nWOQL allows variables or constants to be substituted for any argument to all its functions, except for the resource identifier functions: `using`, `with`, `into`, `from`. These functions are used for specifying the graphs against which operations such as queries are carried out.\n\n#### Unification\n\nWOQL uses the formal-logical approach to variables known as unification borrowed from the Prolog engine that implements WOQL within TerminusDB.\n\n#### Unification in variables\n\nUnification in variables means each valid value for a variable, as constrained by the totality of the query, will produce a new row in the results. For multiple variables, the rows returned are the cartesian product of all the possible combinations of variable values in the query.\n\n#### Unification in functions\n\nUnification in functions enables most WOQL functions to serve as both pattern matchers and pattern generators, depending on whether a variable or constant is provided as an argument. If a variable is provided, WOQL will generate all possible valid solutions which fill the variable value. If a constant is provided, WOQL will match only those solutions with exactly that value. Except for resource identifiers, WOQL functions accept either variables or constants in virtually all of their arguments.\n\n#### Expressing variables\n\nIn WOQL.js, there are two distinct ways of expressing variables within queries. All are semantically equivalent. The first is generally preferred as it is easier to type and easier to distinguish variables from constants at a glance due to the lack of quotation marks around the variables\n\n#### Code: WOQL variables using let\n\n```javascript\nlet [a, b, c] = vars('a', 'b', 'c')\ntriple(a, b, c)\n```\n\n#### Code: WOQL variables using prefix v:\n\n```\ntriple('v:a', 'v:b', 'v:c')\n```\n\n### WOQL prefixes\n\nInternally, TerminusDB uses strict [RDF](/docs/glossary/#rdf) rules to represent all data. This means all identifiers and properties are represented by [IRIs](/docs/glossary/#iri) (a superset of URLs.)\n\n#### Shorthand prefixes\n\nHowever, IRIs are difficult to remember and tedious to type. RDF generally solves this problem by allowing prefixed shorthand forms. For example, `\"http://obscure.w3c.url/with/embedded/dates#type\"` is shortened to `\"rdf:type\"`.\n\n#### Prefixes @base and @schema\n\nTerminusDB also defines the two **optional** prefixes listed below. These enable users to write expressions such as `\"@base:X\"` or `\"@schema:X\"` and ensure expressions always resolve to valid IRIs in all databases.\n\n*   The `\"@base\"` prefix for instance-data IRIs.\n*   The `\"@schema\"` prefix for schema IRIs.\n\n#### Automatic prefixes\n\nWOQL goes a step beyond supporting prefixes by automatically applying prefixes where possible, enabling users to specify prefixes only when necessary. The default prefixes are applied as follows:\n\n*   `\"@base\"` applies to **woql:subject** (first argument to triple) where **instance data IRIs** are normally required.\n*   `\"@schema\"` applies to **woql:predicate** and other arguments (`sub`, `type`) where **schema elements** are normally required.\n*   When standard predicates are used without a prefix, the standard correct prefixes are applied.\n*   `label`\n*   `type`\n*   `comment`\n*   `subClassOf`\n*   `domain`\n*   `range`\n*   Otherwise, if no prefix is applied a string is assumed.\n\n### Further Reading\n\n#### WOQL Reference\n\n[JavaScript](/docs/javascript/) and [Python](/docs/python/) WOQL Reference guides\n\n#### How-to guides\n\nSee the [How-to Guides](/docs/use-the-clients/) for further examples of using WOQL.\n\n#### Documents\n\n[Documents](/docs/documents-explanation/) in a knowledge graph and how to use them."
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "WOQL Explanation",
      "description": "A brief explanation of the TerminusDB Web Object Query Langauge (WOQL)",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  },
  {
    "@type": "Page",
    "title": {
      "@type": "Title",
      "value": "Access Control with the JavaScript Client Reference Guide"
    },
    "slug": "js-client-access-control-reference",
    "body": {
      "@type": "Body",
      "value": "**License**: Apache Version 2\n\n## new AccessControl()\n\nThe AccessControl is a driver to work with TerminusDB and TerminusX access control api for the credential you can use the JWT token, the API token or the basic authentication with username and password\n\n**Example**\n\n```javascript\n//connect with the API token\n//(to request a token create an account in  https://terminusdb.com/)\nconst accessContol = new AccessControl(\"https://servername.com\",\n{organization:\"my_team_name\",\ntoken:\"dGVybWludXNkYjovLy9kYXRhL2tleXNfYXB........\"})\naccessControl.getOrgUsers().then(result=>{\n     console.log(result)\n})\n//connect with the jwt token this type of connection is only for the dashboard\n//or for application integrate with our login workflow\nconst accessContol = new AccessControl(\"https://servername.com\",\n{organization:\"my_team_name\",\njwt:\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYyeTFORUd........\"})\naccessControl.getOrgUsers().then(result=>{\n     console.log(result)\n})\n//if the jwt is expired you can change it with\naccessControl.setJwtToken(\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYy\neTFORUd.......\")\n//connect with the base authentication this type of connection is only for the local installation\nconst accessContol = new AccessControl(\"http://localhost:6363\",\n{organization:\"my_team_name\", user:\"admin\"\nkey:\"mykey\"})\naccessControl.getOrgUsers().then(result=>{\n    console.log(result)\n})\n```\n\n## getDefaultOrganization\n\n##### accessControl.getDefaultOrganization(params) ⇒ `string` | `undefined`\n\nGet a organization from parameters.\n\n**Returns**: `string` | `undefined` - - organization\n\nParam\n\nType\n\nDescription\n\nparams\n\n`object`\n\nThe parameters\n\n## setJwtToken\n\n##### accessControl.setJwtToken(jwt)\n\nSets the Jwt token for the object\n\nParam\n\nType\n\nDescription\n\njwt\n\n`string`\n\nThe jwt api token to use\n\n## setApiToken\n\n##### accessControl.setApiToken(atokenpi)\n\nSets the API token for the object, to request a token create an account in https://terminusdb.com/\n\nParam\n\nType\n\nDescription\n\natokenpi\n\n`string`\n\nThe API token to use to connect with TerminusX\n\n## setApiKey\n\n##### accessControl.setApiKey(atokenpi)\n\nSets the API token for the object, to request a token create an account in https://terminusdb.com/\n\nParam\n\nType\n\nDescription\n\natokenpi\n\n`string`\n\nThe API token to use to connect with TerminusX\n\n## getAPIUrl\n\n##### accessControl.getAPIUrl(cloudAPIUrl) ⇒ `string`\n\nGet a API url from cloudAPIUrl\n\n**Returns**: `string` - apiUrl\n\nParam\n\nType\n\nDescription\n\ncloudAPIUrl\n\n`string`\n\nThe base url for cloud\n\n## customHeaders\n\n##### accessControl.customHeaders(customHeaders) ⇒ `object`\n\nadd extra headers to your request\n\nParam\n\nType\n\ncustomHeaders\n\n`object`\n\n## getOrganization\n\n##### accessControl.getOrganization(organization) ⇒ `object`\n\n\\-- TerminusDB API --- Get an organization from the TerminusDB API.\n\n**Returns**: `object` - - organization\n\nParam\n\nType\n\nDescription\n\norganization\n\n`string`\n\nThe organization\n\n## getAllOrganizations\n\n##### accessControl.getAllOrganizations() ⇒ `Promise`\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Get list of organizations\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\n## createOrganization\n\n##### accessControl.createOrganization(orgName) ⇒ `Promise`\n\n\\-- TerminusDB API --- This end point works in basic authentication, admin user Create an organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to create\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## deleteOrganization\n\n##### accessControl.deleteOrganization(orgName) ⇒ `Promise`\n\n\\-- TerminusDB API --- Delete an Organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to delete\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## createRole\n\n##### accessControl.createRole(\\[name\\], \\[actions\\]) ⇒ `Promise`\n\n\\--TerminusDB API --- basic authentication, admin user. Create a new role in the system database.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[name\\]\n\n`string`\n\nThe role name.\n\n\\[actions\\]\n\n`typedef.RolesActions`\n\nA list of actions\n\n**Example**\n\n```\naccessControl.createRole(\"Reader\",[ACTIONS.INSTANCE_READ_ACCESS]).then(result=>{\n console.log(result)\n})\n```\n\n## deleteRole\n\n##### accessControl.deleteRole(\\[name\\]) ⇒ `Promise`\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Delete role in the system database, (this api is enabled only in the local installation)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[name\\]\n\n`string`\n\nThe role name.\n\n**Example**\n\n```\naccessControl.deleteRole(\"Reader\").then(result=>{\n console.log(result)\n})\n```\n\n## getAllUsers\n\n##### accessControl.getAllUsers() ⇒ `Promise`\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Return the list of all the users (this api is enabled only in the local installation)\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.  \n**Example**\n\n```\naccessControl.getAllUsers().then(result=>{\n console.log(result)\n})\n```\n\n## createUser\n\n##### accessControl.createUser(name, \\[password\\]) ⇒ `Promise`\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Add the user into the system database\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nname\n\n`string`\n\nthe user name\n\n\\[password\\]\n\n`string`\n\nyou need the password for basic authentication\n\n**Example**\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n## deleteUser\n\n##### accessControl.deleteUser(userId) ⇒ `Promise`\n\n\\-- TerminusdDB API --- basic Authentication, admin user. Remove the user from the system database.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nthe document user id\n\n**Example**\n\n```\naccessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})\n```\n\n## manageCapability\n\n##### accessControl.manageCapability(userName, resourceName, rolesArr, operation, scopeType) ⇒ `Promise`\n\n\\-- TerminusdDB API --- Grant/Revoke Capability\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserName\n\n`string`\n\nthe document user id\n\nresourceName\n\n`string`\n\nthe name of a (database or team)\n\nrolesArr\n\n`array`\n\nthe roles name list\n\noperation\n\n`typedef.CapabilityCommand`\n\ngrant/revoke operation\n\nscopeType\n\n`typedef.ScopeType`\n\nthe resource type (database or organization)\n\n**Example**\n\n```\n//we add an user to an organization and manage users' access\n//the user myUser can  access the Organization and all the database under the organization with \"reader\" Role\nclient.manageCapability(myUser,myteam,[reader],\"grant\",\"organization\").then(result=>{\n consol.log(result)\n})\n//the user myUser can  access the database db__001 under the organization myteam\n//with \"writer\" Role\nclient.manageCapability(myUser,myteam/db__001,[writer],\"grant\",\"database\").then(result=>{\n consol.log(result)\n})\n```\n\n## getAccessRoles\n\n##### accessControl.getAccessRoles() ⇒ `Promise`\n\n\\--TerminusX and TerminusDB API --- Get all the system database roles types.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\n## getOrgUsers\n\n##### accessControl.getOrgUsers(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX and TerminusDB API -- Get all the organization's users and roles,\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\naccessControl.getOrgUsers().then(result=>{\n console.log(result)\n})\n//this function will return an array of capabilities with users and roles\n//-- TerminusX --  response array example\n//[{capability: \"Capability/3ea26e1d698821c570afe9cb4fe81a3......\"\n//     email: {@type: \"xsd:string\", @value: \"user@terminusdb.com\"}\n//     picture: {@type: \"xsd:string\",…}\n//     role: \"Role/dataReader\"\n//     scope: \"Organization/my_org_name\"\n//     user: \"User/auth0%7C613f5dnndjdjkTTT\"}]\n//\n//\n// -- Local Installation -- response array example\n//[{ \"@id\":\"User/auth0%7C615462f8ab33f4006a6bee0c\",\n//  \"capability\": [{\n//   \"@id\":\"Capability/c52af34b71f6f8916ac0115ecb5fe0e31248ead8b1e3d100852015...\",\n//   \"@type\":\"Capability\",\n//  \"role\": [{\n//    \"@id\":\"Role/admin\",\n//    \"@type\":\"Role\",\n//    \"action\": [\"instance_read_access\"],\n//     \"name\":\"Admin Role\"\n//     }],\n//  \"scope\":\"Organization/@team\"}]]\n```\n\n## getTeamUserRoles\n\n##### accessControl.getTeamUserRoles(\\[userName\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX and TerminusDB API -- Get the user roles for a given organization or the default organization,\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[userName\\]\n\n`string`\n\nThe organization name.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getTeamUserRole(\"myUser\").then(result=>{\n console.log(result)\n})\n//response object example\n{\n \"@id\": \"User/myUser\",\n  \"capability\": [\n        {\n          \"@id\":\"Capability/server_access\",\n          \"@type\":\"Capability\",\n          \"role\": [{\n             \"@id\":\"Role/reader\",\n              \"@type\":\"Role\",\n             \"action\": [\n                \"instance_read_access\",\n             ],\n              \"name\":\"reader\"\n            }],\n          \"scope\":\"Organization/myteam\"\n        }\n      ],\n  \"name\": \"myUser\"\n}\n```\n\n## ifOrganizationExists\n\n##### accessControl.ifOrganizationExists(orgName) ⇒ `Promise`\n\n\\-- TerminusX API --- Check if the organization exists. it is a Head call . IMPORTANT This does not work with the API-TOKEN.\n\n**Returns**: `Promise` - A promise that returns the call status object, 200: if the organization exists and 404: if the organization does not exist\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to check if exists.\n\n## createOrganizationRemote\n\n##### accessControl.createOrganizationRemote(orgName) ⇒ `Promise`\n\n\\-- TerminusX API --- IMPORTANT This does not work with the API-TOKEN. Create an organization\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\norgName\n\n`string`\n\nThe organization name to create\n\n**Example**\n\n```\naccessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})\n```\n\n## getPendingOrgInvites\n\n##### accessControl.getPendingOrgInvites(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Get the pending invitations list.\n\n**Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst invitationList = accessControl.getPendingOrgInvites().then(result=>{\n   console.log(invitationList)\n})\n//this will return an array of invitations object like this\n//[{@id: \"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc2ac51161ef5ba\ncb0988d992c4bce82b3fa5d25\"\n//      @type: \"Invitation\"\n//      creation_date: \"2021-10-22T11:13:28.762Z\"\n//      email_to: \"new_user@terminusdb.com\"\n//      invited_by: \"User/auth0%7C6162f8ab33567406a6bee0c\"\n//      role: \"Role/dataReader\"\n//      status: \"needs_invite\"}]\n```\n\n## sendOrgInvite\n\n##### accessControl.sendOrgInvite(userEmail, role, \\[note\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Send a new invitation **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserEmail\n\n`string`\n\nThe email of user.\n\nrole\n\n`string`\n\nThe role for user. (the document @id role like Role/collaborator)\n\n\\[note\\]\n\n`string`\n\nThe note to send with the invitation.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.sendOrgInvite(\"new_user@terminusdb.com\",\"Role/admin\",\n\"please join myteam\").then(result=>{\n   console.log(result)\n})\n```\n\n## getOrgInvite\n\n##### accessControl.getOrgInvite(inviteId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Get the invitation info **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to retrieve.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc\n2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.getOrgInvite(fullInviteId).then(result=>{\n console.log(result)\n})\n```\n\n## deleteOrgInvite\n\n##### accessControl.deleteOrgInvite(inviteId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Delete an invitation **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to delete.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.deleteOrgInvite(fullInviteId).then(result=>{\n     console.log(result)\n})\n```\n\n## updateOrgInviteStatus\n\n##### accessControl.updateOrgInviteStatus(inviteId, accepted, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Accept /Reject invitation. if the invitation has been accepted we add the current user to the organization. the only user that can accept this invitation is the user registered with the invitation email, we indentify the user with the jwt token **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\ninviteId\n\n`string`\n\nThe invite id to updated.\n\naccepted\n\n`boolean`\n\nThe status of the invitation.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.updateOrgInviteStatus(fullInviteId,true).then(result=>{\n  console.log(result)\n})\n```\n\n## getTeamUserRole\n\n##### accessControl.getTeamUserRole(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API --- Get the user role for a given organization or the default organization The user is identified by the jwt or the access token **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getTeamUserRole().then(result=>{\n console.log(result)\n})\n//response object example\n{\"userRole\":\"Role/admin\"}\n```\n\n## removeUserFromOrg\n\n##### accessControl.removeUserFromOrg(userId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Remove an user from an organization, only an admin user can remove an user from an organization **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe id of the user to be removed. (this is the document user's @id)\n\n\\[orgName\\]\n\n`string`\n\nThe organization name in which the user is to be removed.\n\n**Example**\n\n```\naccessControl.removeUserFromOrg(\"User/auth0%7C613f5dnndjdjkTTT\",\"my_org_name\").then(result=>{\n console.log(result)\n})\n```\n\n## getDatabaseRolesOfUser\n\n##### accessControl.getDatabaseRolesOfUser(userId, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Get the user's role for every databases under the organization **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.getDatabaseRolesOfUser('User/auth0%7C61790e366377Yu6596a').then(result=>{\n     console.log(result)\n})\n//this is a capabilities list of databases and roles\n//[ {capability: \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\n//if there is an id we have a user specific capabality for this database\n   // name: {@type: \"xsd:string\", @value: \"profiles_test\"}\n   // role: \"Role/dataUpdater\"\n   // scope: \"UserDatabase/7ebdfae5a02bc7e8f6d79sjjjsa4e179b1df9d4576a3b1d2e5ff3b4859\"\n   // user: \"User/auth0%7C61790e11a3966d006906596a\"},\n//{ capability: null\n// if the capability id is null the user level of access for this database is the\nsame of the team\n  //name: {@type: \"xsd:string\", @value: \"Collab002\"}\n  //role: \"Role/dataReader\"\n  // scope: \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\n  //user: \"User/auth0%7C61790e11a3966d006906596a\"}]\n```\n\n## createUserRole\n\n##### accessControl.createUserRole(userId, scope, role, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Create a user's a role for a resource (organization/database) **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\nscope\n\n`string`\n\nThe resource name/id.\n\nrole\n\n`string`\n\nThe user role to be assigned.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\naccessControl.assignUserRole('User/auth0%7C61790e11a3966d006906596a',dbId,\n\"Role/collaborator\").then(result=>{\n     console.log(result)\n})\n```\n\n## updateUserRole\n\n##### accessControl.updateUserRole(userId, capabilityId, scope, role, \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Update user's a role for a resource (organization/database), (this api works only in terminusX) **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\nuserId\n\n`string`\n\nThe user's id.\n\ncapabilityId\n\n`string`\n\nThe capability id.\n\nscope\n\n`string`\n\nThe resource name/id.\n\nrole\n\n`string`\n\nThe user role to be updated.\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```javascript\nconst dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\nconst capId= \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\naccessControl.updateUserRole('User/auth0%7C61790e11a3966d006906596a',capId,dbId,\n\"Role/dataUpdater\").then(result=>{\n     console.log(result)\n})\n```\n\n## accessRequestsList\n\n##### accessControl.accessRequestsList(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Get all the access request list for a specify organization **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.accessRequestsList().then(result=>{\n console.log(result)\n})\n```\n\n## sendAccessRequest\n\n##### accessControl.sendAccessRequest(\\[email\\], \\[affiliation\\], \\[note\\], \\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Get all the access request list for a specify organization **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[email\\]\n\n`string`\n\nthe user email.\n\n\\[affiliation\\]\n\n`string`\n\nthe user affiliation, company, university etc..\n\n\\[note\\]\n\n`string`\n\nthe message for the team admin\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.sendAccessRequest(\"myemail@terminusdb.com\",\n \"my_company\",\n \"please add me to your team\"\n).then(result=>{\n console.log(result)\n})\n```\n\n## deleteAccessRequest\n\n##### accessControl.deleteAccessRequest(\\[orgName\\]) ⇒ `Promise`\n\n\\-- TerminusX API -- Delete an access request to join your team, only an admin user can delete it **Returns**: `Promise` - A promise that returns the call response object, or an Error if rejected.\n\nParam\n\nType\n\nDescription\n\n\\[orgName\\]\n\n`string`\n\nThe organization name.\n\n**Example**\n\n```\naccessControl.deleteAccessRequest(\"djjdshhsuuwewueueuiHYHYYW.......\").then(result=>{\n console.log(result)\n})\n```"
    },
    "seo_metadata": {
      "@type": "SEOMetadata",
      "title": "Access Control with the JavaScript Client Reference Guide",
      "description": "A reference guide to help you understand access control using the JavaScript Client",
      "og_image": "https://assets.terminusdb.com/docs/technical-documentation-terminuscms-og.png"
    }
  }
]
