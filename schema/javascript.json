{
  "@type": "Application",
  "language": "Javascript",
  "version": "10.0.33",
  "license": "Apache-2.0",
  "name": "@terminusdb/terminusdb-client",
  "summary": "TerminusDB client library",
  "modules": [
    {
      "@type": "Module",
      "name": "lib",
      "classes": [
        {
          "@type": "Class",
          "name": "AccessControl",
          "summary": "The AccessControl is a driver to work with\nTerminusDB and TerminusX access control api\nfor the credential you can use the JWT token, the API token or\nthe basic authentication with username and password",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "getDefaultOrganization",
              "summary": "Get a organization from parameters.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "object",
                  "summary": "The parameters"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- organization",
                "type": "string|undefined"
              }
            },
            {
              "@type": "Definition",
              "name": "setJwtToken",
              "summary": "Sets the Jwt token for the object",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "jwt",
                  "type": "string",
                  "summary": "The jwt api token to use"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "setApiToken",
              "summary": "Sets the API token for the object, to request a token create an account in  https://terminusdb.com/",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "atokenpi",
                  "type": "string",
                  "summary": "The API token to use to connect with TerminusX"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "setApiKey",
              "summary": "Sets the API token for the object, to request a token create an account in  https://terminusdb.com/",
              "examples": [],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "atokenpi",
                  "type": "string",
                  "summary": "The API token to use to connect with TerminusX"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "getAPIUrl",
              "summary": "Get a API url from cloudAPIUrl",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "cloudAPIUrl",
                  "type": "string",
                  "summary": "The base url for cloud"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "apiUrl",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "customHeaders",
              "summary": "add extra headers to your request",
              "examples": [],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "customHeaders",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "getOrganization",
              "summary": "-- TerminusDB API ---\nGet an organization from the TerminusDB API.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "organization",
                  "type": "string",
                  "summary": "The organization"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- organization",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "getAllOrganizations",
              "summary": "-- TerminusDB API ---\nThis end point works in basic authentication, admin user\nGet list of organizations",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createOrganization",
              "summary": "-- TerminusDB API ---\nThis end point works in basic authentication, admin user\nCreate an organization",
              "examples": [
                "accessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name to create"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteOrganization",
              "summary": "-- TerminusDB API ---\nDelete an Organization",
              "examples": [
                "accessControl.deleteOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name to delete"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createRole",
              "summary": "--TerminusDB API ---\nbasic authentication, admin user.\nCreate a new role in the system database.",
              "examples": [
                "accessControl.createRole(\"Reader\",[ACTIONS.INSTANCE_READ_ACCESS]).then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "name",
                  "type": "string",
                  "summary": "The role name."
                },
                {
                  "@type": "Parameter",
                  "name": "actions",
                  "type": "typedef.RolesActions",
                  "summary": "A list of actions"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteRole",
              "summary": "-- TerminusdDB API ---\nbasic Authentication, admin user.\nDelete role in the system database, (this api is enabled only in the local installation)",
              "examples": [
                "accessControl.deleteRole(\"Reader\").then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "name",
                  "type": "string",
                  "summary": "The role name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getAllUsers",
              "summary": "-- TerminusdDB API ---\nbasic Authentication, admin user.\nReturn the list of all the users (this api is enabled only in the local installation)",
              "examples": [
                "accessControl.getAllUsers().then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createUser",
              "summary": "-- TerminusdDB API ---\nbasic Authentication, admin user.\nAdd the user into the system database",
              "examples": [
                "accessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "name",
                  "type": "string",
                  "summary": "the user name"
                },
                {
                  "@type": "Parameter",
                  "name": "password",
                  "type": "string",
                  "summary": "you need the password for basic authentication"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteUser",
              "summary": "-- TerminusdDB API ---\nbasic Authentication, admin user.\nRemove the user from the system database.",
              "examples": [
                "accessControl.deleteUser(userId).then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userId",
                  "type": "string",
                  "summary": "the document user id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "manageCapability",
              "summary": "-- TerminusdDB API ---\nGrant/Revoke Capability",
              "examples": [
                "//we add an user to an organization and manage users' access\n//the user myUser can  access the Organization and all the database under the organization with \"reader\" Role\nclient.manageCapability(myUser,myteam,[reader],\"grant\",\"organization\").then(result=>{\n consol.log(result)\n})\n\n//the user myUser can  access the database db__001 under the organization myteam\n//with \"writer\" Role\nclient.manageCapability(myUser,myteam/db__001,[writer],\"grant\",\"database\").then(result=>{\n consol.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userName",
                  "type": "string",
                  "summary": "the document user id"
                },
                {
                  "@type": "Parameter",
                  "name": "resourceName",
                  "type": "string",
                  "summary": "the name of a (database or team)"
                },
                {
                  "@type": "Parameter",
                  "name": "rolesArr",
                  "type": "array",
                  "summary": "the roles name list"
                },
                {
                  "@type": "Parameter",
                  "name": "operation",
                  "type": "typedef.CapabilityCommand",
                  "summary": "grant/revoke operation"
                },
                {
                  "@type": "Parameter",
                  "name": "scopeType",
                  "type": "typedef.ScopeType",
                  "summary": "the resource type (database or organization)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getAccessRoles",
              "summary": "--TerminusX and TerminusDB API ---\nGet all the system database roles types.",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getOrgUsers",
              "summary": "-- TerminusX and TerminusDB API --\nGet all the organization's users and roles,",
              "examples": [
                "accessControl.getOrgUsers().then(result=>{\n console.log(result)\n})\n\n//this function will return an array of capabilities with users and roles\n//-- TerminusX --  response array example\n//[{capability: \"Capability/3ea26e1d698821c570afe9cb4fe81a3......\"\n//     email: {@type: \"xsd:string\", @value: \"user@terminusdb.com\"}\n//     picture: {@type: \"xsd:string\",…}\n//     role: \"Role/dataReader\"\n//     scope: \"Organization/my_org_name\"\n//     user: \"User/auth0%7C613f5dnndjdjkTTT\"}]\n//\n//\n// -- Local Installation -- response array example\n//[{ \"@id\":\"User/auth0%7C615462f8ab33f4006a6bee0c\",\n//  \"capability\": [{\n//   \"@id\":\"Capability/c52af34b71f6f8916ac0115ecb5fe0e31248ead8b1e3d100852015...\",\n//   \"@type\":\"Capability\",\n//  \"role\": [{\n//    \"@id\":\"Role/admin\",\n//    \"@type\":\"Role\",\n//    \"action\": [\"instance_read_access\"],\n//     \"name\":\"Admin Role\"\n//     }],\n//  \"scope\":\"Organization/@team\"}]]"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getTeamUserRoles",
              "summary": "-- TerminusX and TerminusDB API --\nGet the user roles for a given organization or the default organization,",
              "examples": [
                "accessControl.getTeamUserRole(\"myUser\").then(result=>{\n console.log(result)\n})\n\n//response object example\n{\n \"@id\": \"User/myUser\",\n  \"capability\": [\n        {\n          \"@id\":\"Capability/server_access\",\n          \"@type\":\"Capability\",\n          \"role\": [{\n             \"@id\":\"Role/reader\",\n              \"@type\":\"Role\",\n             \"action\": [\n                \"instance_read_access\",\n             ],\n              \"name\":\"reader\"\n            }],\n          \"scope\":\"Organization/myteam\"\n        }\n      ],\n  \"name\": \"myUser\"\n}"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userName",
                  "type": "string",
                  "summary": "The organization name."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "ifOrganizationExists",
              "summary": "-- TerminusX API ---\nCheck if the organization exists. it is a Head call .\nIMPORTANT This does not work with the API-TOKEN.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name to check if exists."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call status object,  200: if the organization\nexists and 404: if the organization does not exist",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createOrganizationRemote",
              "summary": "-- TerminusX API ---\nIMPORTANT This does not work with the API-TOKEN.\nCreate an organization",
              "examples": [
                "accessControl.createOrganization(\"my_org_name\").then(result=>{\n     console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name to create"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getPendingOrgInvites",
              "summary": "-- TerminusX API ---\nGet the pending invitations list.",
              "examples": [
                "const invitationList = accessControl.getPendingOrgInvites().then(result=>{\n   console.log(invitationList)\n\n})\n//this will return an array of invitations object like this\n//[{@id: \"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc2ac51161ef5ba\ncb0988d992c4bce82b3fa5d25\"\n//      @type: \"Invitation\"\n//      creation_date: \"2021-10-22T11:13:28.762Z\"\n//      email_to: \"new_user@terminusdb.com\"\n//      invited_by: \"User/auth0%7C6162f8ab33567406a6bee0c\"\n//      role: \"Role/dataReader\"\n//      status: \"needs_invite\"}]"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "sendOrgInvite",
              "summary": "-- TerminusX API ---\nSend a new invitation",
              "examples": [
                "accessControl.sendOrgInvite(\"new_user@terminusdb.com\",\"Role/admin\",\n\"please join myteam\").then(result=>{\n   console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userEmail",
                  "type": "string",
                  "summary": "The email of user."
                },
                {
                  "@type": "Parameter",
                  "name": "role",
                  "type": "string",
                  "summary": "The role for user. (the document @id role like Role/collaborator)"
                },
                {
                  "@type": "Parameter",
                  "name": "note",
                  "type": "string",
                  "summary": "The note to send with the invitation."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getOrgInvite",
              "summary": "-- TerminusX API ---\nGet the invitation info",
              "examples": [
                "const fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc\n2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.getOrgInvite(fullInviteId).then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inviteId",
                  "type": "string",
                  "summary": "The invite id to retrieve."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteOrgInvite",
              "summary": "-- TerminusX API ---\nDelete an invitation",
              "examples": [
                "const fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.deleteOrgInvite(fullInviteId).then(result=>{\n     console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inviteId",
                  "type": "string",
                  "summary": "The invite id to delete."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "updateOrgInviteStatus",
              "summary": "-- TerminusX API ---\nAccept /Reject invitation. if the invitation has been accepted we add the current user\nto the organization.\n\nthe only user that can accept this invitation is the user registered with the invitation email,\nwe indentify the user with the jwt token",
              "examples": [
                "const fullInviteId=\"Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9\nc0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25\"\naccessControl.updateOrgInviteStatus(fullInviteId,true).then(result=>{\n  console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inviteId",
                  "type": "string",
                  "summary": "The invite id to updated."
                },
                {
                  "@type": "Parameter",
                  "name": "accepted",
                  "type": "boolean",
                  "summary": "The status of the invitation."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getTeamUserRole",
              "summary": "-- TerminusX API ---\nGet the user role for a given organization or the default organization\nThe user is identified by the jwt or the access token",
              "examples": [
                "accessControl.getTeamUserRole().then(result=>{\n console.log(result)\n})\n\n//response object example\n{\"userRole\":\"Role/admin\"}"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "removeUserFromOrg",
              "summary": "-- TerminusX API --\nRemove an user from an organization, only an admin user can remove an user from an organization",
              "examples": [
                "accessControl.removeUserFromOrg(\"User/auth0%7C613f5dnndjdjkTTT\",\"my_org_name\").then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userId",
                  "type": "string",
                  "summary": "The id of the user to be removed. (this is the document user's @id)"
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name in which the user is to be removed."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getDatabaseRolesOfUser",
              "summary": "-- TerminusX API --\nGet the user's role for every databases under the organization",
              "examples": [
                "accessControl.getDatabaseRolesOfUser('User/auth0%7C61790e366377Yu6596a').then(result=>{\n     console.log(result)\n})\n\n//this is a capabilities list of databases and roles\n//[ {capability: \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\n//if there is an id we have a user specific capabality for this database\n   // name: {@type: \"xsd:string\", @value: \"profiles_test\"}\n   // role: \"Role/dataUpdater\"\n   // scope: \"UserDatabase/7ebdfae5a02bc7e8f6d79sjjjsa4e179b1df9d4576a3b1d2e5ff3b4859\"\n   // user: \"User/auth0%7C61790e11a3966d006906596a\"},\n\n//{ capability: null\n// if the capability id is null the user level of access for this database is the\nsame of the team\n  //name: {@type: \"xsd:string\", @value: \"Collab002\"}\n  //role: \"Role/dataReader\"\n  // scope: \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\n  //user: \"User/auth0%7C61790e11a3966d006906596a\"}]"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userId",
                  "type": "string",
                  "summary": "The user's id."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createUserRole",
              "summary": "-- TerminusX API --\nCreate a user's a role for a resource (organization/database)",
              "examples": [
                "const dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\naccessControl.assignUserRole('User/auth0%7C61790e11a3966d006906596a',dbId,\n\"Role/collaborator\").then(result=>{\n     console.log(result)\n\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userId",
                  "type": "string",
                  "summary": "The user's id."
                },
                {
                  "@type": "Parameter",
                  "name": "scope",
                  "type": "string",
                  "summary": "The resource name/id."
                },
                {
                  "@type": "Parameter",
                  "name": "role",
                  "type": "string",
                  "summary": "The user role to be assigned."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "updateUserRole",
              "summary": "-- TerminusX API --\nUpdate user's a role for a resource (organization/database), (this api works only in terminusX)",
              "examples": [
                "const dbId = \"UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f\"\nconst capId= \"Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc\"\naccessControl.updateUserRole('User/auth0%7C61790e11a3966d006906596a',capId,dbId,\n\"Role/dataUpdater\").then(result=>{\n     console.log(result)\n\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "userId",
                  "type": "string",
                  "summary": "The user's id."
                },
                {
                  "@type": "Parameter",
                  "name": "capabilityId",
                  "type": "string",
                  "summary": "The capability id."
                },
                {
                  "@type": "Parameter",
                  "name": "scope",
                  "type": "string",
                  "summary": "The resource name/id."
                },
                {
                  "@type": "Parameter",
                  "name": "role",
                  "type": "string",
                  "summary": "The user role to be updated."
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "accessRequestsList",
              "summary": "-- TerminusX API --\nGet all the access request list for a specify organization",
              "examples": [
                "accessControl.accessRequestsList().then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "sendAccessRequest",
              "summary": "-- TerminusX API --\nGet all the access request list for a specify organization",
              "examples": [
                "accessControl.sendAccessRequest(\"myemail@terminusdb.com\",\n \"my_company\",\n \"please add me to your team\"\n).then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "email",
                  "type": "string",
                  "summary": "the user email."
                },
                {
                  "@type": "Parameter",
                  "name": "affiliation",
                  "type": "string",
                  "summary": "the user affiliation, company, university etc.."
                },
                {
                  "@type": "Parameter",
                  "name": "note",
                  "type": "string",
                  "summary": "the message for the team admin"
                },
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteAccessRequest",
              "summary": "-- TerminusX API --\nDelete an access request to join your team, only an admin user can delete it",
              "examples": [
                "accessControl.deleteAccessRequest(\"djjdshhsuuwewueueuiHYHYYW.......\").then(result=>{\n console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getUserInfo",
              "summary": "-- TerminusX API --\nGet the userinfo teams ownership and subscription",
              "examples": [
                "accessControl.getUserInfo().then(result=>{\n   console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "The organization name."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            }
          ]
        },
        {
          "@type": "Class",
          "name": "connectionConfig.js",
          "summary": "Object representing the state of a connection to a terminus db - these are:\nprovides methods for getting and setting connection parameters",
          "memberFunctions": []
        },
        {
          "@type": "Class",
          "name": "WOQLQuery",
          "summary": "defines the internal functions of the woql query object - the\nlanguage API is defined in WOQLQuery",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "star",
              "summary": "Simple composite functions which produce WOQL queries",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "all",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "Subj",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "Pred",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "Obj",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "Graph",
                  "type": "typedef.GraphRef",
                  "summary": "the resource identifier of a graph possible"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "string",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "boolean",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "tf",
                  "type": "boolean"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "literal",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "any"
                },
                {
                  "@type": "Parameter",
                  "name": "t",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "iri",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "update_triple",
              "summary": "Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the\nnew one (Subject, Predicate, newObjValue)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObjValue",
                  "type": "string|Var",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "oldObjValue",
                  "type": "string|Var",
                  "summary": "The old value of the object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "update_quad",
              "summary": "Update a pattern matching rule for the quad [S, P, O, G]\n(Subject, Predicate, Object, Graph)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObject",
                  "type": "string",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graph",
                  "type": "string",
                  "summary": "the resource identifier of a graph possible value are\nschema/{main - myschema - *} | instance/{main - myschema - *}  | inference/{main - myschema - *}"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Quad Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "nuke",
              "summary": "Deletes all triples in the passed graph (defaults to instance/main)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph from\nwhich all triples will be removed"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the deletion expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "node",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "node",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable containing an IRI which will\nbe the subject of the builder functions"
                },
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "typedef.FuntionType",
                  "summary": "Optional type of builder function to build\n(default is triple)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the partial Node pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "graph",
              "summary": "Sets the graph resource ID that will be used for subsequent chained function calls",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph which will\nbe used for subsequent chained schema calls"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the partial Graph pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "insert",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "id",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing"
                },
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing the IRI of the"
                },
                {
                  "@type": "Parameter",
                  "name": "refGraph",
                  "type": "typedef.GraphRef",
                  "summary": "Optional Graph resource identifier"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the insert expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "parameterError",
              "summary": "Basic Error handling",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "addSubQuery",
              "summary": "Internal library function which adds a subquery and sets the cursor",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "containsUpdate",
              "summary": "Does this query contain an update",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "updated",
              "summary": "Called to inidicate that this query will cause an update to the DB",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "jlt",
              "summary": "Wraps the passed value in a json-ld literal carriage",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "jobj",
              "summary": "Transforms a javascript representation of a query into a json object if needs be",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "asv",
              "summary": "Wraps the elements of an AS variable in the appropriate json-ld",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "wform",
              "summary": "JSON LD Format Descriptor",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "opts",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "arop",
              "summary": "Wraps arithmetic operators in the appropriate json-ld",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "dataList",
              "summary": "takes input that can be either a string (variable name)\nor an array - each element of the array is a member of the list",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "valueList",
              "summary": "takes a list of input that can be any value",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "vlist",
              "summary": "creates an unadorned variable name list",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "dataValueList",
              "summary": "Wraps data values",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "cleanSubject",
              "summary": "Transforms whatever is passed in as the subject into the appropriate json-ld for variable or id",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "cleanPredicate",
              "summary": "Transforms whatever is passed in as the predicate (id or variable) into the\nappropriate json-ld form",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "cleanObject",
              "summary": "Transforms whatever is passed in as the object of\na triple into the appropriate json-ld form (variable, literal or id)",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "cleanGraph",
              "summary": "Transforms a graph filter or graph id into the proper json-ld form",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "expandVariable",
              "summary": "Transforms strings that start with v: into variable json-ld structures",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varname",
                  "type": "unknown",
                  "summary": "will be transformed if it starts with v:"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "getContext",
              "summary": "Retrieves the value of the current json-ld context",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "context",
              "summary": "sets the value of the current json-ld context on a full query scope",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "loadDefaultVocabulary",
              "summary": "vocabulary elements that can be used without prefixes in woql.js queries",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "setVocabulary",
              "summary": "Provides the query with a 'vocabulary' a list of well known predicates that can be used without\nprefixes mapping: id: prefix:id ...",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "execute",
              "summary": "Use instead woqlclient.query('myWOQLQuery')",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "json",
              "summary": "converts back and forward from json\nif the argument is present, the current query is set to it,\nif the argument is not present, the current json version of this query is returned",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "json",
                  "type": "object",
                  "summary": "a query in json format"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "prettyPrint",
              "summary": "Returns a script version of the query",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "clang",
                  "type": "string",
                  "summary": "either \"js\" or \"python\""
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "findLastSubject",
              "summary": "Finds the last woql element that has a subject in it and returns the json for that\nused for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "json",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "findLastProperty",
              "summary": "Finds the last woql element that has a subject in that is a property id\nused for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "json",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "compilePathPattern",
              "summary": "Turns a textual path pattern into a JSON-LD description",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "update_triple",
              "summary": "Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the\nnew one (Subject, Predicate, newObjValue)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObjValue",
                  "type": "string|Var",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "oldObjValue",
                  "type": "string|Var",
                  "summary": "The old value of the object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "star",
              "summary": "Generates a query that by default matches all triples in a graph identified by \"graph\"\nor in all the current terminusDB's graph",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graph",
                  "type": "string|boolean",
                  "summary": "false or the resource identifier of a graph possible\nvalue are schema/{main - myschema - *} | instance/{main - myschema - *}  |\ninference/{main - myschema - *}"
                },
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable,\ndefault value \"v:Subject\""
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable,\n default value \"v:Predicate\""
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal,\ndefault value \"v:Object\""
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "update_quad",
              "summary": "Update a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObject",
                  "type": "string|Var",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Quad Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "insert",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "id",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing"
                },
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing the IRI of the"
                },
                {
                  "@type": "Parameter",
                  "name": "refGraph",
                  "type": "typedef.GraphRef",
                  "summary": "Optional Graph resource identifier"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the insert expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "graph",
              "summary": "Sets the graph resource ID that will be used for subsequent chained function calls",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph which will\nbe used for subsequent chained schema calls"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the partial Graph pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "node",
              "summary": "Specifies the identity of a node that can then be used in subsequent builder functions.\nNote that node() requires subsequent chained functions to complete the triples / quads\nthat it produces - by itself it only generates the subject.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "nodeid",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable containing an IRI which will\nbe the subject of the builder functions"
                },
                {
                  "@type": "Parameter",
                  "name": "chainType",
                  "type": "typedef.FuntionType",
                  "summary": "Optional type of builder function to build\n(default is triple)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the partial Node pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "nuke",
              "summary": "Deletes all triples in the passed graph (defaults to instance/main)",
              "examples": [
                "nuke(\"schema/main\")\n//will delete everything from the schema/main graph"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph from\nwhich all triples will be removed"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the deletion expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "all",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "Subj",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "Pred",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "Obj",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "Graph",
                  "type": "typedef.GraphRef",
                  "summary": "the resource identifier of a graph possible"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "boolean",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "tf",
                  "type": "boolean"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "string",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "literal",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "any"
                },
                {
                  "@type": "Parameter",
                  "name": "t",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "iri",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "s",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "addSubQuery",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "Subq",
                  "type": "WOQLQuery"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "parameterError",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "msg",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "updated",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "read_document",
              "summary": "Read a node identified by an IRI as a JSON-LD document",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "The document id  or a variable to read"
                },
                {
                  "@type": "Parameter",
                  "name": "output",
                  "type": "string",
                  "summary": "Variable which will be bound to the document."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "insert_document",
              "summary": "Insert a document in the graph.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "docjson",
                  "type": "object",
                  "summary": "The document to insert. Must either have an '@id' or\nhave a class specified key."
                },
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "An optional identifier specifying the document location."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "update_document",
              "summary": "Update a document identified by an IRI",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "docjson",
                  "type": "object",
                  "summary": "The document to update. Must either have an '@id' or\nhave a class specified key."
                },
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "An optional identifier specifying the document location."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_document",
              "summary": "Delete a document from the graph.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "The document id  or a variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "wrapCursorWithAnd",
              "summary": "Contains definitions of the WOQL functions which map directly to JSON-LD types\nAll other calls and queries can be composed from these",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "using",
              "summary": "Query running against any specific commit Id",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "refPath",
                  "type": "string",
                  "summary": "path to specific reference Id or commit Id"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "subquery for the specific commit point"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "comment",
              "summary": "Adds a text comment to a query - can also be used to wrap any part of a query to turn it off",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "comment",
                  "type": "string",
                  "summary": "text comment"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "query that is \"commented out\""
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "select",
              "summary": "Filters the query so that only the variables included in [V1...Vn] are returned in the bindings",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string|Var",
                  "summary": "only these variables are returned"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "distinct",
              "summary": "Filter the query to return only results that are distinct in the given variables",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string|Var",
                  "summary": "these variables are guaranteed to be unique as a tuple"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "and",
              "summary": "Logical conjunction of the contained queries - all queries must match or the entire clause fails",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subqueries",
                  "type": "WOQLQuery",
                  "summary": "A list of one or more woql queries to execute as a conjunction"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery object containing the conjunction of queries",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "or",
              "summary": "Creates a logical OR of the arguments",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subqueries",
                  "type": "WOQLQuery",
                  "summary": "A list of one or more woql queries\nto execute as alternatives"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery object containing the logical Or of the subqueries",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "from",
              "summary": "Specifies the database URL that will be the default database for the enclosed query",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                },
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "WOQLQuery",
                  "summary": "The query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the from expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "into",
              "summary": "Specifies the graph resource to write the contained query into",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "The query which will be written into the graph"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which will be written into the graph in question",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate, Object)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "added_triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,\nObject) added in the current layer",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "removed_triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,\nObject) added in the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "link",
              "summary": "Creates a pattern matching rule for triple [Subject, Predicate, Object]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a quad or a triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "value",
              "summary": "Creates a pattern matching rule for triple [Subject, Predicate, Object]\nadd extra information about the type of the value object",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "objValue",
                  "type": "string|number|boolean|Var",
                  "summary": "an specific value"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a quad or a triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "added_quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,\nObject, Graph) removed from the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "removed_quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,\nObject, Graph) removed from the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "sub",
              "summary": "Returns true if ClassA subsumes ClassB, according to the current DB schema",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "classA",
                  "type": "string",
                  "summary": "ClassA"
                },
                {
                  "@type": "Parameter",
                  "name": "classB",
                  "type": "string",
                  "summary": "ClassB"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "eq",
              "summary": "Matches if a is equal to b",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varName",
                  "type": "string|Var",
                  "summary": "literal, variable or id"
                },
                {
                  "@type": "Parameter",
                  "name": "varValue",
                  "type": "string|Var",
                  "summary": "literal, variable or id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "substr",
              "summary": "Substring",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "string",
                  "type": "string|Var",
                  "summary": "String or variable"
                },
                {
                  "@type": "Parameter",
                  "name": "before",
                  "type": "number|Var",
                  "summary": "integer or variable (characters from start to begin)"
                },
                {
                  "@type": "Parameter",
                  "name": "length",
                  "type": "number|Var",
                  "summary": "integer or variable (length of substring)"
                },
                {
                  "@type": "Parameter",
                  "name": "after",
                  "type": "number|Var",
                  "summary": "integer or variable (number of characters after substring)"
                },
                {
                  "@type": "Parameter",
                  "name": "subString",
                  "type": "string|Var",
                  "summary": "String or variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "get",
              "summary": "Use the document inteface to import documents",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "asvars",
                  "type": "Vars|array.<Var>",
                  "summary": "an array of AsVar variable mappings (see as for format below)"
                },
                {
                  "@type": "Parameter",
                  "name": "queryResource",
                  "type": "WOQLQuery",
                  "summary": "an external resource (remote, file, post) to query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the get expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "put",
              "summary": "Use the document inteface to import documents",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varsToExp",
                  "type": "Vars|array.<Var>",
                  "summary": "an array of AsVar variable\nmappings (see as for format below)"
                },
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "WOQLQuery",
                  "summary": "The query which will be executed to produce the results"
                },
                {
                  "@type": "Parameter",
                  "name": "fileResource",
                  "type": "string",
                  "summary": "an file resource local to the server"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the put expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "as",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "array|string|Var",
                  "summary": "variable number of arguments"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "remote",
              "summary": "Identifies a remote resource by URL and specifies the format of the resource through the options",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "remoteObj",
                  "type": "object",
                  "summary": "The URL at which the remote resource can be accessed"
                },
                {
                  "@type": "Parameter",
                  "name": "formatObj",
                  "type": "typedef.DataFormatObj",
                  "summary": "The format of the resource data {}"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the remote resource identifier",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "post",
              "summary": "Identifies a resource as a local path on the client, to be sent to the server through a\nHTTP POST request, with the format defined through the options",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "url",
                  "type": "string",
                  "summary": "The Path on the server at which the file resource can be accessed"
                },
                {
                  "@type": "Parameter",
                  "name": "formatObj",
                  "type": "typedef.DataFormatObj",
                  "summary": "imput options, optional"
                },
                {
                  "@type": "Parameter",
                  "name": "source",
                  "type": "string",
                  "summary": "It defines the source of the file, it can be 'url','post'"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Post resource identifier",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_triple",
              "summary": "Deletes a single triple from the default graph of the database",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Triple Deletion statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "add_triple",
              "summary": "Adds triples according to the the pattern [subject,predicate,object]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_quad",
              "summary": "Deletes a single triple from the graph [Subject, Predicate, Object, Graph]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Delete Quad Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "add_quad",
              "summary": "Adds quads according to the pattern [S,P,O,G]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "trim",
              "summary": "Remove whitespace from both sides of a string:",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputStr",
                  "type": "string|Var",
                  "summary": "A string or variable containing\nthe untrimmed version of the string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A string or variable\ncontaining the trimmed version of the string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Trim pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "eval",
              "summary": "Evaluates the passed arithmetic expression and generates or matches the result value",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "arithExp",
                  "type": "object|WOQLQuery|string",
                  "summary": "query or JSON-LD representing the query"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "output variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "plus",
              "summary": "Adds the numbers together",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the values to add"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the addition expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "minus",
              "summary": "Subtracts Numbers N1..Nn",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "variable or numeric containing the value that will be\nsubtracted from"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the subtraction expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "times",
              "summary": "Multiplies numbers N1...Nn together",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the value"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the multiplication expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "divide",
              "summary": "Divides numbers N1...Nn by each other left, to right precedence",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "numbers to tbe divided"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the division expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "div",
              "summary": "Division - integer division - args are divided left to right",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "numbers for division"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the division expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "exp",
              "summary": "Exponent - raises varNum01 to the power of varNum02",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the number to be\nraised to the power of the second number"
                },
                {
                  "@type": "Parameter",
                  "name": "expNum",
                  "type": "number",
                  "summary": "a variable or numeric containing the exponent"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the exponent expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "floor",
              "summary": "Generates the nearest lower integer to the passed number",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum",
                  "type": "string|number|Var",
                  "summary": "Variable or numeric containing the number to be floored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the floor expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "isa",
              "summary": "Tests whether a given instance IRI has type Class, according to the current state of the DB",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "instanceIRI",
                  "type": "string|Var",
                  "summary": "A string IRI or a variable that identify the class instance"
                },
                {
                  "@type": "Parameter",
                  "name": "classId",
                  "type": "string|Var",
                  "summary": "A Class IRI or a variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the type test",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "like",
              "summary": "Generates a string Leverstein distance measure between stringA and stringB",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "stringA",
                  "type": "string|Var",
                  "summary": "string literal or variable representing a string to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "stringB",
                  "type": "string|Var",
                  "summary": "string literal or variable\nrepresenting the other string to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "distance",
                  "type": "number|string|Var",
                  "summary": "variable representing the distance between the variables"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Like pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "less",
              "summary": "Compares the value of v1 against v2 and returns true if v1 is less than v2",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum01",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing\nthe number to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "varNum02",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the second comporator"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the comparison expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "greater",
              "summary": "Compares the value of v1 against v2 and returns true if v1 is greater than v2",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum01",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the number to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "varNum02",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the second comporator"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the comparison expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "opt",
              "summary": "Specifies that the Subquery is optional - if it does not match the query will not fail",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "A subquery which will be optionally matched"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the optional sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "unique",
              "summary": "Generate a new IRI from the prefix and a hash of the variables which will be unique for any\ngiven combination of variables",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "prefix",
                  "type": "string",
                  "summary": "A prefix for the IRI - typically formed of the doc prefix and the\nclasstype of the entity (“doc:Person”)"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "array|string|Var",
                  "summary": "An array of variables and / or strings from which the\nunique hash will be generated"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "Variable in which the unique ID is stored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the unique ID generating function",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "idgen",
              "summary": "Generates the node's ID combined the variable list with a specific prefix (URL base).\nIf the input variables's values are the same, the output value will be the same.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "prefix",
                  "type": "string"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "string|array",
                  "summary": "the variable input list for generate the id"
                },
                {
                  "@type": "Parameter",
                  "name": "outputVar",
                  "type": "string",
                  "summary": "the output variable name"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "upper",
              "summary": "Changes a string to upper-case",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable representing the uncapitalized string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores the capitalized string output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Upper case pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "lower",
              "summary": "Changes a string to lower-case",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable representing the non-lowercased string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores the lowercased string output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Lower case pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "pad",
              "summary": "Pads out the string input to be exactly len long by appending the pad character pad to\nform output",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "The input string or variable in unpadded state"
                },
                {
                  "@type": "Parameter",
                  "name": "pad",
                  "type": "string|Var",
                  "summary": "The characters to use to pad the string or a variable representing them"
                },
                {
                  "@type": "Parameter",
                  "name": "len",
                  "type": "number|string|Var",
                  "summary": "The variable or integer value representing the length of\nthe output string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "stores output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Pad pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "split",
              "summary": "Splits a string (Input) into a list strings (Output) by removing separator",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "A string or variable representing the unsplit string"
                },
                {
                  "@type": "Parameter",
                  "name": "separator",
                  "type": "string|Var",
                  "summary": "A string or variable containing a sequence of charatcters\nto use as a separator"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores output list"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Split pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "member",
              "summary": "Matches if List includes Element",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "element",
                  "type": "string|object|Var",
                  "summary": "Either a variable, IRI or any simple datatype"
                },
                {
                  "@type": "Parameter",
                  "name": "list",
                  "type": "string|array|Var",
                  "summary": "List ([string, literal] or string*) Either a variable\nrepresenting a list or a list of variables or literals"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the List inclusion pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "concat",
              "summary": "takes a variable number of string arguments and concatenates them into a single string",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "array|string|Var",
                  "summary": "a variable representing a list or a list of variables or\nstrings - variables can be embedded in the string if they do not contain spaces"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable or string containing the output string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Concatenation pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "join",
              "summary": "Joins a list variable together (Input) into a string variable (Output) by glueing the strings\ntogether with Glue",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "string|array|Var",
                  "summary": "a variable representing a list or a list of strings\nand / or variables"
                },
                {
                  "@type": "Parameter",
                  "name": "glue",
                  "type": "string|Var",
                  "summary": "A variable (v:glue) or (glue) string representing the characters\nto put in between the joined strings in input"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable or string containing the output string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Join pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "sum",
              "summary": "computes the sum of the List of values passed. In contrast to other arithmetic functions,\nsum self-evaluates - it does not have to be passed to evaluate()",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "a subquery or ([string or numeric]) - a list variable, or a\nlist of variables or numeric literals"
                },
                {
                  "@type": "Parameter",
                  "name": "total",
                  "type": "string|Var",
                  "summary": "the variable name with the sum result of the values in List"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Sum expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "start",
              "summary": "Specifies an offset position in the results to start listing results from",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "start",
                  "type": "number|string|Var",
                  "summary": "A variable that refers to an interger or an integer literal"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "WOQL Query object, you can pass a subquery as an argument\nor a chained query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery whose results will be returned starting from\nthe specified offset",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "limit",
              "summary": "Specifies a maximum number of results that will be returned from the subquery",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "limit",
                  "type": "number|string",
                  "summary": "A variable that refers to an non-negative integer or a\nnon-negative integer"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "A subquery whose results will be limited"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery whose results will be returned starting from\nthe specified offset",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "re",
              "summary": "Matches the regular expression defined in Patern against the Test string, to produce\nthe matched patterns in Matches",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "pattern",
                  "type": "string",
                  "summary": "string or variable using normal PCRE regular expression syntax with\nthe exception that special characters have to be escaped twice (to enable transport in JSONLD)"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable containing the string to be tested for\npatterns with the regex"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarList",
                  "type": "string|array|object|Var",
                  "summary": "variable representing the list of matches\nor a list of strings or variables"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Regular Expression pattern\nmatching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "length",
              "summary": "Calculates the length of the list in va and stores it in vb",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "string|array",
                  "summary": "Either a variable representing a list or a list of\nvariables or literals"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable in which the length of the list is stored or\nthe length of the list as a non-negative integer"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Length pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "not",
              "summary": "Logical negation of the contained subquery - if the subquery matches, the query\nwill fail to match",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "A subquery which will be negated"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the negated sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "once",
              "summary": "Results in one solution of the subqueries",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "WOQL Query objects"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the once sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "immediately",
              "summary": "Runs the query without backtracking on side-effects",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "WOQL Query objects"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the immediately sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "count",
              "summary": "Creates a count of the results of the query",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "countVarName",
                  "type": "string|number|Var",
                  "summary": "variable or integer count"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the count sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "typecast",
              "summary": "Casts the value of Input to a new value of type Type and stores the result in CastVar",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varName",
                  "type": "string|number|object|Var",
                  "summary": "Either a single variable or a\nliteral of any basic type"
                },
                {
                  "@type": "Parameter",
                  "name": "varType",
                  "type": "string|Var",
                  "summary": "Either a variable or a basic datatype (xsd / xdd)"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "save the return variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the casting expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "order_by",
              "summary": "Orders the results of the contained subquery by a precedence list of variables",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orderedVarlist",
                  "type": "string|Var|array",
                  "summary": "A sequence of variables,\nby which to order the results,\neach optionally followed by either “asc” or “desc” to represent order as a list, by default\nit will sort the variable in ascending order"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the ordering expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "group_by",
              "summary": "Groups the results of the contained subquery on the basis of identical values for Groupvars,\nextracts the patterns defined in PatternVars and stores the results in GroupedVar",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "gvarlist",
                  "type": "array|string|Var",
                  "summary": "Either a single variable or an array of variables"
                },
                {
                  "@type": "Parameter",
                  "name": "groupedvar",
                  "type": "array|string|Var",
                  "summary": "Either a single variable or an array of variables"
                },
                {
                  "@type": "Parameter",
                  "name": "output",
                  "type": "string|Var",
                  "summary": "output variable name"
                },
                {
                  "@type": "Parameter",
                  "name": "groupquery",
                  "type": "WOQLQuery",
                  "summary": "The query whose results will be grouped"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the grouping expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "true",
              "summary": "A function that always matches, always returns true",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the true value that will match any pattern",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "path",
              "summary": "Performs a path regular expression match on the graph",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "An IRI or variable that refers to an IRI representing the subject,\ni.e. the starting point of the path"
                },
                {
                  "@type": "Parameter",
                  "name": "pattern",
                  "type": "string",
                  "summary": "(string) - A path regular expression describing a pattern through\nmultiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "An IRI or variable that refers to an IRI representing the object,\ni.e. ending point of the path"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable in which the actual paths\ntraversed will be stored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the path regular expression matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "dot",
              "summary": "Extract the value of a key in a bound document.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "document",
                  "type": "string|Var",
                  "summary": "Document which is being accessed."
                },
                {
                  "@type": "Parameter",
                  "name": "field",
                  "type": "string|Var",
                  "summary": "The field from which the document which is being accessed."
                },
                {
                  "@type": "Parameter",
                  "name": "value",
                  "type": "string|Var",
                  "summary": "The value for the document and field."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a dot Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "size",
              "summary": "Calculates the size in bytes of the contents of the resource identified in ResourceID",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "resourceId",
                  "type": "string|Var",
                  "summary": "A valid resource identifier string (can refer to any graph /\nbranch / commit / db)"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "The variable name"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "triple_count",
              "summary": "Calculates the number of triples of the contents of the resource identified in ResourceID",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "resourceId",
                  "type": "string|Var",
                  "summary": "A valid resource identifier string (can refer to any graph /\nbranch / commit / db)"
                },
                {
                  "@type": "Parameter",
                  "name": "tripleCount",
                  "type": "string|number|Var",
                  "summary": "An integer literal with the size in bytes or a\nvariable containing that integer"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the size expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "type_of",
              "summary": "Returns true if 'elementId' is of type 'elementType', according to the current DB schema",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "elementId",
                  "type": "string|Var",
                  "summary": "the id of a schema graph element"
                },
                {
                  "@type": "Parameter",
                  "name": "elementType",
                  "type": "string|Var",
                  "summary": "the element type"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the type_of pattern matching rule",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "getLimit",
              "summary": "Functions to manipulate and check the paging related properties of a query",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "getPagingProperty",
              "summary": "Returns the value of one of the 'paging' related properties (limit, start,...)",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "setPagingProperty",
              "summary": "Sets the value of one of the paging_transitive_properties properties",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            }
          ]
        },
        {
          "@type": "Class",
          "name": "WOQLLibrary",
          "summary": "Library Functions to manage the commits graph",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "branches",
              "summary": "General Pattern 4: Retrieves Branches, Their ID, Head Commit ID, Head Commit Time\n(if present, new branches have no commits)",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "commits",
              "summary": "get all the commits of a specific branch\nif a timestamp is given, gets all the commits before the specified timestamp",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branch",
                  "type": "string",
                  "summary": "the branch name"
                },
                {
                  "@type": "Parameter",
                  "name": "limit",
                  "type": "number",
                  "summary": "the max number of result"
                },
                {
                  "@type": "Parameter",
                  "name": "start",
                  "type": "number",
                  "summary": "the start of the pagination"
                },
                {
                  "@type": "Parameter",
                  "name": "timestamp",
                  "type": "number",
                  "summary": "Unix timestamp in seconds"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "previousCommits",
              "summary": "get commits older than the specified commit id",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "commit_id",
                  "type": "string",
                  "summary": "the commit id"
                },
                {
                  "@type": "Parameter",
                  "name": "limit",
                  "type": "number",
                  "summary": "the max number of result"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "first_commit",
              "summary": "Finds the id of the very first commit in a database's history\n\nThis is useful for finding information about when, by who and why the database was created\nThe first commit is the only commit in the database that does not have a parent commit",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            }
          ]
        },
        {
          "@type": "Class",
          "name": "ViewConfig",
          "summary": "Generic functions / configs that are available to all config types",
          "memberFunctions": []
        },
        {
          "@type": "Class",
          "name": "WOQLViewRule",
          "memberFunctions": []
        },
        {
          "@type": "Class",
          "name": "View",
          "summary": "We bundle the useful functions in a View object and just export that for ease of consumption",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "rule",
              "summary": "Shorthand functions for accessing the pattern matching capabilities",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchRow",
              "summary": "Called to match an entire row of results is matched by a set of rules\nreturns array of rules that matched",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchColumn",
              "summary": "Called to test whether an entire column of results is matched by a set of rules\nreturns array of rules that matched",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchCell",
              "summary": "Called to test whether a specific cell is matched by a set of rules\nreturns array of rules that matched",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchNode",
              "summary": "Called to test whether a specific node is matched by a set of rules\nreturns array of rules that matched",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchEdge",
              "summary": "Called to test whether a specific edge (source -> target) is matched by a set of rules\nreturns array of rules that matched",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "matchFrame",
              "summary": "Called to test whether a specific frame is matched by a set of rules",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            }
          ]
        },
        {
          "@type": "Class",
          "name": "WOQL",
          "summary": "The WOQL object is a wrapper around the WOQLQuery object\nSyntactic sugar to allow writing WOQL.triple()... instead of new WOQLQuery().triple()\nEvery function matches one of the public api functions of the woql query object",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "using",
              "summary": "Query running against any specific commit Id",
              "examples": [
                "let [a, b, c] = vars(\"a\", \"b\", \"c\")\nWOQL.using(\"userName/dbName/local/commit|branch/commitID\").triple(a, b, c)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "refPath",
                  "type": "string",
                  "summary": "path to specific reference Id or commit Id"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "subquery for the specific commit point"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "comment",
              "summary": "Adds a text comment to a query - can also be used to wrap any part of a query to turn it off",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "comment",
                  "type": "string",
                  "summary": "text comment"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "query that is \"commented out\""
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "select",
              "examples": [
                "let [a, b, c] = vars(\"a\", \"b\", \"c\")\nWOQL.select(a, triple(a, b, c))\nFilters the query so that only the variables included in [V1...Vn] are returned in the bindings"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string|Var",
                  "summary": "only these variables are returned"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "distinct",
              "summary": "Filter the query to return only results that are distinct in the given variables",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string|Var",
                  "summary": "these variables are guaranteed to be unique as a tuple"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "and",
              "summary": "Logical conjunction of the contained queries - all queries must match or the entire clause fails",
              "examples": [
                "//find triples that are of type scm:Journey, and have\n//a start_station Start, and that start_station is labeled Start_Label\nlet [Journey, Start, Start_Label] = vars(\"Journey\", \"Start\", \"Start_Label\")\nWOQL.and(\n     WOQL.triple(Journey, \"rdf:type\", \"@schema:Journey\"),\n     WOQL.triple(Journey, \"start_station\", Start),\n     WOQL.triple(Start, \"label\", Start_Label))"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subqueries",
                  "type": "WOQLQuery",
                  "summary": "A list of one or more woql queries to execute as a conjunction"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery object containing the conjunction of queries",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "read_object",
              "summary": "Use {@link #read_document|read_document} instead.",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "read_document",
              "summary": "Read a node identified by an IRI as a JSON-LD document",
              "examples": [
                "let [person] = vars(\"Person\")\nconst query = WOQL.read_document(\n     \"Person/0b4feda109d9d13c9da809090b342ad9e4d8185545ce05f7cd20b97fe458f547\",\n    person\n);\nconst res =  await client.query(query);"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "The document id  or a variable to read"
                },
                {
                  "@type": "Parameter",
                  "name": "output",
                  "type": "string",
                  "summary": "Variable which will be bound to the document."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "insert_document",
              "summary": "Insert a document in the graph.",
              "examples": [
                "const res = await client.query(\n   WOQL.insert_document(WOQL.doc({ \"@type\" : \"Person\", \"label\": \"John\" }))\n)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "docjson",
                  "type": "object",
                  "summary": "The document to insert. Must either have an '@id' or\nhave a class specified key."
                },
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "An optional identifier specifying the document location."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "update_document",
              "summary": "Update a document identified by an IRI",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "docjson",
                  "type": "object",
                  "summary": "The document to update. Must either have an '@id' or\nhave a class specified key."
                },
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "An optional identifier specifying the document location."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_document",
              "summary": "Delete a document from the graph.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "IRI",
                  "type": "string",
                  "summary": "The document id  or a variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "or",
              "summary": "Creates a logical OR of the arguments",
              "examples": [
                "let [Subject] = vars(\"Subject\")\nor(\n  triple(Subject, 'label', \"A\"),\n  triple(Subject, \"label\", \"a\")\n )"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subqueries",
                  "type": "WOQLQuery",
                  "summary": "A list of one or more woql queries\nto execute as alternatives"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery object containing the logical Or of the subqueries",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "from",
              "summary": "Specifies the database URL that will be the default database for the enclosed query",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                },
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "WOQLQuery",
                  "summary": "The query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the from expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "into",
              "summary": "Specifies the graph resource to write the contained query into",
              "examples": [
                "//Subq is an argument or a chained query\nusing(\"admin/minecraft\").into(\"instance/main\").add_triple(\"a\", \"rdf:type\", \"@schema:X\")\n//writes a single tripe (doc:a, rdf:type, scm:X) into the main instance graph"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "The query which will be written into the graph"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which will be written into the graph in question",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate, Object)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "added_triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,\nObject) added in the current layer",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "removed_triple",
              "summary": "Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,\nObject) added in the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "added_quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,\nObject, Graph) removed from the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "removed_quad",
              "summary": "Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,\nObject, Graph) removed from the current commit",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "sub",
              "summary": "Returns true if ClassA subsumes ClassB, according to the current DB schema",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "classA",
                  "type": "string",
                  "summary": "ClassA"
                },
                {
                  "@type": "Parameter",
                  "name": "classB",
                  "type": "string",
                  "summary": "ClassB"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery",
                "type": "boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "eq",
              "summary": "Matches if a is equal to b",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varName",
                  "type": "string|Var",
                  "summary": "literal, variable or id"
                },
                {
                  "@type": "Parameter",
                  "name": "varValue",
                  "type": "string|Var",
                  "summary": "literal, variable or id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "substr",
              "summary": "Substring",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "string",
                  "type": "string|Var",
                  "summary": "String or variable"
                },
                {
                  "@type": "Parameter",
                  "name": "before",
                  "type": "number|Var",
                  "summary": "integer or variable (characters from start to begin)"
                },
                {
                  "@type": "Parameter",
                  "name": "length",
                  "type": "number|Var",
                  "summary": "integer or variable (length of substring)"
                },
                {
                  "@type": "Parameter",
                  "name": "after",
                  "type": "number|Var",
                  "summary": "integer or variable (number of characters after substring)"
                },
                {
                  "@type": "Parameter",
                  "name": "substring",
                  "type": "string|Var",
                  "summary": "String or variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "get",
              "summary": "Use the document inteface to import documents",
              "examples": [
                "let [a, b] = vars(\"a\", \"b\")\nget(as(\"a\", a).as(\"b\", b)).remote(\"http://my.url.com/x.csv\")\n//copies the values from column headed \"a\" into a variable a and from column\n//\"b\" into a variable b from remote CSV"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "asvars",
                  "type": "Vars|array.<Var>",
                  "summary": "an array of AsVar variable mappings (see as for format below)"
                },
                {
                  "@type": "Parameter",
                  "name": "queryResource",
                  "type": "WOQLQuery",
                  "summary": "an external resource (remote, file, post) to query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the get expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "put",
              "summary": "Use the document inteface to import documents",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varsToExp",
                  "type": "Vars|array.<Var>",
                  "summary": "an array of AsVar variable\nmappings (see as for format below)"
                },
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "WOQLQuery",
                  "summary": "The query which will be executed to produce the results"
                },
                {
                  "@type": "Parameter",
                  "name": "fileResource",
                  "type": "string",
                  "summary": "an file resource local to the server"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the put expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "as",
              "summary": "Imports the value identified by Source to a Target variable",
              "examples": [
                "let [First_Var, Second_Var] = vars('First_Var', 'Second_Var')\nWOQL.as(\"first var\", First_Var, \"string\").as(\"second var\", Second_Var)\nWOQL.as([\"first var\", First_Var, \"string\"], [\"second var\", Second_Var])"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "source",
                  "type": "string|number|Var",
                  "summary": "Source"
                },
                {
                  "@type": "Parameter",
                  "name": "target",
                  "type": "string|Var",
                  "summary": "Target"
                },
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "string",
                  "summary": "type to cast value to string|number etc..."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "remote",
              "summary": "Identifies a remote resource by URL and specifies the format of the resource through the options",
              "examples": [
                "remote({url:\"http://url.of.resource\"}, {type: \"csv\"})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "remoteObj",
                  "type": "object",
                  "summary": "The URL at which the remote resource can be accessed"
                },
                {
                  "@type": "Parameter",
                  "name": "formatObj",
                  "type": "typedef.DataFormatObj",
                  "summary": "The format of the resource data {}"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the remote resource identifier",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "post",
              "summary": "Identifies a resource as a local path on the client, to be sent to the server through a\nHTTP POST request, with the format defined through the options",
              "examples": [
                "post(\"/.../.../\", {type:'csv'})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "url",
                  "type": "string",
                  "summary": "The Path on the server at which the file resource can be accessed"
                },
                {
                  "@type": "Parameter",
                  "name": "formatObj",
                  "type": "typedef.DataFormatObj",
                  "summary": "imput options, optional"
                },
                {
                  "@type": "Parameter",
                  "name": "source",
                  "type": "string",
                  "summary": "It defines the source of the file, it can be 'url','post'"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Post resource identifier",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_triple",
              "summary": "Deletes a single triple from the default graph of the database",
              "examples": [
                "delete_triple(\"john\", \"age\", 42)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Triple Deletion statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "delete_quad",
              "summary": "Deletes a single triple from the graph [Subject, Predicate, Object, Graph]",
              "examples": [
                "remove the class Person from the schema graph\nWOQL.delete_quad(\"Person\", \"rdf:type\", \"sys:Class\", \"schema\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Delete Quad Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "add_triple",
              "summary": "Adds triples according to the the pattern [subject,predicate,object]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "add_quad",
              "summary": "Adds quads according to the pattern [S,P,O,G]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef-",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "trim",
              "summary": "Remove whitespace from both sides of a string:",
              "examples": [
                "let [trimmed] = vars(\"trimmed\")\ntrim(\"hello   \", trimmed)\n//trimmed contains \"hello\""
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputStr",
                  "type": "string|Var",
                  "summary": "A string or variable containing\nthe untrimmed version of the string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A string or variable\ncontaining the trimmed version of the string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Trim pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "evaluate",
              "summary": "Evaluates the passed arithmetic expression and generates or matches the result value",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(plus(2, minus(3, 1)), result)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "arithExp",
                  "type": "object|WOQLQuery|string",
                  "summary": "A WOQL query containing a valid WOQL Arithmetic\nExpression, which is evaluated by the function"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|number|Var",
                  "summary": "Either a variable, in which the result of the\nexpression will be stored, or a numeric literal which will be used as a test of result of\nthe evaluated expression"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Arithmetic function",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "eval",
              "summary": "Evaluates the passed arithmetic expression and generates or matches the result value",
              "examples": [
                "let [result] = vars(\"result\")\neval(plus(2, minus(3, 1)), result)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "arithExp",
                  "type": "object|WOQLQuery|string",
                  "summary": "A WOQL query containing a valid WOQL Arithmetic\nExpression, which is evaluated by the function"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|number|Var",
                  "summary": "Either a variable, in which the result of the\nexpression will be stored, or a numeric literal which will be used as a test of result of\nthe evaluated expression"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Arithmetic function",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "plus",
              "summary": "Adds the numbers together",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(plus(2, plus(3, 1)), result)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the values to add"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the addition expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "minus",
              "summary": "Subtracts Numbers N1..Nn",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(minus(2.1, plus(0.2, 1)), result)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "variable or numeric containing the value that will be\nsubtracted from"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the subtraction expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "times",
              "summary": "Multiplies numbers N1...Nn together",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(times(10, minus(2.1, plus(0.2, 1))), result)\n //result contains 9.000000000000002y"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the value"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the multiplication expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "divide",
              "summary": "Divides numbers N1...Nn by each other left, to right precedence",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "numbers to tbe divided"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the division expression\nlet [result] = vars(\"result\")\nevaluate(divide(times(10, minus(2.1, plus(0.2, 1))), 10), result)\n //result contains 0.9000000000000001",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "div",
              "summary": "Division - integer division - args are divided left to right",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(div(10, 3), result)\n//result contains 3"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "args",
                  "type": "string|number|Var",
                  "summary": "numbers for division"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the division expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "exp",
              "summary": "Exponent - raises varNum01 to the power of varNum02",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(exp(3, 2), result)\n//result contains 9"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the number to be\nraised to the power of the second number"
                },
                {
                  "@type": "Parameter",
                  "name": "expNum",
                  "type": "number",
                  "summary": "a variable or numeric containing the exponent"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the exponent expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "floor",
              "summary": "Generates the nearest lower integer to the passed number",
              "examples": [
                "let [result] = vars(\"result\")\nevaluate(divide(floor(times(10, minus(2.1, plus(0.2, 1)))), 10), result)\n//result contains 0.9 - floating point error removed"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum",
                  "type": "string|number|Var",
                  "summary": "Variable or numeric containing the number to be floored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the floor expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "isa",
              "summary": "Tests whether a given instance IRI has type Class, according to the current state of the DB",
              "examples": [
                "let [subject] = vars(\"subject\")\nisa(subject, \"Person\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "instanceIRI",
                  "type": "string|Var",
                  "summary": "A string IRI or a variable that identify the class instance"
                },
                {
                  "@type": "Parameter",
                  "name": "classId",
                  "type": "string|Var",
                  "summary": "A Class IRI or a variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the type test",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "like",
              "summary": "Generates a string Leverstein distance measure between stringA and stringB",
              "examples": [
                "let [dist] = vars('dist')\nlike(\"hello\", \"hallo\", dist)\n//dist contains 0.7265420560747664"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "stringA",
                  "type": "string|Var",
                  "summary": "string literal or variable representing a string to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "stringB",
                  "type": "string|Var",
                  "summary": "string literal or variable\nrepresenting the other string to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "distance",
                  "type": "number|string|Var",
                  "summary": "variable representing the distance between the variables"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Like pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "less",
              "summary": "Compares the value of v1 against v2 and returns true if v1 is less than v2",
              "examples": [
                "let [result] = vars(\"result\")\nless(1, 1.1).eq(result, literal(true, \"boolean\"))\n//result contains true"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum01",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing\nthe number to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "varNum02",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the second comporator"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the comparison expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "greater",
              "summary": "Compares the value of v1 against v2 and returns true if v1 is greater than v2",
              "examples": [
                "let [result] = vars(\"result\")\ngreater(1.2, 1.1).eq(result, literal(true, \"boolean\"))\n//result contains true"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNum01",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the number to be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "varNum02",
                  "type": "string|number|Var",
                  "summary": "a variable or numeric containing the second comporator"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the comparison expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "opt",
              "summary": "Specifies that the Subquery is optional - if it does not match the query will not fail",
              "examples": [
                "let [subject] = vars(\"subject\")\nopt(triple(subject, 'label', \"A\"))\n//Subq is an argument or a chained query\nopt().triple(subject, 'label', \"A\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "A subquery which will be optionally matched"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the optional sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "unique",
              "summary": "Generate a new IRI from the prefix and a hash of the variables which will be unique for any\ngiven combination of variables",
              "examples": [
                "let [newid] = vars(\"newid\")\nunique(\"doc:Person\", [\"John\", \"Smith\"], newid)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "prefix",
                  "type": "string",
                  "summary": "A prefix for the IRI - typically formed of the doc prefix and the\nclasstype of the entity (“doc:Person”)"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "array|string|Var",
                  "summary": "An array of variables and / or strings from which the\nunique hash will be generated"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "Variable in which the unique ID is stored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the unique ID generating function",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "idgen",
              "summary": "Generate a new IRI from the prefix and concatention of the variables",
              "examples": [
                "let [newid] = vars(\"newid\")\nidgen(\"doc:Person\", [\"John\", \"Smith\"], newid)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "prefix",
                  "type": "string",
                  "summary": "A prefix for the IRI - typically formed of the doc prefix and the\nclasstype of the entity (“doc:Person”)"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "array|string|Var",
                  "summary": "An array of variables and / or strings from which the\nunique hash will be generated"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "Variable in which the unique ID is stored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the ID generating function",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "upper",
              "summary": "Changes a string to upper-case",
              "examples": [
                "let [allcaps] = vars(\"allcaps\")\nupper(\"aBCe\", allcaps)\n//upper contains \"ABCE\""
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable representing the uncapitalized string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores the capitalized string output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Upper case pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "lower",
              "summary": "Changes a string to lower-case",
              "examples": [
                "let [lower] = var(\"l\")\nlower(\"aBCe\", lower)\n//lower contains \"abce\""
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable representing the non-lowercased string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores the lowercased string output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Lower case pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "pad",
              "summary": "Pads out the string input to be exactly len long by appending the pad character pad to\nform output",
              "examples": [
                "let [fixed] = vars(\"fixed length\")\npad(\"joe\", \" \", 8, fixed)\n//fixed contains \"joe     \""
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "The input string or variable in unpadded state"
                },
                {
                  "@type": "Parameter",
                  "name": "pad",
                  "type": "string|Var",
                  "summary": "The characters to use to pad the string or a variable representing them"
                },
                {
                  "@type": "Parameter",
                  "name": "len",
                  "type": "number|string|Var",
                  "summary": "The variable or integer value representing the length of\nthe output string"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "stores output"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Pad pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "split",
              "summary": "Splits a string (Input) into a list strings (Output) by removing separator",
              "examples": [
                "let [words] = vars(\"words\")\nsplit(\"joe has a hat\", \" \", words)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "A string or variable representing the unsplit string"
                },
                {
                  "@type": "Parameter",
                  "name": "separator",
                  "type": "string|Var",
                  "summary": "A string or variable containing a sequence of charatcters\nto use as a separator"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "variable that stores output list"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Split pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "member",
              "summary": "Matches if List includes Element",
              "examples": [
                "let [name] = vars(\"name\")\nmember(name, [\"john\", \"joe\", \"frank\"])"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "element",
                  "type": "string|object|Var",
                  "summary": "Either a variable, IRI or any simple datatype"
                },
                {
                  "@type": "Parameter",
                  "name": "list",
                  "type": "string|array|Var",
                  "summary": "List ([string, literal] or string*) Either a variable\nrepresenting a list or a list of variables or literals"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the List inclusion pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "concat",
              "summary": "takes a variable number of string arguments and concatenates them into a single string",
              "examples": [
                "let [first_name, last_name, full_name] = vars(\"first_name\", \"last_name\", \"full_name\")\nconcat([first_name, \" \", last_name], full_name)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "array|string|Var",
                  "summary": "a variable representing a list or a list of variables or\nstrings - variables can be embedded in the string if they do not contain spaces"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable or string containing the output string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Concatenation pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "join",
              "summary": "Joins a list variable together (Input) into a string variable (Output) by glueing the strings\ntogether with Glue",
              "examples": [
                "let [sentence] = vars(\"sentence\")\njoin([\"joe\", \"has\", \"a\", \"hat\", \" \", sentence)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "string|array|Var",
                  "summary": "a variable representing a list or a list of strings\nand / or variables"
                },
                {
                  "@type": "Parameter",
                  "name": "glue",
                  "type": "string|Var",
                  "summary": "A variable (v:glue) or (glue) string representing the characters\nto put in between the joined strings in input"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable or string containing the output string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Join pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "sum",
              "summary": "computes the sum of the List of values passed. In contrast to other arithmetic functions,\nsum self-evaluates - it does not have to be passed to evaluate()",
              "examples": [
                "let [total] = vars(\"total\")\nsum([2, 3, 4, 5], total)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "a subquery or ([string or numeric]) - a list variable, or a\nlist of variables or numeric literals"
                },
                {
                  "@type": "Parameter",
                  "name": "total",
                  "type": "string|Var",
                  "summary": "the variable name with the sum result of the values in List"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the Sum expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "start",
              "summary": "Specifies an offset position in the results to start listing results from",
              "examples": [
                "let [a, b, c] = vars(\"a\", \"b\", \"c\")\nstart(100).triple(a, b, c)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "start",
                  "type": "number|string|Var",
                  "summary": "A variable that refers to an interger or an integer literal"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "WOQL Query object, you can pass a subquery as an argument\nor a chained query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery whose results will be returned starting from\nthe specified offset",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "limit",
              "summary": "Specifies a maximum number of results that will be returned from the subquery",
              "examples": [
                "let [a, b, c] = vars(\"a\", \"b\", \"c\")\nlimit(100).triple(a, b, c)\n//subquery is an argument or a chained query\nlimit(100,triple(a, b, c))"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "limit",
                  "type": "number|string",
                  "summary": "A variable that refers to an non-negative integer or a\nnon-negative integer"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "A subquery whose results will be limited"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery whose results will be returned starting from\nthe specified offset",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "re",
              "summary": "Matches the regular expression defined in Patern against the Test string, to produce\nthe matched patterns in Matches",
              "examples": [
                "let [All, Sub] = vars(\"All\", \"Sub\")\nWOQL.re(\"h(.).*\", \"hello\", [All, Sub])\n//e contains 'e', llo contains 'llo'\n//p is a regex pattern (.*) using normal regular expression syntax, the only unusual\nthing is that special characters have to be escaped twice, s is the string to be matched\nand m is a list of matches:"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "pattern",
                  "type": "string",
                  "summary": "string or variable using normal PCRE regular expression syntax with\nthe exception that special characters have to be escaped twice (to enable transport in JSONLD)"
                },
                {
                  "@type": "Parameter",
                  "name": "inputVarName",
                  "type": "string|Var",
                  "summary": "string or variable containing the string to be tested for\npatterns with the regex"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarList",
                  "type": "string|array|object|Var",
                  "summary": "variable representing the list of matches\nor a list of strings or variables"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Regular Expression pattern\nmatching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "length",
              "summary": "Calculates the length of the list in va and stores it in vb",
              "examples": [
                "let [count] = vars(\"count\")\nlength([\"john\", \"joe\", \"frank\"], count)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "inputVarList",
                  "type": "string|array",
                  "summary": "Either a variable representing a list or a list of\nvariables or literals"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable in which the length of the list is stored or\nthe length of the list as a non-negative integer"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the Length pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "not",
              "summary": "Logical negation of the contained subquery - if the subquery matches, the query\nwill fail to match",
              "examples": [
                "let [subject, label] = vars(\"subject\", \"label\")\nnot().triple(subject, 'label', label)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "A subquery which will be negated"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the negated sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "once",
              "summary": "Results in one solution of the subqueries",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "WOQL Query objects"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the once sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "immediately",
              "summary": "Runs the query without backtracking on side-effects",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "string|WOQLQuery",
                  "summary": "WOQL Query objects"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the immediately sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "count",
              "summary": "Creates a count of the results of the query",
              "examples": [
                "let [count, Person] = vars(\"count\", \"Person\")\nWOQL.count(count).triple(Person, \"rdf:type\", \"@schema:Person\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "countVarName",
                  "type": "string|number|Var",
                  "summary": "variable or integer count"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the count sub Query",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "typecast",
              "summary": "Casts the value of Input to a new value of type Type and stores the result in CastVar",
              "examples": [
                "let [time] = vars(\"time\")\ncast(\"22/3/98\", \"xsd:dateTime\", time)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varName",
                  "type": "string|number|object|Var",
                  "summary": "Either a single variable or a\nliteral of any basic type"
                },
                {
                  "@type": "Parameter",
                  "name": "varType",
                  "type": "string|Var",
                  "summary": "Either a variable or a basic datatype (xsd / xdd)"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "save the return variable"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the casting expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "order_by",
              "summary": "Orders the results of the contained subquery by a precedence list of variables",
              "examples": [
                "let [A, B, C] = vars(\"A\", \"B\", \"C\")\nWOQL.order_by(A, [B, \"asc\"], [C, \"desc\"]).triple(A, B, C);"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string|Var|array",
                  "summary": "A sequence of variables,\nby which to order the results,\neach optionally followed by either “asc” or “desc” to represent order as a list, by default\nit will sort the variable in ascending order"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the ordering expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "group_by",
              "summary": "Groups the results of the contained subquery on the basis of identical values for Groupvars,\nextracts the patterns defined in PatternVars and stores the results in GroupedVar",
              "examples": [
                "//subquery is an argument or a chained query\nlet [age, last_name, first_name, age_group, person] = vars(\"age\", \"last name\", \"first name\",\n\"age group\", \"person\")\ngroup_by(age, [last_name, first_name], age_group)\n  .triple(person, \"first_name\", first_name)\n  .triple(person, \"last_name\", last_name)\n  .triple(person, \"age\", age)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varList",
                  "type": "array|string|Var",
                  "summary": "Either a single variable or an array of variables"
                },
                {
                  "@type": "Parameter",
                  "name": "patternVars",
                  "type": "array|string|Var",
                  "summary": "Either a single variable or an array of variables"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "output variable name"
                },
                {
                  "@type": "Parameter",
                  "name": "subquery",
                  "type": "WOQLQuery",
                  "summary": "The query whose results will be grouped"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the grouping expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "true",
              "summary": "A function that always matches, always returns true",
              "examples": [
                "when(true()).triple(\"a\", \"b\", \"c\")"
              ],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the true value that will match any pattern",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "path",
              "summary": "Performs a path regular expression match on the graph",
              "examples": [
                "let [person, grand_uncle, lineage] = vars(\"person\", \"grand uncle\", \"lineage\")\npath(person, \"((father|mother) {2,2}), brother)\", grand_uncle, lineage)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "An IRI or variable that refers to an IRI representing the subject,\ni.e. the starting point of the path"
                },
                {
                  "@type": "Parameter",
                  "name": "pattern",
                  "type": "string",
                  "summary": "(string) - A path regular expression describing a pattern through\nmultiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "An IRI or variable that refers to an IRI representing the object,\ni.e. ending point of the path"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "A variable in which the actual paths\ntraversed will be stored"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the path regular expression matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "size",
              "summary": "Calculates the size in bytes of the contents of the resource identified in ResourceID",
              "examples": [
                "let [varSize] = vars(\"varSize\")\nsize(\"admin/minecraft/local/branch/main/instance/main\", varSize)\n//returns the number of bytes in the main instance graph on the main branch"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "resourceId",
                  "type": "string|Var",
                  "summary": "A valid resource identifier string (can refer to any graph /\nbranch / commit / db)"
                },
                {
                  "@type": "Parameter",
                  "name": "resultVarName",
                  "type": "string|Var",
                  "summary": "The variable name"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "triple_count",
              "summary": "Calculates the number of triples of the contents of the resource identified in ResourceID",
              "examples": [
                "let [count] = vars(\"count\")\ntriple_count(\"admin/minecraft/local/_commits\", count)\n//returns the number of bytes in the local commit graph"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "resourceId",
                  "type": "string|Var",
                  "summary": "A valid resource identifier string (can refer to any graph /\nbranch / commit / db)"
                },
                {
                  "@type": "Parameter",
                  "name": "tripleCount",
                  "type": "string|number|Var",
                  "summary": "An integer literal with the size in bytes or a\nvariable containing that integer"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the size expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "type_of",
              "summary": "Returns true if 'elementId' is of type 'elementType', according to the current DB schema",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "elementId",
                  "type": "string|Var",
                  "summary": "the id of a schema graph element"
                },
                {
                  "@type": "Parameter",
                  "name": "elementType",
                  "type": "string|Var",
                  "summary": "the element type"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery object containing the type_of pattern matching rule",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "star",
              "summary": "Generates a query that by default matches all triples in a graph identified by \"graph\"\nor in all the current terminusDB's graph",
              "examples": [
                "star(\"schema/main\")\n//will return every triple in schema/main graph"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graph",
                  "type": "string|boolean",
                  "summary": "false or the resource identifier of a graph possible\nvalue are schema/{main - myschema - *} | instance/{main - myschema - *}  |\ninference/{main - myschema - *}"
                },
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable,\ndefault value \"v:Subject\""
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable,\n default value \"v:Predicate\""
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal,\ndefault value \"v:Object\""
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "all",
              "summary": "Generates a query that by default matches all triples in a graph - identical to\nstar() except for order of arguments",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "the resource identifier of a graph possible\nvalue are schema/{main - myschema - *} | instance/{main - myschema - *}  |\ninference/{main - myschema - *}"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the pattern matching expression\nall(\"mydoc\")\n//will return every triple in the instance/main graph that has \"doc:mydoc\" as its subject",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "node",
              "summary": "Specifies the identity of a node that can then be used in subsequent builder functions.\nNote that node() requires subsequent chained functions to complete the triples / quads\nthat it produces - by itself it only generates the subject.",
              "examples": [
                "node(\"mydoc\").label(\"my label\")\n//equivalent to triple(\"mydoc\", \"label\", \"my label\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "nodeid",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable containing an IRI which will\nbe the subject of the builder functions"
                },
                {
                  "@type": "Parameter",
                  "name": "chainType",
                  "type": "typedef.FuntionType",
                  "summary": "Optional type of builder function to build\n(default is triple)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the partial Node pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "insert",
              "summary": "Inserts a single triple into the database declaring the Node to have type Type,\noptionally into the specified graph",
              "examples": [
                "insert(\"mydoc\", \"MyType\")\n//equivalent to add_triple(\"mydoc\", \"rdf:type\", \"@schema:MyType\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "classId",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing\nthe IRI of the node to be inserted"
                },
                {
                  "@type": "Parameter",
                  "name": "classType",
                  "type": "string|Var",
                  "summary": "IRI string or variable containing the IRI of the\ntype of the node (class/document name)"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Optional Graph resource identifier"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the insert expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "graph",
              "summary": "Sets the graph resource ID that will be used for subsequent chained function calls",
              "examples": [
                "WOQL.graph(\"schema\")\n//equivalent to add_quad(\"MyClass\", \"label\", \"My Class Label\", \"schema/main\")"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph which will\nbe used for subsequent chained schema calls"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the partial Graph pattern matching expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "nuke",
              "summary": "Deletes all triples in the passed graph (defaults to instance/main)",
              "examples": [
                "nuke(\"schema/main\")\n//will delete everything from the schema/main graph"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "Resource String identifying the graph from\nwhich all triples will be removed"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A WOQLQuery which contains the deletion expression",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "query",
              "summary": "Generates an empty WOQLQuery object",
              "examples": [
                "let q = query()\n//then q.triple(1, 1) ..."
              ],
              "section": "Query the database",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "json",
              "summary": "Generates a WOQLQuery object from the passed WOQL JSON - if an argument is passed,\nthe query object is created from it, if none is passed, the current state is\nreturned as a JSON-LD",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "JSON_LD",
                  "type": "object",
                  "summary": "JSON-LD woql document encoding a query"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "either a JSON-LD or a WOQLQuery object\n\njson version of query for passing to api",
                "type": "WOQLQuery|object"
              }
            },
            {
              "@type": "Definition",
              "name": "lib",
              "summary": "get the predefined library query [WOQLLibrary](/api/woqlLibrary.js?id=WOQLLibrary)",
              "examples": [
                "//get commits older than the specified commit id\nconst query = WOQL.lib().previousCommits('m8vpxewh2aovfauebfkbzwmj4qwr5lb')\n\n//return the commits of a specific branch starting from the head\n//you can add the limit (how many results to return.) and the start point\n//if a timestamp is given, gets the commits before the specified timestamp\n//WOQL.lib().commits(branch='main',limit=0,start=0,timestamp=0)\n\nconst query = WOQL.lib().commits('main',10,2,1630683082.9278786)\n\n//return the branches list with the timestamp and commits id\nconst query = WOQL.lib().branches()"
              ],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "WOQLQuery object",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "string",
              "summary": "Generates explicitly a JSON-LD string literal from the input",
              "examples": [
                "string(1)\n//returns { \"@type\": \"xsd:string\", \"@value\": \"1\" }"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "val",
                  "type": "string|boolean|number",
                  "summary": "any primitive literal type"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD string literal",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "literal",
              "summary": "Generates explicitly a JSON-LD string literal from the input",
              "examples": [
                "literal(1, \"nonNegativeInteger\")\n//returns { \"@type\": \"xsd:nonNegativeInteger\", \"@value\": 1 }"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "val",
                  "type": "string",
                  "summary": "any literal type"
                },
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "string",
                  "summary": "an xsd or xdd type"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD literal",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "date",
              "summary": "Generates explicitly a JSON-LD literal date from the imput",
              "examples": [
                "date(\"2022-10-02\")\n//returns { \"@type\": \"xsd:date\", \"@value\": \"2022-10-02\" }"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "date",
                  "type": "string",
                  "summary": "any date format string (YYYY-MM-DD)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD literal date",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "datetime",
              "summary": "Generates explicitly a JSON-LD literal datetime from the imput",
              "examples": [
                "datetime(\"2022-10-19T14:17:12Z\")\n//returns { \"@type\": \"xsd:dateTime\", \"@value\": \"2022-10-19T14:17:12Z\" }"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "datetime",
                  "type": "string",
                  "summary": "any datetime format string (YYYY-MM-DDThh-mm-ssZ)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD literal datetime",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "boolean",
              "summary": "Generates explicitly a JSON-LD literal boolean from the input",
              "examples": [
                "boolean(true)\n//returns { \"@type\": \"xsd:boolean\", \"@value\": true }"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "bool",
                  "type": "boolean",
                  "summary": "true | false"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD literal boolean",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "iri",
              "summary": "Explicitly sets a value to be an IRI - avoiding automatic type marshalling",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "val",
                  "type": "string",
                  "summary": "string which will be treated as an IRI"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- A JSON-LD IRI value",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "vars",
              "summary": "Generates javascript variables for use as WOQL variables within a query",
              "examples": [
                "const [a, b, c] = WOQL.vars(\"a\", \"b\", \"c\")\n//a, b, c are javascript variables which can be used as WOQL variables in subsequent queries"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "an array of javascript variables which can be dereferenced using the\narray destructuring operation",
                "type": "array.<Var>"
              }
            },
            {
              "@type": "Definition",
              "name": "doc",
              "summary": "Produces an encoded form of a document that can be used by a WOQL operation\nsuch as `WOQL.insert_document`.",
              "examples": [
                "const doc = WOQL.doc({ \"@type\": \"Person\", name: \"Newperson\" })"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "object",
                  "summary": "Document to encode"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "The encoded document",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "client",
              "summary": "Use instead to run your query woqlclient.query('myWOQLQuery')",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "client",
                  "type": "WOQLClient"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "WOQLClient"
              }
            },
            {
              "@type": "Definition",
              "name": "Vars",
              "examples": [
                "const v = WOQL.Vars('var01', 'var02', 'var03');\ntriple(v.var01, v.var02, v.var03)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "varNames",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object.<Var>"
              }
            },
            {
              "@type": "Definition",
              "name": "emerge",
              "summary": "query module\nallow you to use WOQL words as top level functions",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "auto_eval",
                  "type": "*"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "update_triple",
              "summary": "Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the\nnew one (Subject, Predicate, newObjValue)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObjValue",
                  "type": "string|Var",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "oldObjValue",
                  "type": "string|Var",
                  "summary": "The old value of the object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "update_quad",
              "summary": "Update a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "newObject",
                  "type": "string|Var",
                  "summary": "The value to update or a literal"
                },
                {
                  "@type": "Parameter",
                  "name": "graphRef",
                  "type": "typedef.GraphRef",
                  "summary": "A valid graph resource identifier string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a Update Quad Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "value",
              "summary": "Creates a pattern matching rule for a triple [Subject, Predicate, Object]\nadd extra information about the type of the value object",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "objValue",
                  "type": "string|number|boolean|Var",
                  "summary": "an specific value"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a quad or a triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "link",
              "summary": "Creates a pattern matching rule for a triple [Subject, Predicate, Object]",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "subject",
                  "type": "string|Var",
                  "summary": "The IRI of a triple’s subject or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "predicate",
                  "type": "string|Var",
                  "summary": "The IRI of a property or a variable"
                },
                {
                  "@type": "Parameter",
                  "name": "object",
                  "type": "string|Var",
                  "summary": "The IRI of a node or a variable, or a literal"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a quad or a triple Statement",
                "type": "WOQLQuery"
              }
            },
            {
              "@type": "Definition",
              "name": "dot",
              "summary": "Extract the value of a key in a bound document.",
              "examples": [],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "document",
                  "type": "string|Var",
                  "summary": "Document which is being accessed."
                },
                {
                  "@type": "Parameter",
                  "name": "field",
                  "type": "string|Var",
                  "summary": "The field from which the document which is being accessed."
                },
                {
                  "@type": "Parameter",
                  "name": "value",
                  "type": "string|Var",
                  "summary": "The value for the document and field."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A WOQLQuery which contains the a dot Statement",
                "type": "WOQLQuery"
              }
            }
          ]
        },
        {
          "@type": "Class",
          "name": "WOQLClient",
          "memberFunctions": [
            {
              "@type": "Definition",
              "name": "setApiKey",
              "summary": "set the api key to access the cloud resources",
              "examples": [],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "accessToken",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "customHeaders",
              "summary": "add extra headers to your request",
              "examples": [],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "customHeaders",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "copy",
              "summary": "creates a copy of the client with identical internal state and context\nuseful if we want to change context for a particular API call without changing\nthe current client context",
              "examples": [
                "let newClient = client.copy()"
              ],
              "section": "Utility",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "new client object with identical state to original but\nwhich can be manipulated independently",
                "type": "WOQLClient"
              }
            },
            {
              "@type": "Definition",
              "name": "server",
              "summary": "Gets the current connected server url\nit can only be set creating a new WOQLCLient instance",
              "examples": [],
              "section": "Get or Change the current Params",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "api",
              "summary": "Retrieve the URL of the server’s API base that we are currently connected to",
              "examples": [
                "let api_url = client.api()"
              ],
              "section": "Get or Change the current Params",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the URL of the TerminusDB server api endpoint we are connected\nto (typically server() + “api/”)",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "organization",
              "summary": "Gets/Sets the client’s internal organization context value, if you change the organization\nname the databases list will be set to empty",
              "examples": [
                "client.organization(\"admin\")"
              ],
              "section": "Manage Organization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgId",
                  "type": "string|boolean",
                  "summary": "the organization id to set the context to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "string|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "hasDatabase",
              "summary": "Checks if a database exists\n\nReturns true if a DB exists and false if it doesn't. Other results\nthrow an exception.",
              "examples": [
                "async function executeIfDatabaseExists(f){\n     const hasDB = await client.hasDatabase(\"admin\", \"testdb\")\n     if (hasDB) {\n         f()\n     }\n}"
              ],
              "section": "Manage Triples",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgName",
                  "type": "string",
                  "summary": "the organization id to set the context to"
                },
                {
                  "@type": "Parameter",
                  "name": "dbName",
                  "type": "string",
                  "summary": "the db name to set the context to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getDatabases",
              "summary": "Gets the organization's databases list.\n\nIf no organization has been set up, the function throws an exception",
              "examples": [
                "async function callGetDatabases(){\n     const dbList = await client.getDatabases()\n     console.log(dbList)\n}"
              ],
              "section": "Manage Organization",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "databases",
              "summary": "Set/Get the organization's databases list (id, label, comment) that the current\nuser has access to on the server.",
              "examples": [
                "//to get the list of all organization's databases\nasync function callGetDatabases(){\n     await client.getDatabases()\n     console.log(client.databases())\n}"
              ],
              "section": "Manage Organization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbList",
                  "type": "array",
                  "summary": "a list of databases the user has access to on the server, each having:"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the organization's databases list",
                "type": "array"
              }
            },
            {
              "@type": "Definition",
              "name": "user",
              "summary": "Gets the current user object as returned by the connect capabilities response\nuser has fields: [id, name, notes, author]",
              "examples": [],
              "section": "Get or Change the current Params",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "Object"
              }
            },
            {
              "@type": "Definition",
              "name": "userOrganization",
              "examples": [],
              "section": null,
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the user organization name",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "databaseInfo",
              "summary": "Gets the database's details",
              "examples": [],
              "section": "Manage Organization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbName",
                  "type": "string",
                  "summary": "the datbase name"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the database description object",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "db",
              "summary": "Sets / Gets the current database",
              "examples": [
                "client.db(\"mydb\")"
              ],
              "section": "Manage Triples",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id to set the context to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "- the current database or false",
                "type": "string|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "setSystemDb",
              "summary": "Sets the internal client context to allow it to talk to the server’s internal system database",
              "examples": [],
              "section": "Get or Change the current Params",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "repo",
              "summary": "Gets / Sets the client’s internal repository context value (defaults to ‘local’)",
              "examples": [
                "client.repo(\"origin\")"
              ],
              "section": "Get or Change the current Params",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "repoId",
                  "type": "typedef.RepoType|string",
                  "summary": "default value is local"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the current repository id within the client context",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "checkout",
              "summary": "Gets/Sets the client’s internal branch context value (defaults to ‘main’)",
              "examples": [],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branchId",
                  "type": "string",
                  "summary": "the branch id to set the context to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the current branch id within the client context",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "ref",
              "summary": "Sets / gets the current ref pointer (pointer to a commit within a branch)\nReference ID or Commit ID are unique hashes that are created whenever a new commit is recorded",
              "examples": [
                "client.ref(\"mkz98k2h3j8cqjwi3wxxzuyn7cr6cw7\")"
              ],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "commitId",
                  "type": "string",
                  "summary": "the reference ID or commit ID"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the current commit id within the client context",
                "type": "string|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "localAuth",
              "summary": "Sets/Gets set the database basic connection credential",
              "examples": [
                "client.localAuth({user:\"admin\",\"key\":\"mykey\",\"type\":\"basic\"})"
              ],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "newCredential",
                  "type": "typedef.CredentialObj"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "typedef.CredentialObj|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "remoteAuth",
              "summary": "Sets/Gets the jwt token for authentication\nwe need this to connect 2 terminusdb server to each other for push, pull, clone actions",
              "examples": [
                "client.remoteAuth({\"key\":\"dhfmnmjglkrelgkptohkn\",\"type\":\"jwt\"})"
              ],
              "section": "Authorization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "newCredential",
                  "type": "typedef.CredentialObj"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "typedef.CredentialObj|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "author",
              "summary": "Gets the string that will be written into the commit log for the current user",
              "examples": [
                "client.author()"
              ],
              "section": "Get or Change the current Params",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the current user",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "set",
              "examples": [
                "sets several of the internal state values in a single call\n(similar to connect, but only sets internal client state, does not communicate with server)\nclient.set({key: \"mypass\", branch: \"dev\", repo: \"origin\"})"
              ],
              "section": "Get or Change the current Params",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.ParamsObj",
                  "summary": "a object with connection params"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "resource",
              "summary": "Generates a resource string for the required context\nof the current context for \"commits\" \"meta\" \"branch\" and \"ref\" special resources",
              "examples": [
                "const branch_resource = client.resource(\"branch\")"
              ],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "resourceType",
                  "type": "typedef.ResourceType",
                  "summary": "the type of resource string that is required - one\nof “db”, “meta”, “repo”, “commits”, “branch”, “ref”"
                },
                {
                  "@type": "Parameter",
                  "name": "resourceId",
                  "type": "string",
                  "summary": "can be used to specify a specific branch / ref - if not supplied\nthe current context will be used"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "a resource string for the desired context",
                "type": "string"
              }
            },
            {
              "@type": "Definition",
              "name": "connect",
              "summary": "You can call this to get the server info or override the start params\nconfiguration, this.connectionConfig.server will be used if present,\nor the promise will be rejected.",
              "examples": [
                "client.connect()"
              ],
              "section": "Api Deprecated",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.ParamsObj",
                  "summary": "TerminusDB Server connection parameters"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the connection capabilities response object or an error object",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "createDatabase",
              "summary": "Creates a new database in TerminusDB server",
              "examples": [
                "//remember set schema:true if you need to add a schema graph\nclient.createDatabase(\"mydb\", {label: \"My Database\", comment: \"Testing\", schema: true})"
              ],
              "section": "Manage Database",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "The id of the new database to be created"
                },
                {
                  "@type": "Parameter",
                  "name": "dbDetails",
                  "type": "typedef.DbDetails",
                  "summary": "object containing details about the database to be created"
                },
                {
                  "@type": "Parameter",
                  "name": "orgId",
                  "type": "string",
                  "summary": "optional organization id - if absent default local organization\nid is used"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "updateDatabase",
              "summary": "Update a database in TerminusDB server",
              "examples": [
                "client.updateDatabase({id: \"mydb\", label: \"My Database\", comment: \"Testing\"})"
              ],
              "section": "Manage Database",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbDoc",
                  "type": "typedef.DbDoc",
                  "summary": "object containing details about the database to be updated"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteDatabase",
              "summary": "Deletes a database from a TerminusDB server",
              "examples": [
                "client.deleteDatabase(\"mydb\")"
              ],
              "section": "Manage Database",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "The id of the database to be deleted"
                },
                {
                  "@type": "Parameter",
                  "name": "orgId",
                  "type": "string",
                  "summary": "the id of the organization to which the database belongs\n(in desktop use, this will always be “admin”)"
                },
                {
                  "@type": "Parameter",
                  "name": "force",
                  "type": "boolean"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getTriples",
              "summary": "Retrieve the contents of a graph within a TerminusDB as triples, encoded in\nthe turtle (ttl) format",
              "examples": [
                "const turtle = await client.getTriples(\"schema\", \"alt\")"
              ],
              "section": "Manage Triples",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphType",
                  "type": "typedef.GraphType",
                  "summary": "type of graph to get triples from,\neither “instance” or  “schema”"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object (with\nthe contents being a string representing a set of triples in turtle (ttl) format),\nor an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "updateTriples",
              "summary": "Replace the contents of the specified graph with the passed triples encoded\nin the turtle (ttl) format",
              "examples": [
                "client.updateTriples(\"schema\", \"alt\", turtle_string, \"dumping triples to graph alt\")"
              ],
              "section": "Manage Triples",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphType",
                  "type": "string",
                  "summary": "type of graph  |instance|schema|inference|"
                },
                {
                  "@type": "Parameter",
                  "name": "turtle",
                  "type": "string",
                  "summary": "string encoding triples in turtle (ttl) format"
                },
                {
                  "@type": "Parameter",
                  "name": "commitMsg",
                  "type": "string",
                  "summary": "Textual message describing the reason for the update"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "insertTriples",
              "summary": "Appends the passed turtle to the contents of a graph",
              "examples": [],
              "section": "Manage Triples",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "graphType",
                  "type": "string",
                  "summary": "type of graph  |instance|schema|inference|"
                },
                {
                  "@type": "Parameter",
                  "name": "turtle",
                  "type": "string",
                  "summary": "is a valid set of triples in turtle format (OWL)"
                },
                {
                  "@type": "Parameter",
                  "name": "commitMsg",
                  "type": "string",
                  "summary": "Textual message describing the reason for the update"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "message",
              "summary": "Sends a message to the server",
              "examples": [],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "message",
                  "type": "string",
                  "summary": "textual string"
                },
                {
                  "@type": "Parameter",
                  "name": "pathname",
                  "type": "string",
                  "summary": "a server path to send the message to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "action",
              "summary": "Sends an action to the server",
              "examples": [],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "actionName",
                  "type": "string",
                  "summary": "structure of the action"
                },
                {
                  "@type": "Parameter",
                  "name": "payload",
                  "type": "object",
                  "summary": "a request body call"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "info",
              "summary": "Gets TerminusDB Server Information",
              "examples": [
                "client.info()"
              ],
              "section": "Utility",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "query",
              "summary": "Executes a WOQL query on the specified database and returns the results",
              "examples": [
                "const result = await client.query(WOQL.star())"
              ],
              "section": "Query the database",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "woql",
                  "type": "WOQLQuery",
                  "summary": "an instance of the WOQLQuery class"
                },
                {
                  "@type": "Parameter",
                  "name": "commitMsg",
                  "type": "string",
                  "summary": "a message describing the reason for the change that will\nbe written into the commit log (only relevant if the query contains an update)"
                },
                {
                  "@type": "Parameter",
                  "name": "allWitnesses",
                  "type": "boolean"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                },
                {
                  "@type": "Parameter",
                  "name": "resources",
                  "type": "Array.<NamedResourceData>",
                  "summary": "csv resources supplied as strings"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "branch",
              "summary": "Creates a new branch with a TerminusDB database, starting from the current context of\nthe client (branch / ref)",
              "examples": [
                "client.branch(\"dev\")"
              ],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "newBranchId",
                  "type": "string",
                  "summary": "local identifier of the new branch the ID of the new branch\nto be created"
                },
                {
                  "@type": "Parameter",
                  "name": "isEmpty",
                  "type": "boolean",
                  "summary": "if isEmpty is true it will create a empty branch."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "squashBranch",
              "summary": "Squash branch commits",
              "examples": [],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branchId",
                  "type": "string",
                  "summary": "local identifier of the new branch"
                },
                {
                  "@type": "Parameter",
                  "name": "commitMsg",
                  "type": "string",
                  "summary": "Textual message describing the reason for the update"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "resetBranch",
              "summary": "Reset branch to a commit id, Reference ID or Commit ID are unique hashes that are\ncreated whenever a new commit is recorded",
              "examples": [],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branchId",
                  "type": "string",
                  "summary": "local identifier of the new branch"
                },
                {
                  "@type": "Parameter",
                  "name": "commitId",
                  "type": "string",
                  "summary": "Reference ID or Commit ID"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "optimizeBranch",
              "summary": "Optimize db branch",
              "examples": [],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branchId",
                  "type": "string",
                  "summary": "local identifier of the new branch"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteBranch",
              "summary": "Deletes a branch from database",
              "examples": [],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "branchId",
                  "type": "string",
                  "summary": "local identifier of the branch"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "pull",
              "summary": "Pull changes from a branch on a remote database to a branch on a local database",
              "examples": [
                "client.pull({remote: \"origin\", remote_branch: \"main\", message: \"Pulling from remote\"})"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "remoteSourceRepo",
                  "type": "typedef.RemoteRepoDetails",
                  "summary": "an object describing the source of the pull"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "fetch",
              "summary": "Fetch updates to a remote database to a remote repository with the local database",
              "examples": [],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "remoteId",
                  "type": "string",
                  "summary": "if of the remote to fetch (eg: 'origin')"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "push",
              "summary": "Push changes from a branch on a local database to a branch on a remote database",
              "examples": [
                "client.push({remote: \"origin\", remote_branch: \"main\", message: \"Pulling from remote\"})"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "remoteTargetRepo",
                  "type": "typedef.RemoteRepoDetails",
                  "summary": "an object describing the target of the push\n{remote: \"origin\", \"remote_branch\": \"main\", \"author\": \"admin\", \"message\": \"message\"}"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "rebase",
              "summary": "Merges the passed branch into the current one using the rebase operation",
              "examples": [
                "//from the branch head\nclient.rebase({rebase_from: \"admin/db_name/local/branch/branch_name\", message:\n\"Merging from dev\")\n//or from a commit id\nclient.rebase({rebase_from: \"admin/db_name/local/commit/9w8hk3y6rb8tjdy961de3i536ntkqd8\",\nmessage: \"Merging from dev\")"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "rebaseSource",
                  "type": "object",
                  "summary": "json describing the source branch to be used as a base"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "reset",
              "summary": "Reset the current branch HEAD to the specified commit path",
              "examples": [],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "commitPath",
                  "type": "string",
                  "summary": "The commit path to set the current branch to"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "clonedb",
              "summary": "Clones a remote repo and creates a local copy",
              "examples": [
                "client.clonedb({remote_url: \"https://my.terminusdb.com/myorg/mydb\", label \"Cloned DB\", comment: \"Cloned from mydb\"}, newid: \"mydb\")"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "cloneSource",
                  "type": "typedef.CloneSourceDetails",
                  "summary": "object describing the source branch\nto be used as a base"
                },
                {
                  "@type": "Parameter",
                  "name": "newDbId",
                  "type": "string",
                  "summary": "id of the new cloned database on the local server"
                },
                {
                  "@type": "Parameter",
                  "name": "orgId",
                  "type": "string",
                  "summary": "id of the local organization that the new cloned database\nwill be created in (in desktop mode this is always “admin”)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "dispatch",
              "summary": "Common request dispatch function",
              "examples": [],
              "section": "Utility",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "generateCommitInfo",
              "summary": "Generates the json structure for commit messages",
              "examples": [],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "msg",
                  "type": "string",
                  "summary": "textual string describing reason for the change"
                },
                {
                  "@type": "Parameter",
                  "name": "author",
                  "type": "string",
                  "summary": "optional author id string - if absent current user id will be used"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object"
              }
            },
            {
              "@type": "Definition",
              "name": "generateCommitDescriptor",
              "summary": "Generates the json structure for commit descriptor",
              "examples": [],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "commitId",
                  "type": "string",
                  "summary": "a valid commit id o"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "prepareRevisionControlArgs",
              "summary": "Adds an author string (from the user object returned by connect) to the commit message.",
              "examples": [],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "rc_args",
                  "type": "object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "object|boolean"
              }
            },
            {
              "@type": "Definition",
              "name": "addDocument",
              "summary": "to add a new document or a list of new documents into the instance or the schema graph.",
              "examples": [
                "const json = [{ \"@type\" : \"Class\",\n             \"@id\" : \"Coordinate\",\n             \"@key\" : { '@type' : 'Hash',\n             '@fields' : ['x','y'] },\n             \"x\" : \"xsd:decimal\",\n             \"y\" : \"xsd:decimal\" },\n             { \"@type\" : \"Class\",\n             \"@id\" : \"Country\",\n             \"@key\" : { '@type' : 'Lexical',\n                         '@fields' : [name] },\n             \"name\" : \"xsd:string\",\n             \"perimeter\" : { \"@type\" : \"List\",\n                             \"@class\" : \"Coordinate\" } }]\nclient.addDocument(json,{\"graph_type\":\"schema\"},\"mydb\",\"add new schema documents\")\n\n//if we would like to override the entire schema\nconst json = [\n{\"@base\": \"terminusdb:///data/\",\n      \"@schema\": \"terminusdb:///schema#\",\n      \"@type\": \"@context\"\n  },\n  {\n      \"@id\": \"Person\",\n       \"@key\": {\n          \"@type\": \"Random\"\n      },\n      \"@type\": \"Class\",\n      \"name\": {\n          \"@class\": \"xsd:string\",\n          \"@type\": \"Optional\"\n      }\n  }]\n\n// client.addDocument(json,{\"graph_type\":\"schema\",\"full_replace:true\"},\n      \"mydb\",\"update the all schema\");\n\n// Here we will pass true to show how to get dataVersion\n\nconst response = await client.addDocument(json, {\"graph_type\": \"schema\"},\n  \"mydb\",\n  \"add new schema\", '',\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.addDocument(json, {\"graph_type\": \"schema\"},\n  \"mydb\",\n  \"add new schema\", response.dataVersion,\n)"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "json",
                  "type": "object"
                },
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.DocParamsPost",
                  "summary": "the post parameters {@link #typedef.DocParamsPost}"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the dbid"
                },
                {
                  "@type": "Parameter",
                  "name": "string",
                  "type": "message",
                  "summary": "the insert commit message"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "queryDocument",
              "summary": "Use {@link #getDocument} instead.",
              "examples": [
                "const query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 42 },\n }\nclient.queryDocument(query, {\"as_list\":true})\n\n\n// Here we will pass true to show how to get dataVersion\nconst query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 42 },\n }\n\nconst response = await client.queryDocument(query, {\"as_list\": true}, '', '','',true);\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [\n //     {\n //       '@id': 'Person/052d60ffbd114bf5e7331b03f07fcb7',\n //       '@type': 'Person',\n //       age: 42,\n //       name: 'John',\n //     },\n //   ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // query and used it is next query as lastDataVersion\n const query = {\n  \"type\": \"Person\",\n  \"query\": { \"age\": 18 },\n }\n\n const response1 = await client.queryDocument(query, {\"as_list\": true}, '',\n   '',\n   response.dataVersion\n );"
              ],
              "section": "Api Deprecated",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "object",
                  "summary": "the query template"
                },
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.DocParamsGet",
                  "summary": "the get parameters"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                },
                {
                  "@type": "Parameter",
                  "name": "branch",
                  "type": "string",
                  "summary": "the database branch"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getDocument",
              "examples": [
                "//return the schema graph as a json array\nclient.getDocument({\"graph_type\":\"schema\",\"as_list\":true}).then(result={\n   console.log(result)\n})\n\n//retutn the Country class document from the schema graph\nclient.getDocument({\"graph_type\":\"schema\",\"as_list\":true,\"id\":\"Country\"}).then(result={\n   console.log(result)\n})\n\n//pass a document query template to query the document interface\nconst queryTemplate = { \"name\": \"Ireland\"}\nclient.getDocument({\"as_list\":true, \"@type\":\"Country\"\n           query:queryTemplate}).then(result=>{\n   console.log(result)\n})\n\n\n// Here we will pass true to show how to get dataVersion\nconst response = await client.getDocument({\"graph_type\":\"schema\",\"as_list\":true},\n  \"\",\n  \"\",\n  \"\",\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.getDocument({\"graph_type\":\"schema\",\"as_list\":true},\n  \"\",\n  \"\",\n  response.dataVersion,\n)"
              ],
              "section": "Query the database",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.DocParamsGet",
                  "summary": "the get parameters,\nyou can pass document query search template with the params"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                },
                {
                  "@type": "Parameter",
                  "name": "branch",
                  "type": "string",
                  "summary": "the database branch"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                },
                {
                  "@type": "Parameter",
                  "name": "query",
                  "type": "object",
                  "summary": "document query search template"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "updateDocument",
              "examples": [
                "client.updateDocument(\n{\n \"@id\": \"Person\",\n   \"@key\": {\n     \"@type\": \"Random\",\n   },\n   \"@type\": \"Class\",\n   label: \"xsd:string\",\n },\n{ graph_type: \"schema\" }\n);\n\n\n// Here we will pass true to show how to get dataVersion\n\n    const response = await client.updateDocument(\n      {\n        \"@id\": \"Person\",\n        \"@key\": {\n          \"@type\": \"Random\",\n        },\n        \"@type\": \"Class\",\n        label: \"xsd:string\",\n      },\n      { graph_type: \"schema\" },\n      \"\",\n      \"\",\n      \"\",\n      true\n    );\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.updateDocument(\n      {\n        \"@id\": \"Person\",\n        \"@key\": {\n          \"@type\": \"Random\",\n        },\n        \"@type\": \"Class\",\n        label: \"xsd:string\",\n      },\n      { graph_type: \"schema\" },\n      \"\",\n      \"\",\n      response.dataVersion\n    );\n\n // update a document and create the linked document together\n // we are update the document \"Person/Person01\"\n // and create a new document {\"@type\": \"Person\",\"name\": \"child01\"} at the same time\n const response1 = await client.updateDocument(\n     {\n      \"@id\": \"Person/Person01\",\n      \"@type\": \"Person\",\n      \"name\": \"Person01\"\n      \"children\":[{\"@type\": \"Person\",\"name\": \"child01\"}]\n    },{create:true})"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "json",
                  "type": "object"
                },
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.DocParamsPut",
                  "summary": "the Put parameters {@link #typedef.DocParamsPut}"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "*",
                  "summary": "the database id"
                },
                {
                  "@type": "Parameter",
                  "name": "message",
                  "type": "*",
                  "summary": "the update commit message"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                },
                {
                  "@type": "Parameter",
                  "name": "compress",
                  "type": "boolean",
                  "summary": "If true, the function will create a new document if it doesn't exist."
                },
                {
                  "@type": "Parameter",
                  "name": "create",
                  "type": "boolean",
                  "summary": "Perform an *upsert* which inserts if the document\nis not present (also works on nested documents)"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "deleteDocument",
              "summary": "to delete the document",
              "examples": [
                "client.deleteDocument({\"graph_type\":\"schema\",id:['Country','Coordinate']})\n\n\n// Here we will pass true to show how to get dataVersion\n\nconst response = await client.deleteDocument({\"graph_type\":\"schema\",id:['Country','Coordinate']},\n  \"\",\n  \"\",\n  \"\",\n  true\n)\nconsole.log(response);\n\n // This will output:\n // {\n //   result: [ ...... ],\n //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'\n // }\n\n // Now we can use the data version we recieved as a response in previous\n // function call and used it is next function call as lastDataVersion\n\nconst response1 = await client.deleteDocument({\"graph_type\":\"schema\",\n  id:['Country','Coordinate']},\n  \"\",\n  \"\",\n  response.dataVersion,\n)"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "params",
                  "type": "typedef.DocParamsDelete"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                },
                {
                  "@type": "Parameter",
                  "name": "message",
                  "type": "string",
                  "summary": "the delete message"
                },
                {
                  "@type": "Parameter",
                  "name": "lastDataVersion",
                  "type": "string",
                  "summary": "the last data version tracking id."
                },
                {
                  "@type": "Parameter",
                  "name": "getDataVersion",
                  "type": "boolean",
                  "summary": "If true the function will return object having result\nand dataVersion."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object or object having *result*\nand *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getSchemaFrame",
              "summary": "The purpose of this method is to quickly discover the supported fields of a particular type.",
              "examples": [
                "client.getSchemaFrame(\"Country\")"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "type",
                  "type": "string",
                  "summary": "If given, the type to get information for. If omitted, information\nfor all types is returned"
                },
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getSchema",
              "summary": "get the database schema in json format",
              "examples": [
                "client.getSchema()"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                },
                {
                  "@type": "Parameter",
                  "name": "branch",
                  "type": "string",
                  "summary": "specific a branch/collection"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getClasses",
              "summary": "get all the schema classes (documents,subdocuments,abstracts)",
              "examples": [
                "client.getClasses()"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getEnums",
              "summary": "get all the Enum Objects",
              "examples": [
                "client.getEnums()"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getClassDocuments",
              "summary": "get all the Document Classes (no abstract or subdocument)",
              "examples": [
                "client.getClassDocuments()"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getBranches",
              "summary": "get the database collections list",
              "examples": [
                "client.getBranches()"
              ],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getCommitsLog",
              "summary": "get the database collections list",
              "examples": [
                "client.getCommitsLog(count=10)"
              ],
              "section": "Manage Branch",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "start",
                  "type": "number",
                  "summary": "where to start printing the commit\n   information in the log (starting from the head of the current branch)"
                },
                {
                  "@type": "Parameter",
                  "name": "count",
                  "type": "number",
                  "summary": "The number of total commit log records to return"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getPrefixes",
              "summary": "get the database prefixes object",
              "examples": [
                "client.getPrefixes()\n//return object example\n{\n'@base': 'terminusdb:///data/',\n'@schema': 'terminusdb:///schema#',\n'@type': 'Context'}"
              ],
              "section": "Manage Documents",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dbId",
                  "type": "string",
                  "summary": "the database id"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getUserOrganizations",
              "summary": "Get the list of the user's organizations and the database related",
              "examples": [
                "async funtion callGetUserOrganizations(){\n     await getUserOrganizations()\n     console.log(client.userOrganizations())\n}"
              ],
              "section": "Manage Organization",
              "parameters": [],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "userOrganizations",
              "summary": "Get/Set the list of the user's organizations (id, organization, label, comment).",
              "examples": [
                "async funtion callGetUserOrganizations(){\n     await client.getUserOrganizations()\n     console.log(client.userOrganizations())\n}"
              ],
              "section": "Manage Organization",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "orgList",
                  "type": "array",
                  "summary": "a list of user's Organization"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "the user Organizations list",
                "type": "array"
              }
            },
            {
              "@type": "Definition",
              "name": "patch",
              "summary": "Apply a patch object to another object",
              "examples": [
                "client.patch(\n     { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"},\n     { \"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}\n ).then(patchResult=>{\n console.log(patchResult)\n})\n//result example\n//{ \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jannet\"}"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "before",
                  "type": "object",
                  "summary": "The current state of JSON document"
                },
                {
                  "@type": "Parameter",
                  "name": "patch",
                  "type": "object",
                  "summary": "The patch object"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "patchResource",
              "summary": "Apply a patch object to the current resource",
              "examples": [
                "const patch = [\n  {\n   \"@id\": \"Obj/id1\",\n    \"name\": {\n     \"@op\": \"SwapValue\",\n      \"@before\": \"foo\",\n      \"@after\": \"bar\"\n    }\n  },\n {\n   \"@id\": \"Obj/id2\",\n    \"name\": {\n      \"@op\": \"SwapValue\",\n      \"@before\": \"foo\",\n     \"@after\": \"bar\"\n    }\n }\n]\nclient.db(\"mydb\")\nclient.checkout(\"mybranch\")\nclient.patchResource(patch,\"apply patch to mybranch\").then(patchResult=>{\n console.log(patchResult)\n})\n// result example\n// [\"Obj/id1\",\n// \"Obj/id2\"]\n// or conflict error 409\n// {\n// \"@type\": \"api:PatchError\",\n// \"api:status\": \"api:conflict\",\n// \"api:witnesses\": [\n//  {\n//   \"@op\": \"InsertConflict\",\n//    \"@id_already_exists\": \"Person/Jane\"\n//  }\n//]\n//}"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "patch",
                  "type": "array",
                  "summary": "The patch object"
                },
                {
                  "@type": "Parameter",
                  "name": "message",
                  "type": "string",
                  "summary": "The commit message"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getJSONDiff",
              "summary": "Get the patch of difference between two documents.",
              "examples": [
                "client.getJSONDiff(\n     { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Jane\" },\n     { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Janine\" }\n ).then(diffResult=>{\n console.log(diffResult)\n})\n//result example\n//{'@id': 'Person/Jane',\n// name: { '@after': 'Janine', '@before': 'Jane', '@op': 'SwapValue' }}"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "before",
                  "type": "object",
                  "summary": "The current state of JSON document"
                },
                {
                  "@type": "Parameter",
                  "name": "after",
                  "type": "object",
                  "summary": "The updated state of JSON document"
                },
                {
                  "@type": "Parameter",
                  "name": "options",
                  "type": "object",
                  "summary": "{keep:{}} Options to send to the diff endpoint.\nThe diff api outputs the changes between the input,\nin options you can list the properties that you would like to see in the diff result in any case."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getVersionObjectDiff",
              "summary": "Get the patch of difference between two documents.",
              "examples": [
                "const jsonObj =  { \"@id\": \"Person/Jane\", \"@type\": \"Person\", name: \"Janine\" }\nclient.getVersionObjectDiff(\"main\",jsonObj\n     \"Person/Jane\").then(diffResp=>{\n   console.log(diffResp)\n})"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "dataVersion",
                  "type": "string",
                  "summary": "The version from which to compare the object"
                },
                {
                  "@type": "Parameter",
                  "name": "jsonObject",
                  "type": "object",
                  "summary": "The updated state of JSON document"
                },
                {
                  "@type": "Parameter",
                  "name": "id",
                  "type": "string",
                  "summary": "The document id to be diffed"
                },
                {
                  "@type": "Parameter",
                  "name": "options",
                  "type": "object",
                  "summary": "{keep:{}} Options to send to the diff endpoint\nthe diff api outputs the changes between the input,\nbut you can list the properties that you would like to see in the diff result in any case."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "getVersionDiff",
              "summary": "Get the patch of difference between branches or commits.",
              "examples": [
                "//This is to view all the changes between two commits\nconst beforeCommit = \"a73ssscfx0kke7z76083cgswszdxy6l\"\nconst afterCommit = \"73rqpooz65kbsheuno5dsayh71x7wf4\"\n\nclient.getVersionDiff( beforeCommit, afterCommit).then(diffResult=>{\n console.log(diffResult)\n})\n\n//This is to view the changes between two commits but only for the given document\nclient.getVersionDiff( beforeCommit, afterCommit, \"Person/Tom\").then(diffResult=>{\n console.log(diffResult)\n})\n\n//This is to view the changes between a branch (head) and a commit for the given document\nclient.getVersionDiff(\"main\", afterCommit, \"Person/Tom\" ).then(diffResult=>{\n   console.log(diffResult)\n})\n\n//This is to view the changes between two branches with the keep options\nconst options = {\"keep\":{\"@id\":true, \"name\": true}, start:0, count:10}\nclient.getVersionDiff(\"main\",\"mybranch\",options).then(diffResult=>{\n   console.log(diffResult)\n})"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "beforeVersion",
                  "type": "string",
                  "summary": "Before branch/commit to compare"
                },
                {
                  "@type": "Parameter",
                  "name": "afterVersion",
                  "type": "string",
                  "summary": "After branch/commit to compare"
                },
                {
                  "@type": "Parameter",
                  "name": "id",
                  "type": "string",
                  "summary": "The document id to be diffed,\nif it is omitted all the documents will be compared"
                },
                {
                  "@type": "Parameter",
                  "name": "options",
                  "type": "typedef.DiffObject",
                  "summary": "{keep:{},count:10,start:0}\nOptions to send to the diff endpoint.\nThe diff api outputs the changes between the input (branches or commits),\nin options you can list the properties that you would like to see in the diff result in any case."
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            },
            {
              "@type": "Definition",
              "name": "apply",
              "summary": "Diff two different commits and apply changes on the current branch/commit.\nIf you would like to change branch or commit before apply use client.checkout(\"branchName\")",
              "examples": [
                "client.checkout(\"mybranch\")\nclient.apply(\"mybranch\",\"mybranch_new\",\"merge main\").then(result=>{\n   console.log(result)\n})"
              ],
              "section": "Collaboration Api",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "beforeVersion",
                  "type": "string",
                  "summary": "Before branch/commit to compare"
                },
                {
                  "@type": "Parameter",
                  "name": "afterVersion",
                  "type": "string",
                  "summary": "After branch/commit to compare"
                },
                {
                  "@type": "Parameter",
                  "name": "message",
                  "type": "string",
                  "summary": "apply commit message"
                },
                {
                  "@type": "Parameter",
                  "name": "matchFinalState",
                  "type": "boolean",
                  "summary": "the default value is false"
                },
                {
                  "@type": "Parameter",
                  "name": "options",
                  "type": "object",
                  "summary": "{keep:{}} Options to send to the apply endpoint"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "getDocumentHistory",
              "summary": "Get the document's history for a specific database or branch",
              "examples": [
                "//this will return the last 5 commits for the Person/Anna document\nclient.checkout(\"mybranch\")\nclient.docHistory(\"Person/Anna\",{start:0,count:5}).then(result=>{\n   console.log(result)\n})\n//this will return the last and the first commit for the Person/Anna document\nclient.docHistory(\"Person/Anna\",{updated:true,created:true}).then(result=>{\n   console.log(result)\n})"
              ],
              "section": null,
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "id",
                  "type": "string",
                  "summary": "id of document to report history of"
                },
                {
                  "@type": "Parameter",
                  "name": "historyParams",
                  "type": "typedef.DocHistoryParams"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "type": "void"
              }
            },
            {
              "@type": "Definition",
              "name": "sendCustomRequest",
              "summary": "Call a custom Api endpoit",
              "examples": [
                "client.sendCustomRequest(\"GET\", \"http://localhost:3030/changes/\").then(result=>{\n   console.log(result)\n})"
              ],
              "section": "Utility",
              "parameters": [
                {
                  "@type": "Parameter",
                  "name": "requestType",
                  "type": "string",
                  "summary": "The current state of JSON document"
                },
                {
                  "@type": "Parameter",
                  "name": "customRequestURL",
                  "type": "string",
                  "summary": "The patch object"
                },
                {
                  "@type": "Parameter",
                  "name": "payload",
                  "type": "object",
                  "summary": "the request payload"
                }
              ],
              "returns": {
                "@type": "Returns",
                "name": "",
                "summary": "A promise that returns the call response object, or an Error if rejected.",
                "type": "Promise"
              }
            }
          ]
        }
      ]
    }
  ]
}
