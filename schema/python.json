{"@type": "Application", "version": "10.2.6", "name": "terminusdb-client", "summary": "TerminusDB client library for accessing the Terminus DB API", "language": "Python", "license": "Apache 2.0", "modules": [{"@type": "Module", "name": "terminusdb_client", "classes": [{"@type": "Class", "name": "Client", "summary": "Client for TerminusDB server.", "memberVariables": [{"@type": "Parameter", "type": "str", "name": "server_url", "summary": "URL of the server that this client connected."}, {"@type": "Parameter", "type": "str", "name": "api", "summary": "API endpoint for this client."}, {"@type": "Parameter", "type": "str", "name": "team", "summary": "Team that this client is using. \"admin\" for local dbs."}, {"@type": "Parameter", "type": "str", "name": "db", "summary": "Database that this client is connected to."}, {"@type": "Parameter", "type": "str", "name": "user", "summary": "TerminiusDB user that this client is using. \"admin\" for local dbs."}, {"@type": "Parameter", "type": "str", "name": "branch", "summary": "Branch of the database that this client is connected to. Default to \"main\"."}, {"@type": "Parameter", "type": "str, None", "name": "ref", "summary": "Ref setting for the client. Default to None."}, {"@type": "Parameter", "type": "str", "name": "repo", "summary": "Repo identifier of the database that this client is connected to. Default to \"local\"."}], "memberFunctions": [{"@type": "Definition", "name": "__init__", "parameters": [{"@type": "Parameter", "type": "str", "name": "server_url", "summary": "URL of the server that this client will connect to."}, {"@type": "Parameter", "type": "optional, str", "name": "user_agent", "summary": "User agent header when making requests. Defaults to terminusdb-client-python with the version appended."}, {"@type": "Parameter", "type": "", "name": "**kwargs", "summary": "Extra configuration options"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "The Client constructor."}, {"@type": "Definition", "name": "connect", "parameters": [{"@type": "Parameter", "type": "str", "name": "team", "summary": "Name of the team, default to be \"admin\""}, {"@type": "Parameter", "type": "optional, str", "name": "db", "summary": "Name of the database connected"}, {"@type": "Parameter", "type": "optional, dict", "name": "remote_auth", "summary": "Remote Auth setting"}, {"@type": "Parameter", "type": "optional, str", "name": "key", "summary": "API key for connecting, default to be \"root\""}, {"@type": "Parameter", "type": "optional, str", "name": "user", "summary": "Name of the user, default to be \"admin\""}, {"@type": "Parameter", "type": "bool", "name": "use_token", "summary": "Use token to connect. If both `jwt_token` and `api_token` is not provided (None), then it will use the ENV variable TERMINUSDB_ACCESS_TOKEN to connect as the API token"}, {"@type": "Parameter", "type": "optional, str", "name": "jwt_token", "summary": "The Bearer JWT token to connect. Default to be None."}, {"@type": "Parameter", "type": "optional, strs", "name": "api_token", "summary": "The API token to connect. Default to be None."}, {"@type": "Parameter", "type": "optional, str", "name": "branch", "summary": "Branch to be connected, default to be \"main\""}, {"@type": "Parameter", "type": "optional, str", "name": "ref", "summary": "Ref setting"}, {"@type": "Parameter", "type": "optional, str", "name": "repo", "summary": "Local or remote repo, default to be \"local\""}, {"@type": "Parameter", "type": "", "name": "**kwargs", "summary": "Extra configuration options."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")"], "summary": "Connect to a Terminus server at the given URI with an API key."}, {"@type": "Definition", "name": "close", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Undo connect and close the connection."}, {"@type": "Definition", "name": "_check_connection", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Raise connection InterfaceError if not connected\nDefaults to check if a db is connected"}, {"@type": "Definition", "name": "info", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict", "summary": "Dict with version information:\n```\n{\n  \"@type\": \"api:InfoResponse\",\n  \"api:info\": {\n    \"authority\": \"anonymous\",\n    \"storage\": {\n      \"version\": \"1\"\n    },\n    \"terminusdb\": {\n      \"git_hash\": \"53acb38f9aedeec6c524f5679965488788e6ccf5\",\n      \"version\": \"10.1.5\"\n    },\n    \"terminusdb_store\": {\n      \"version\": \"0.19.8\"\n    }\n  },\n  \"api:status\": \"api:success\"\n}\n```"}, "examples": null, "summary": "Get info of a TerminusDB database server"}, {"@type": "Definition", "name": "ok", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "bool"}, "examples": null, "summary": "Check whether the TerminusDB server is still OK.\n   Status is not OK when this function returns false\n   or throws an exception (mostly ConnectTimeout)"}, {"@type": "Definition", "name": "log", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "list", "summary": "List of the following commit objects:\n```\n  {\n   \"@id\":\"InitialCommit/hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n   \"@type\":\"InitialCommit\",\n   \"author\":\"system\",\n   \"identifier\":\"hpl18q42dbnab4vzq8me4bg1xn8p2a0\",\n   \"message\":\"create initial schema\",\n   \"schema\":\"layer_data:Layer_4234adfe377fa9563a17ad764ac37f5dcb14de13668ea725ef0748248229a91b\",\n   \"timestamp\":1660919664.9129035\n  }\n```"}, "examples": null, "summary": "Get commit history of a database\nParameters\n----------\nteam : str, optional\n     The team from which the database is. Defaults to the class property.\ndb : str, optional\n     The database. Defaults to the class property.\nstart : int, optional\n     Commit index to start from. Defaults to 0.\ncount : int, optional\n     Amount of commits to get. Defaults to -1 which gets all."}, {"@type": "Definition", "name": "get_commit_history", "parameters": [{"@type": "Parameter", "type": "int, optional", "name": "max_history", "summary": "maximum number of commit that would return, counting backwards from your current commit. Default is set to 500. It needs to be nop-negative, if input is 0 it will still give the last commit."}], "returns": {"@type": "Returns", "name": "", "type": "list"}, "examples": null, "summary": "Get the whole commit history.\nCommit history - Commit id, author of the commit, commit message and the commit time, in the current branch from the current commit, ordered backwards in time, will be returned in a dictionary in the follow format:\n```\n{ \"commit_id\":\n     { \"author\": \"commit_author\",\n       \"message\": \"commit_message\",\n       \"timestamp: <datetime object of the timestamp>\"\n     }\n}\n```"}, {"@type": "Definition", "name": "get_all_branches", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Get all the branches available in the database."}, {"@type": "Definition", "name": "rollback", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Curently not implementated. Please check back later."}, {"@type": "Definition", "name": "copy", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "Client", "summary": "The copied client instance."}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> clone = client.copy()\n>>> assert client is not clone"], "summary": "Create a deep copy of this client."}, {"@type": "Definition", "name": "set_db", "parameters": [{"@type": "Parameter", "type": "str", "name": "dbid", "summary": "Database identifer to set in the config."}, {"@type": "Parameter", "type": "str", "name": "team", "summary": "Team identifer to set in the config. If not passed in, it will use the current one."}], "returns": {"@type": "Returns", "name": "", "type": "str", "summary": "The current database identifier."}, "examples": [">>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.set_db(\"database1\")\n'database1'"], "summary": "Set the connection to another database. This will reset the connection."}, {"@type": "Definition", "name": "_get_prefixes", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Get the prefixes for a given database"}, {"@type": "Definition", "name": "create_database", "parameters": [{"@type": "Parameter", "type": "str", "name": "dbid", "summary": "Unique identifier of the database."}, {"@type": "Parameter", "type": "str, optional", "name": "team", "summary": "ID of the Team in which to create the DB (defaults to 'admin')"}, {"@type": "Parameter", "type": "str, optional", "name": "label", "summary": "Database name."}, {"@type": "Parameter", "type": "str, optional", "name": "description", "summary": "Database description."}, {"@type": "Parameter", "type": "dict, optional", "name": "prefixes", "summary": "Optional dict containing ``\"@base\"`` and ``\"@schema\"`` keys.\n\n@base (str)\n    IRI to use when ``doc:`` prefixes are expanded. Defaults to ``terminusdb:///data``.\n@schema (str)\n    IRI to use when ``scm:`` prefixes are expanded. Defaults to ``terminusdb:///schema``."}, {"@type": "Parameter", "type": "bool", "name": "include_schema", "summary": "If ``True``, a main schema graph will be created, otherwise only a main instance graph will be created."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.create_database(\"someDB\", \"admin\", \"Database Label\", \"My Description\")"], "summary": "Create a TerminusDB database by posting\na terminus:Database document to the Terminus Server."}, {"@type": "Definition", "name": "delete_database", "parameters": [{"@type": "Parameter", "type": "str", "name": "dbid", "summary": "ID of the database to delete"}, {"@type": "Parameter", "type": "str, optional", "name": "team", "summary": "the team in which the database resides (defaults to \"admin\")"}, {"@type": "Parameter", "type": "bool", "name": "force", "summary": ""}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.delete_database(\"<database>\", \"<team>\")"], "summary": "Delete a TerminusDB database."}, {"@type": "Definition", "name": "get_triples", "parameters": [{"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}], "returns": {"@type": "Returns", "name": "", "type": "str"}, "examples": null, "summary": "Retrieves the contents of the specified graph as triples encoded in turtle format"}, {"@type": "Definition", "name": "update_triples", "parameters": [{"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "", "name": "content", "summary": "Valid set of triples in Turtle or Trig format."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Updates the contents of the specified graph with the triples encoded in turtle format.\n   Replaces the entire graph contents"}, {"@type": "Definition", "name": "insert_triples", "parameters": [{"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "", "name": "content", "summary": "Valid set of triples in Turtle or Trig format."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Inserts into the specified graph with the triples encoded in turtle format."}, {"@type": "Definition", "name": "query_document", "parameters": [{"@type": "Parameter", "type": "dict", "name": "document_template", "summary": "Template for the document that is being retrived"}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "bool", "name": "as_list", "summary": "If the result returned as list rather than an iterator."}, {"@type": "Parameter", "type": "bool", "name": "get_data_version", "summary": "If the data version of the document(s) should be obtained. If True, the method return the result and the version as a tuple."}], "returns": {"@type": "Returns", "name": "", "type": "Iterable"}, "examples": null, "summary": "Retrieves all documents that match a given document template"}, {"@type": "Definition", "name": "get_document", "parameters": [{"@type": "Parameter", "type": "str", "name": "iri_id", "summary": "Iri id for the document that is to be retrieved"}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "bool", "name": "get_data_version", "summary": "If the data version of the document(s) should be obtained. If True, the method return the result and the version as a tuple."}, {"@type": "Parameter", "type": "", "name": "kwargs", "summary": "Additional boolean flags for retriving. Currently avaliable: \"prefixed\", \"minimized\", \"unfold\""}], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": null, "summary": "Retrieves the document of the iri_id"}, {"@type": "Definition", "name": "get_documents_by_type", "parameters": [{"@type": "Parameter", "type": "str", "name": "doc_type", "summary": "Specific type for the docuemnts that is retriving"}, {"@type": "Parameter", "type": "GraphType, optional", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "int", "name": "skip", "summary": "The starting posiion of the returning results, default to be 0"}, {"@type": "Parameter", "type": "int or None", "name": "count", "summary": "The maximum number of returned result, if None (default) it will return all of the avalible result."}, {"@type": "Parameter", "type": "bool", "name": "as_list", "summary": "If the result returned as list rather than an iterator."}, {"@type": "Parameter", "type": "bool", "name": "get_data_version", "summary": "If the version of the document(s) should be obtained. If True, the method return the result and the version as a tuple."}, {"@type": "Parameter", "type": "", "name": "kwargs", "summary": "Additional boolean flags for retriving. Currently avaliable: \"prefixed\", \"unfold\""}], "returns": {"@type": "Returns", "name": "", "type": "iterable", "summary": "Stream of dictionaries"}, "examples": null, "summary": "Retrieves the documents by type"}, {"@type": "Definition", "name": "get_all_documents", "parameters": [{"@type": "Parameter", "type": "GraphType, optional", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "int", "name": "skip", "summary": "The starting posiion of the returning results, default to be 0"}, {"@type": "Parameter", "type": "int or None", "name": "count", "summary": "The maximum number of returned result, if None (default) it will return all of the avalible result."}, {"@type": "Parameter", "type": "bool", "name": "as_list", "summary": "If the result returned as list rather than an iterator."}, {"@type": "Parameter", "type": "bool", "name": "get_data_version", "summary": "If the version of the document(s) should be obtained. If True, the method return the result and the version as a tuple."}, {"@type": "Parameter", "type": "", "name": "kwargs", "summary": "Additional boolean flags for retriving. Currently avaliable: \"prefixed\", \"unfold\""}], "returns": {"@type": "Returns", "name": "", "type": "iterable", "summary": "Stream of dictionaries"}, "examples": null, "summary": "Retrieves all avalibale the documents"}, {"@type": "Definition", "name": "get_existing_classes", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Get all the existing classes (only ids) in a database."}, {"@type": "Definition", "name": "insert_document", "parameters": [{"@type": "Parameter", "type": "dict or list of dict", "name": "document", "summary": "Document(s) to be inserted."}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "bool", "name": "full_replace", "summary": "If True then the whole graph will be replaced. WARNING: you should also supply the context object as the first element in the list of documents  if using this option."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}, {"@type": "Parameter", "type": "str", "name": "last_data_version", "summary": "Last version before the update, used to check if the document has been changed unknowingly"}, {"@type": "Parameter", "type": "str or int", "name": "compress", "summary": "If it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is `never` it will never compress the data."}, {"@type": "Parameter", "type": "bool", "name": "raw_json", "summary": "Update as raw json"}], "returns": {"@type": "Returns", "name": "", "type": "list", "summary": "list of ids of the inseted docuemnts"}, "examples": null, "summary": "Inserts the specified document(s)"}, {"@type": "Definition", "name": "replace_document", "parameters": [{"@type": "Parameter", "type": "dict or list of dict", "name": "document", "summary": "Document(s) to be updated."}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}, {"@type": "Parameter", "type": "str", "name": "last_data_version", "summary": "Last version before the update, used to check if the document has been changed unknowingly"}, {"@type": "Parameter", "type": "str or int", "name": "compress", "summary": "If it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is `never` it will never compress the data."}, {"@type": "Parameter", "type": "bool", "name": "create", "summary": "Create the document if it does not yet exist."}, {"@type": "Parameter", "type": "bool", "name": "raw_json", "summary": "Update as raw json"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Updates the specified document(s)"}, {"@type": "Definition", "name": "update_document", "parameters": [{"@type": "Parameter", "type": "dict or list of dict", "name": "document", "summary": "Document(s) to be updated."}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}, {"@type": "Parameter", "type": "str", "name": "last_data_version", "summary": "Last version before the update, used to check if the document has been changed unknowingly"}, {"@type": "Parameter", "type": "str or int", "name": "compress", "summary": "If it is an integer, size of the data larger than this (in bytes) will be compress with gzip in the request (assume encoding as UTF-8, 0 = always compress). If it is `never` it will never compress the data."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Updates the specified document(s). Add the document if not existed."}, {"@type": "Definition", "name": "delete_document", "parameters": [{"@type": "Parameter", "type": "str or list of str", "name": "document", "summary": "Document(s) (as dictionary or DocumentTemplate objects) or id(s) of document(s) to be updated."}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}, {"@type": "Parameter", "type": "str", "name": "commit_msg", "summary": "Commit message."}, {"@type": "Parameter", "type": "str", "name": "last_data_version", "summary": "Last version before the update, used to check if the document has been changed unknowingly"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Delete the specified document(s)"}, {"@type": "Definition", "name": "has_doc", "parameters": [{"@type": "Parameter", "type": "str", "name": "doc_id", "summary": "Id of document to be checked."}, {"@type": "Parameter", "type": "GraphType", "name": "graph_type", "summary": "Graph type, either GraphType.INSTANCE or GraphType.SCHEMA."}], "returns": {"@type": "Returns", "name": "", "type": "Bool", "summary": "if the document exist"}, "examples": null, "summary": "Check if a certain document exist in a database"}, {"@type": "Definition", "name": "get_class_frame", "parameters": [{"@type": "Parameter", "type": "str", "name": "class_name", "summary": "Name of the class"}], "returns": {"@type": "Returns", "name": "", "type": "dict", "summary": "Dictionary containing information"}, "examples": null, "summary": "Get the frame of the class of class_name. Provide information about all the avaliable properties of that class."}, {"@type": "Definition", "name": "commit", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Not implementated: open transactions currently not suportted. Please check back later."}, {"@type": "Definition", "name": "query", "parameters": [{"@type": "Parameter", "type": "dict or WOQLQuery object", "name": "woql_query", "summary": "A woql query as an object or dict"}, {"@type": "Parameter", "type": "str", "name": "commit_mg", "summary": "A message that will be written to the commit log to describe the change"}, {"@type": "Parameter", "type": "bool", "name": "get_data_version", "summary": "If the data version of the query result(s) should be obtained. If True, the method return the result and the version as a tuple."}, {"@type": "Parameter", "type": "str", "name": "last_data_version", "summary": "Last version before the update, used to check if the document has been changed unknowingly"}, {"@type": "Parameter", "type": "**deprecated**", "name": "file_dict", "summary": "File dictionary to be associated with post name => filename, for multipart POST"}], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": [">>> Client(server=\"http://localhost:6363\").query(woql, \"updating graph\")"], "summary": "Updates the contents of the specified graph with the triples encoded in turtle format Replaces the entire graph contents"}, {"@type": "Definition", "name": "create_branch", "parameters": [{"@type": "Parameter", "type": "str", "name": "new_branch_id", "summary": "New branch identifier."}, {"@type": "Parameter", "type": "bool", "name": "empty", "summary": "Create an empty branch if true (no starting commit)"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Create a branch starting from the current branch."}, {"@type": "Definition", "name": "delete_branch", "parameters": [{"@type": "Parameter", "type": "str", "name": "branch_id", "summary": "Branch to delete"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Delete a branch"}, {"@type": "Definition", "name": "pull", "parameters": [{"@type": "Parameter", "type": "str", "name": "remote", "summary": "remote to pull from, default \"origin\""}, {"@type": "Parameter", "type": "str, optional", "name": "remote_branch", "summary": "remote branch to pull from, default to be your current barnch"}, {"@type": "Parameter", "type": "str, optional", "name": "message", "summary": "optional commit message"}, {"@type": "Parameter", "type": "str, optional", "name": "author", "summary": "option to overide the author of the operation"}], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.pull()"], "summary": "Pull updates from a remote repository to the current database."}, {"@type": "Definition", "name": "fetch", "parameters": [{"@type": "Parameter", "type": "str", "name": "remote_id", "summary": "id of the remote"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Fatch the brach from a remote"}, {"@type": "Definition", "name": "push", "parameters": [{"@type": "Parameter", "type": "str", "name": "remote", "summary": "remote to push to, default \"origin\""}, {"@type": "Parameter", "type": "str, optional", "name": "remote_branch", "summary": "remote branch to push to, default to be your current barnch"}, {"@type": "Parameter", "type": "str, optional", "name": "message", "summary": "optional commit message"}, {"@type": "Parameter", "type": "str, optional", "name": "author", "summary": "option to overide the author of the operation"}, {"@type": "Parameter", "type": "dict, optional", "name": "remote_auth", "summary": "optional remote authorization (uses client remote auth otherwise)"}], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": [">>> Client(server=\"http://localhost:6363\").push(remote=\"origin\", remote_branch = \"main\", author = \"admin\", message = \"commit message\"})"], "summary": "Push changes from a branch to a remote repo"}, {"@type": "Definition", "name": "rebase", "parameters": [{"@type": "Parameter", "type": "str, optional", "name": "branch", "summary": "the branch for the rebase"}, {"@type": "Parameter", "type": "str, optional", "name": "rebase_source", "summary": "the source branch for the rebase"}, {"@type": "Parameter", "type": "str, optional", "name": "message", "summary": "the commit message"}, {"@type": "Parameter", "type": "str, optional", "name": "author", "summary": "the commit author"}], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.rebase(\"the_branch\")"], "summary": "Rebase the current branch onto the specified remote branch. Need to specify one of 'branch','commit' or the 'rebase_source'."}, {"@type": "Definition", "name": "reset", "parameters": [{"@type": "Parameter", "type": "string", "name": "commit", "summary": "Commit id or path to the commit (if use_path is True), for instance '234980523ffaf93' or 'admin/database/local/commit/234980523ffaf93'. If not provided, it will reset to the newest commit (useful when need to go back after a soft reset)."}, {"@type": "Parameter", "type": "bool", "name": "soft", "summary": "Flag indicating if the reset if soft, that is referencing to a previous commit instead of resetting to a previous commit in the backend and wipping newer commits."}, {"@type": "Parameter", "type": "bool", "name": "use_path", "summary": "Wheather or not the commit given is an id or path. Default using id and use_path is False."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.reset('234980523ffaf93')\n>>> client.reset('admin/database/local/commit/234980523ffaf93', use_path=True)"], "summary": "Reset the current branch HEAD to the specified commit path. If `soft` is not True, it will be a hard reset, meaning reset to that commit in the backend and newer commit will be wipped out. If `soft` is True, the client will only reference to that commit and can be reset to the newest commit when done."}, {"@type": "Definition", "name": "optimize", "parameters": [{"@type": "Parameter", "type": "string", "name": "path", "summary": "Path to optimize, for instance admin/database/_meta for the repo graph."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.optimize('admin/database') # optimise database branch (here main)\n>>> client.optimize('admin/database/_meta') # optimise the repository graph (actually creates a squashed flat layer)\n>>> client.optimize('admin/database/local/_commits') # commit graph is optimised"], "summary": "Optimize the specified path."}, {"@type": "Definition", "name": "squash", "parameters": [{"@type": "Parameter", "type": "string", "name": "message", "summary": "Message for the newly created squash commit"}, {"@type": "Parameter", "type": "string", "name": "author", "summary": "Author of the commit"}, {"@type": "Parameter", "type": "bool", "name": "reset", "summary": "Perform reset after squash"}], "returns": {"@type": "Returns", "name": "", "type": "str", "summary": "commit id to be reset"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> client.squash('This is a squash commit message!')"], "summary": "Squash the current branch HEAD into a commit"}, {"@type": "Definition", "name": "apply", "parameters": [{"@type": "Parameter", "type": "string", "name": "before_version", "summary": "Before branch/commit to compare"}, {"@type": "Parameter", "type": "string", "name": "after_object", "summary": "After branch/commit to compare"}, {"@type": "Parameter", "type": "string", "name": "branch", "summary": "Branch to apply to. Optional."}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Diff two different commits and apply changes on branch"}, {"@type": "Definition", "name": "diff_object", "parameters": [{"@type": "Parameter", "type": "string", "name": "before_object", "summary": "Before object to compare"}, {"@type": "Parameter", "type": "string", "name": "after_object", "summary": "After object to compare"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Diff two different objects."}, {"@type": "Definition", "name": "diff_version", "parameters": [{"@type": "Parameter", "type": "string", "name": "before_version", "summary": "Commit or branch of the before version to compare"}, {"@type": "Parameter", "type": "string", "name": "after_version", "summary": "Commit or branch of the after version to compare"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": null, "summary": "Diff two different versions. Can either be a branch or a commit"}, {"@type": "Definition", "name": "diff", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "obj", "summary": "Patch object"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> result = client.diff({ \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Jane\"}, { \"@id\" : \"Person/Jane\", \"@type\" : \"Person\", \"name\" : \"Janine\"})\n>>> result.to_json = '{ \"name\" : { \"@op\" : \"SwapValue\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}'"], "summary": "DEPRECATED"}, {"@type": "Definition", "name": "patch", "parameters": [{"@type": "Parameter", "type": "dict", "name": "before", "summary": "Object before to patch"}, {"@type": "Parameter", "type": "Patch", "name": "patch", "summary": "Patch object to apply to the dict"}], "returns": {"@type": "Returns", "name": "", "type": "dict", "summary": "After object"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> patch_obj = Patch(json='{\"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}')\n>>> result = client.patch({ \"@id\" : \"Person/Jane\", \"@type\" : Person\", \"name\" : \"Jane\"}, patch_obj)\n>>> print(result)\n'{ \"@id\" : \"Person/Jane\", \"@type\" : Person\", \"name\" : \"Janine\"}'"], "summary": "Apply the patch object to the before object and return an after object. Note that this change does not commit changes to the graph."}, {"@type": "Definition", "name": "patch_resource", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict", "summary": "After object"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.connect(user=\"admin\", key=\"root\", team=\"admin\", db=\"some_db\")\n>>> patch_obj = Patch(json='{\"name\" : { \"@op\" : \"ValueSwap\", \"@before\" : \"Jane\", \"@after\": \"Janine\" }}')\n>>> result = client.patch_resource(patch_obj,branch=\"main\")\n>>> print(result)\n'[\"Person/Jane\"]'"], "summary": "Apply the patch object to the given resource"}, {"@type": "Definition", "name": "clonedb", "parameters": [{"@type": "Parameter", "type": "str", "name": "clone_source", "summary": "The source url of the repo to be cloned."}, {"@type": "Parameter", "type": "str", "name": "newid", "summary": "Identifier of the new repository to create."}, {"@type": "Parameter", "type": "str, optional", "name": "Description", "summary": "Optional description about the cloned database."}, {"@type": "Parameter", "type": "str, optional", "name": "remote_auth", "summary": "Optional remote authorization (uses client remote auth otherwise)"}], "returns": {"@type": "Returns", "name": "", "type": "void"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client.clonedb(\"http://terminusdb.com/some_user/test_db\", \"my_test_db\")"], "summary": "Clone a remote repository and create a local copy."}, {"@type": "Definition", "name": "_generate_commit", "parameters": [{"@type": "Parameter", "type": "str", "name": "msg", "summary": "Commit message."}, {"@type": "Parameter", "type": "str", "name": "author", "summary": "Commit author."}], "returns": {"@type": "Returns", "name": "", "type": "dict", "summary": "Formatted commit info."}, "examples": [">>> client = Client(\"http://127.0.0.1:6363/\")\n>>> client._generate_commit(\"<message>\", \"<author>\")\n{'author': '<author>', 'message': '<message>'}"], "summary": "Pack the specified commit info into a dict format expected by the server."}, {"@type": "Definition", "name": "create_organization", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": "The id of the organization"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Add a new organization"}, {"@type": "Definition", "name": "get_organization_users", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": ""}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if not found"}, "examples": null, "summary": "Returns a list of users in an organization."}, {"@type": "Definition", "name": "get_organization_user", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": ""}, {"@type": "Parameter", "type": "str", "name": "username", "summary": ""}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if not found"}, "examples": null, "summary": "Returns user info related to an organization."}, {"@type": "Definition", "name": "get_organization_user_databases", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": ""}, {"@type": "Parameter", "type": "str", "name": "username", "summary": ""}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if not found"}, "examples": null, "summary": "Returns the databases available to a user which are inside an organization"}, {"@type": "Definition", "name": "get_organizations", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict or None if not found"}, "examples": null, "summary": "Returns a list of organizations in the database."}, {"@type": "Definition", "name": "get_organization", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": "The id of the organization"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if not found"}, "examples": null, "summary": "Returns a specific organization"}, {"@type": "Definition", "name": "delete_organization", "parameters": [{"@type": "Parameter", "type": "str", "name": "org", "summary": "The id of the organization"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if request failed"}, "examples": null, "summary": "Deletes a specific organization"}, {"@type": "Definition", "name": "change_capabilities", "parameters": [{"@type": "Parameter", "type": "dict", "name": "capability_change", "summary": "Dict for the capability change request.\n\nExample:\n{\n \"operation\": \"revoke\",\n \"scope\": \"UserDatabase/f5a0ef94469b32e1aee321678436c7dfd5a96d9c476672b3282ae89a45b5200e\",\n \"user\": \"User/admin\",\n \"roles\": [\n     \"Role/consumer\",\n     \"Role/admin\"\n  ]\n}"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if request failed"}, "examples": null, "summary": "Change the capabilities of a certain user"}, {"@type": "Definition", "name": "add_role", "parameters": [{"@type": "Parameter", "type": "dict", "name": "role", "summary": "The role dict"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")\n>>> role = {\n    \"name\": \"Grand Pubah\",\n    \"action\": [\n        \"branch\",\n        \"class_frame\",\n        \"clone\",\n        \"commit_read_access\",\n        \"commit_write_access\",\n        \"create_database\",\n        \"delete_database\",\n        \"fetch\",\n        \"instance_read_access\",\n        \"instance_write_access\",\n        \"manage_capabilities\",\n        \"meta_read_access\",\n        \"meta_write_access\",\n        \"push\",\n        \"rebase\",\n        \"schema_read_access\",\n        \"schema_write_access\"\n      ]\n  }\n>>> client.add_role(role)"], "summary": "Add a new role"}, {"@type": "Definition", "name": "change_role", "parameters": [{"@type": "Parameter", "type": "dict", "name": "role", "summary": "Role dict"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": [">>> client = Client(\"http://127.0.0.1:6363\")\n>>> client.connect(key=\"root\", team=\"admin\", user=\"admin\", db=\"example_db\")\n>>> role = {\n    \"name\": \"Grand Pubah\",\n    \"action\": [\n        \"branch\",\n        \"class_frame\",\n        \"clone\",\n        \"commit_read_access\",\n        \"commit_write_access\",\n        \"create_database\",\n        \"delete_database\",\n        \"fetch\",\n        \"instance_read_access\",\n        \"instance_write_access\",\n        \"manage_capabilities\",\n        \"meta_read_access\",\n        \"meta_write_access\",\n        \"push\",\n        \"rebase\",\n        \"schema_read_access\",\n        \"schema_write_access\"\n      ]\n  }\n>>> client.change_role(role)"], "summary": "Change role actions for a particular role"}, {"@type": "Definition", "name": "get_available_roles", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Get the available roles for the current authenticated user"}, {"@type": "Definition", "name": "add_user", "parameters": [{"@type": "Parameter", "type": "str", "name": "username", "summary": "The username of the user"}, {"@type": "Parameter", "type": "str", "name": "password", "summary": "The user's password"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Add a new user"}, {"@type": "Definition", "name": "get_user", "parameters": [{"@type": "Parameter", "type": "str", "name": "username", "summary": "The username of the user"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Get a user"}, {"@type": "Definition", "name": "get_users", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Get all users"}, {"@type": "Definition", "name": "delete_user", "parameters": [{"@type": "Parameter", "type": "str", "name": "username", "summary": "The username of the user"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Delete a user"}, {"@type": "Definition", "name": "change_user_password", "parameters": [{"@type": "Parameter", "type": "str", "name": "username", "summary": "The username of the user"}, {"@type": "Parameter", "type": "str", "name": "password", "summary": "The new password"}], "returns": {"@type": "Returns", "name": "", "type": "dict or None if failed"}, "examples": null, "summary": "Change user's password"}, {"@type": "Definition", "name": "get_database", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "dict"}, "examples": null, "summary": "Returns metadata (id, organization, label, comment) about the requested database\nParameters\n----------\ndbid : str\n    The id of the database\nteam : str\n    The organization of the database (default self.team)"}, {"@type": "Definition", "name": "has_database", "parameters": [{"@type": "Parameter", "type": "str", "name": "dbid", "summary": "The id of the database"}, {"@type": "Parameter", "type": "str", "name": "team", "summary": "The organization of the database (default self.team)"}], "returns": {"@type": "Returns", "name": "", "type": "True or False if not found"}, "examples": null, "summary": "Check whether a database exists"}, {"@type": "Definition", "name": "get_databases", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "list of dicts"}, "examples": null, "summary": "Returns a list of database metadata records for all databases the user has access to"}, {"@type": "Definition", "name": "list_databases", "parameters": [], "returns": {"@type": "Returns", "name": "", "type": "list of dicts"}, "examples": null, "summary": "Returns a list of database ids for all databases the user has access to"}]}]}]}
